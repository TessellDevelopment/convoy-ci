---
name: Version Check
on:
  workflow_call:

jobs:
  convoy-check:
    runs-on: amd64
    outputs:
      check: ${{steps.convoy_check.outputs.check}}
    steps:

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          
      - name: Check convoy.yaml version exists
        id: convoy_check
        run: |
          if [ -f convoy.yaml ]; then
            if grep -q 'version' convoy.yaml; then
              echo "Version found in convoy.yaml"
              echo "check=true" >> $GITHUB_OUTPUT
            else
              echo "Version not found in convoy.yaml"
              echo "check=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "convoy.yaml not present, skipping version check."
            echo "check=false" >> $GITHUB_OUTPUT
          fi

  version-check:
    needs: convoy-check
    if: needs.convoy-check.outputs.check == 'true'
    runs-on: amd64
    steps:

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - run: |
          npm install js-yaml
          npm install fs
        
      - name: Check Version in Nexus 
        uses: actions/github-script@v6.3.3
        env:
          NEXUS_URL: https://nexus.tessell.cloud/service/rest/v1/search?repository
          NEXUS_USER: ${{secrets.CIPIPELINE_NEXUS_USERNAME}}
          NEXUS_TOKEN: ${{ secrets.CIPIPELINE_NEXUS_PASSWORD}}
        with:
          script: |
            const fs = require('fs');
            const yaml = require('js-yaml');
            var nexusRepo;
            var version;
            var exporter;
            try{
              const content = fs.readFileSync('./convoy.yaml', 'utf8');
              const data = yaml.load(content);
              var artifactType = data.artifactType
              if(artifactType === 'helmChart'){
                const path = data.chartPath
                const contentHelm = fs.readFileSync(path, 'utf8');
                const dataHelm = yaml.load(contentHelm);
                version = dataHelm.version
              }
              else{
                version = data.version;
              }
              nexusUrl = data.nexusUrl;
              if(nexusUrl != undefined){
                const parts = nexusUrl.split('/');
                nexusRepo = parts[4];
              }
              artifacts = data.artifactNames;
              if(artifacts != undefined){
                exporter = artifacts[0];
              }
              if(version === undefined || nexusUrl === undefined || artifacts === undefined ){
                console.log("Required parameters not present in convoy.yaml, skipping check nexus version")
                process.exit(0);
              }
            } catch(error){
              console.log("convoy.yaml not present in respository skipping check nexus version.")
              console.error('Error:', error.message)
              process.exit(0);
            }
            if(nexusRepo === 'tessell-repos-py-component'){
              exporter = exporter.replaceAll('-','_')
            }
            console.log(nexusRepo);
            console.log(exporter);
            console.log(version);
            execSync = require('child_process').execSync;
            const output=execSync(`
                file="${exporter}-${version}"
                API_URL="$NEXUS_URL=${nexusRepo}&version=${version}"
                echo $API_URL
                echo $file
                response=$(curl -u "$NEXUS_USER:$NEXUS_TOKEN" -X GET "$API_URL")
                check="$(echo $response | grep $file)"
                if [ ! -z "$check" ]
                    then
                        echo "Fail"
                        exit 
                    fi
                
                while [ "$(echo $response | jq -r '.continuationToken')" != "null" ]; do
                    continuationToken=$(echo $response | jq -r '.continuationToken')
                    response=$(curl -u "$NEXUS_USER:$NEXUS_TOKEN" -X GET "$API_URL&continuationToken=$continuationToken")
                    check="$(echo $response | grep $file)"
                    if [ ! -z "$check" ]
                    then
                        echo "Fail"
                        exit 
                    fi
                done
                if [ -z "$check" ]
                    then
                        echo "Pass"
                        exit 
                    fi
            `, { encoding: 'utf-8' }); 
            console.log(output);
            if(output.includes("Fail"))
              throw "Update version, matching version file already present in Nexus"
            else
              console.log("Passed: No matching version present in Nexus")
            