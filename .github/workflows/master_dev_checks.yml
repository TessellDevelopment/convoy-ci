---
  name: Best Practices Check
  on:
    workflow_call:
    
  jobs:

    dev-checks:
      runs-on: non-build
      steps:
        - name: Dump GitHub context
          env:
            GITHUB_CONTEXT: ${{ toJson(github) }}
          run: |
            echo "$GITHUB_CONTEXT"

        - uses: actions/checkout@v4.1.1
          with:
            fetch-depth: 0

        - name: Get branch name
          shell: bash
          run: |
            echo "SOURCE_BRANCH=$(echo ${{ github.event.pull_request.head.ref }} | tr / -)" >> $GITHUB_ENV
            echo "TARGET_BRANCH=$(echo ${GITHUB_BASE_REF} | tr / -)" >> $GITHUB_ENV
            echo "GITHUB_TOKEN=${{ secrets.CIPIPELINE_GITHUB_TOKEN  }}" >> $GITHUB_ENV
        
        - name: Check Format
          env:
            PR_TITLE: ${{ github.event.pull_request.title }}
          run: |
            if echo "${{ env.SOURCE_BRANCH }}" | grep -Eq '^revert-'; then
                echo "Revert branch, skipping Format check"
                exit 0
            fi
            if echo "${{ env.SOURCE_BRANCH }}" | grep -Eq '^(${{vars.SUPPORTED_JIRA_PROJECTS}})'; then
              echo "Branch name starts with 'TS-' or 'SRE-' or 'TDEVOPS-' or 'TOPS-'"
            else
              echo "Branch name does not start with ${{vars.SUPPORTED_JIRA_PROJECTS}}. Checking PR title format."
              PULL_REQUEST_TITLE="$PR_TITLE"
              PATTERN="(${{vars.SUPPORTED_JIRA_PROJECTS}})-[0-9]+\s\|\s"
              if [[ ! $PULL_REQUEST_TITLE =~ $PATTERN ]]; then
                echo "Error: Pull request title is not in the required format. Please use ${{vars.SUPPORTED_JIRA_PROJECTS}}-XXXX format."
                exit 1
              else 
                echo "PR Title is in the valid format."
              fi  
            fi
              
        - name: Extract Jira Ticket
          id: extract
          env:
            PR_TITLE: ${{github.event.pull_request.title}}
            SUPPORTED_JIRA_PROJECTS: ${{vars.SUPPORTED_JIRA_PROJECTS}}
          run: |
            if echo "${{ env.SOURCE_BRANCH }}" | grep -Eq '^revert-'; then
                echo "Revert branch, skipping Jira Extraction"
                exit 0
            fi
            python3 - <<EOF
            import os
            import re
            import sys
            import yaml

            with open('convoy.yaml', 'r') as file:
                data = yaml.safe_load(file)

            supported_jira_projects = os.environ.get('SUPPORTED_JIRA_PROJECTS')
            branch_name = os.environ.get('SOURCE_BRANCH')
            pr_title = os.environ.get('PR_TITLE')
            jira_source = data.get('ci').get('bestPractices').get('jiraValidation').get('jiraIdSource')
            jira_match = data.get('ci').get('bestPractices').get('jiraValidation').get('matchingRule')

            match_branch = re.search(rf'({supported_jira_projects})\d+', branch_name)
            match_pr = re.search(rf'({supported_jira_projects})\d+', pr_title)
                
            if jira_match == 'ALL': 
                if match_branch and match_pr and jira_source == 'BOTH':
                    ticket_branch = match_branch.group(0)
                    ticket_pr = match_pr.group(0)
                    if ticket_branch == ticket_pr:
                        print(f"Same Jira present in both Branch and PR:{ticket_branch}")
                        sys.stdout.write(f"::set-output name=jira_ticket::{ticket_branch}\n")
                        exit(0)
                    else:
                        raise Exception("Error: Different Jira present in both Branch and PR")
                elif match_branch and jira_source == 'BRANCH_NAME_PREFIX':
                    ticket = match_branch.group(0)
                    print(f"Jira ticket extracted from Branch name:{ticket}")
                    sys.stdout.write(f"::set-output name=jira_ticket::{ticket}\n")
                    exit(0)
                elif match_pr and jira_source == 'PR_TITLE_PREFIX':
                    ticket = match_pr.group(0)
                    print(f"Jira ticket extracted from PR Title:{ticket}")
                    sys.stdout.write(f"::set-output name=jira_ticket::{ticket}\n")
                    exit(0)
                else:
                    raise Exception("No Appropriate Jira ticket found in Branch name or PR Title")   
            elif jira_match == 'ANY':
                    if jira_source == 'BRANCH_NAME_PREFIX':
                        if match_branch:
                            ticket = match_branch.group(0)
                            print(f"Jira ticket extracted from Branch name:{ticket}")
                            sys.stdout.write(f"::set-output name=jira_ticket::{ticket}\n")
                            exit(0)
                        else: 
                            print(f"No Jira ticket found in Branch name, checking in PR title")     
                            if match_pr :
                                ticket = match_pr.group(0)
                                print(f"Jira ticket extracted from PR Title:{ticket}")
                                sys.stdout.write(f"::set-output name=jira_ticket::{ticket}\n")
                                exit(0)
                            else:
                                raise Exception("No Appropriate Jira ticket found in Branch name or PR Title")  
                    elif jira_source == 'PR_TITLE_PREFIX':
                        if match_pr:
                            ticket = match_pr.group(0)
                            print(f"Jira ticket extracted from PR Title:{ticket}")
                            sys.stdout.write(f"::set-output name=jira_ticket::{ticket}\n")
                            exit(0)

                        else:
                            print(f"No Jira ticket found in PR Title, checking in Branch name")     
                            if match_branch:
                                ticket = match_branch.group(0)
                                print(f"Jira ticket extracted from Branch name:{ticket}")
                                sys.stdout.write(f"::set-output name=jira_ticket::{ticket}\n")
                                exit(0)
                            else:
                                raise Exception("No Appropriate Jira ticket found in Branch name or PR Title")  
                    elif jira_source == 'BOTH':
                        if match_branch:
                            ticket = match_branch.group(0)
                            print(f"Jira ticket extracted from Branch name:{ticket}")
                            sys.stdout.write(f"::set-output name=jira_ticket::{ticket}\n")
                            exit(0)
                        else: 
                            print(f"No Jira ticket found in Branch name, checking in PR title")     
                            if match_pr:
                                ticket = match_pr.group(0)
                                print(f"Jira ticket extracted from PR Title:{ticket}")
                                sys.stdout.write(f"::set-output name=jira_ticket::{ticket}\n")
                                exit(0)
                            else:
                                raise Exception("No Appropriate Jira ticket found in Branch name or PR Title")            
                    else: 
                        raise Exception("Error: Invalid selection in Jira Source")         
            elif jira_match == 'NONE':
                print("No extraction of Jira ticket specified")
                exit(0)
            else: 
                raise Exception("Invalid Jira Match type specified")
            EOF

        - name: Validate Jira Ticket
          env:
            JIRA: ${{steps.extract.outputs.jira_ticket}}
            JIRA_USERNAME: ${{ secrets.JIRA_USERNAME }}
            JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          run: |
            if echo "${{ env.SOURCE_BRANCH }}" | grep -Eq '^revert-'; then
              echo "Revert branch, skipping Jira Validation"
              exit 0
            fi
            echo "${{env.JIRA}}"
            python3 - <<EOF
            import os
            from jira import JIRA
            user = os.environ.get('JIRA_USERNAME')
            try:
              apikey = os.environ.get('JIRA_API_TOKEN')
              jira_ticket = os.environ.get('JIRA')
              options = {'server': 'https://tessell.atlassian.net'}
              jira = JIRA(options, basic_auth=(user, apikey) )
              try:
                  issue = jira.issue(jira_ticket)
                  print("Ticket Summary=",issue.fields.summary)
              except Exception as ex:
                  print("Not a valid jira", jira_ticket)
                  raise Exception(ex)
            except Exception as ex:
              raise Exception(ex)  
            EOF

        - name: Check double commit
          env: 
            PR_TITLE: ${{github.event.pull_request.title}}
            BRANCH: ${{ github.event.pull_request.head.ref}}
          run: |
            if ([[ '${{ github.event.pull_request.user.login }}' != 'cipipelinetessell' ]]) && ([[ "$BRANCH" == *"double_commit"* ]] || [[ "$PR_TITLE" == *"Double Commit"* ]]); then
              if ([[ "$BRANCH" == *"revert"* ]] && [[ "$PR_TITLE" == *"Revert"* ]]); then
                echo "Revert Double commit Branch. Allowed"
              else   
                echo "Exclude Double commit naming in Branch, PR title and try again."
                exit 1
              fi
            else
              echo "No double commit conflicts found in Branch or PR title."
            fi

        # - name: Check for Jsonlint
        #   run: |
        #     set -e
        #     git diff --name-only --diff-filter=AM ${{ github.event.pull_request.base.sha }}...${{ github.event.pull_request.head.sha }} | grep '\.json$' | xargs -I{} sh -c 'jsonlint -q "{}" || { echo "::error::Invalid JSON file: {}"; exit 1; }'
  
        # - name: Output PR diff 
        #   id: pr_diff
        #   uses: actions/github-script@v7.0.1
        #   with:
        #     script: |
        #       head_commit = "${{ github.sha }}"
        #       base_commit = "${{ github.sha }}"
        #       if ( "${{ github.event.before }}" != '0000000000000000000000000000000000000000') { 
        #         base_commit = "${{ github.event.before }}"
        #       }
        #       if ( "${{ github.event_name }}" == 'pull_request') {
        #         console.log("Using the base branch's commit for comparing.")
        #         base_commit = "${{ github.event.pull_request.base.sha  }}"
        #       }
        #       response = await github.rest.repos.compareCommits({
        #           owner: "${{ github.repository_owner }}",
        #           repo: "${{  github.repository }}".split('/')[1],
        #           head: head_commit,
        #           base: base_commit
        #       });
        #       core.setOutput('response', response) 

        # - name: Check for merge conflicts
        #   uses: actions/github-script@v7.0.1
        #   with:
        #     script: |
        #       response = ${{steps.pr_diff.outputs.response}}
        #       response.data.files.forEach(function(file_entry) {
        #         console.log(file_entry.filename);
        #         dir_name = file_entry.filename.split("/")[0];
        #         console.log(file_entry.patch);
        #         if(typeof file_entry.patch !== 'undefined'){
        #           if ( file_entry.patch.includes("+<<<<<<<") || file_entry.patch.includes("+=======") || file_entry.patch.includes("+>>>>>>>")) {
        #             core.setFailed("Please resolve Merge Conflict in: " + dir_name );  
        #           }
        #         }
        #         else{
        #           console.log("Skipping:" + file_entry.filename);
        #         }
        #       });
        #       console.log("No merge conflicts found"); 
        
        # - name: Check DB Migration Scripts
        #   id: check_db_migration
        #   uses: actions/github-script@v7.0.1
        #   with:
        #     script: |
        #       response = ${{steps.pr_diff.outputs.response}}
        #       let path = "";
        #       response.data.files.forEach(function(file_entry) {
        #         if (file_entry.filename.endsWith(".sql") && file_entry.filename.includes("db/migration/") && 
        #              (file_entry.status == 'modified' || file_entry.status == 'removed')) {
        #           console.log(file_entry.filename);
        #           console.log(file_entry.status);
        #           core.setFailed("Modifying or removing a flyway history file " + file_entry.filename);
        #         }
        #         if (file_entry.filename.endsWith(".sql") && file_entry.filename.includes("db/migration/")) {
        #           const lastSlashIndex = file_entry.filename.lastIndexOf("/");
        #           path = file_entry.filename.substring(0, lastSlashIndex);
        #         }
        #       });
        #       console.log(path);
        #       const { Octokit } = require("@octokit/rest");
        #       const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN, request: { fetch } });
        #       const { data: existingFiles } = await octokit.repos.getContent({
        #         owner: "${{ github.repository_owner }}",
        #         repo: "${{  github.repository }}".split('/')[1],
        #         ref: "${{github.base_ref}}",
        #         path: path,
        #       });
        #       console.log(existingFiles)
        #       const existing_versions = existingFiles.map(f => f.name.split("__")[0]);
        #       response.data.files.forEach(function(file_entry){
        #       if (file_entry.filename.endsWith(".sql") && file_entry.filename.includes("db/migration/")) {
        #           console.log(existing_versions)
        #           const version = file_entry.filename.split("__")[0].split("/").pop();
        #           console.log(version)
        #           console.log(existing_versions)
        #           if (existing_versions.includes(version)) {
        #             console.log(file_entry.filename);
        #             core.setFailed(`Flyway file with version ${version} already exists`);
        #           }
        #         }
        #       });
  
        # - name: Check Version sequence of DB Scripts
        #   id: check_db_version_seq
        #   if: steps.check_db_migration.outputs.db_migration_dir
        #   run:
        #     python3 .github/scripts/check_db_migration_version_sequence.py "${{ steps.check_db_migration.outputs.db_migration_dir }}"   
            
        # - name: Run API-spec Validation
        #   run: |
        #     if [ -f ".github/scripts/duplicate_check_for_component_paths.py" ]; then
        #       set -e
        #       python3 .github/scripts/duplicate_check_for_component_paths.py
        #     else
        #       echo "Validation file not present. Skipping check."
        #     fi
            
        # - name: check for terraform (code)
        #   id: terraform_check
        #   uses: actions/github-script@v7.0.1
        #   with:
        #     script: |
        #       response = ${{steps.pr_diff.outputs.response}}
        #       var terraform_file = [] 
        #       response.data.files.forEach(function(file_entry) {
        #         if (file_entry.filename.endsWith(".tf") && file_entry.status != 'removed') {
        #           console.log(file_entry.filename);
        #           console.log(file_entry.status);
        #           terraform_file.push(file_entry.filename)
        #           console.log(terraform_file) ;
        #         }
        #       });
        #       core.setOutput('terraform_files' , terraform_file.join(','));

       
        # - name: check for terraform version
        #   if: steps.terraform_check.outputs.terraform_files 
        #   env:
        #     terraform_files: ${{ steps.terraform_check.outputs.terraform_files }}
        #   run: |
        #     python3 - <<EOF
        #     import os
        #     import hcl2
        #     terraform_files = os.environ.get('terraform_files')
        #     version_missing = False
        #     for terraform_file in terraform_files.split(','):
        #         with open(terraform_file, 'r') as file:
        #             tf_file = hcl2.load(file)
        #         if 'terraform' in tf_file and 'required_providers' in tf_file['terraform'][0]:
        #             providers = tf_file['terraform'][0]['required_providers']
        #             for provider in providers:
        #                 for _provider, provider_info in provider.items():
        #                     for key  in provider_info:
        #                         if key == 'version':
        #                             break
        #                     else:
        #                         print(f"{terraform_file}: version is not present for {_provider} ")
        #                         version_missing = True
        #         if version_missing:
        #             sys.exit(1)
        #     EOF
        
  
        # - name: check to verify same branch is exist
        #   if: ${{ startsWith(env.TARGET_BRANCH,'rel-') && !contains(env.SOURCE_BRANCH,'double_commit') }}
        #   run: |
        #     branch_to_check=${{ env.SOURCE_BRANCH }}-main-double_commit
        #     list_of_branches=($(git branch -r | awk -F '/' '{print $2}'))
        #     for branch in "${list_of_branches[@]}";do
        #     if [[ "$branch" == "$branch_to_check" ]];then
        #       echo "Double commit branch with name $branch is alredy exist , please merge and/or delete  the branch ";exit 1;
        #     fi
        #     done
              