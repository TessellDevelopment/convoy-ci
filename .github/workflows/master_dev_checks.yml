---
  name: Best Practices Check
  on:
    workflow_call:
    
  jobs:

    dev-checks:
      runs-on: non-build
      env:
        CI-BRANCH: TDEVOPS-1832
        BASE_REF: "${{github.base_ref}}"
        BASE_SHA: ${{ github.event.pull_request.base.sha }}
        GITHUB_EVENT_BEFORE: "${{ github.event.before }}"
        GITHUB_EVENT_NAME: "${{ github.event_name }}"
        GITHUB_SHA: "${{ github.sha }}"
        GITHUB_TOKEN: ${{ secrets.CIPIPELINE_GITHUB_TOKEN }}
        HEAD_BRANCH: ${{ github.event.pull_request.head.ref}}
        HEAD_SHA: ${{ github.event.pull_request.head.sha }}
        JIRA_USERNAME: ${{ secrets.JIRA_USERNAME }}
        JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
        OWNER: "${{ github.repository_owner }}"
        PR_TITLE: "${{github.event.pull_request.title}}"
        REPO: "${{  github.repository }}"
        SUPPORTED_JIRA_PROJECTS: "${{vars.SUPPORTED_JIRA_PROJECTS}}" 
        USER: "${{github.event.pull_request.user.login}}"
      steps:
      
        - uses: actions/checkout@v4.1.1
          with:
            fetch-depth: 0

        - name: Dump GitHub context
          env:
            GITHUB_CONTEXT: ${{ toJson(github) }}
          run: |
            echo "$GITHUB_CONTEXT"

        - name: Setup CI Scripts
          run: |
            cd ~/convoy-ci
            git checkout ${{env.CI-BRANCH}}
            git pull
            cd ~-
            cp -r ~/convoy-ci/.github/ci-scripts ./ci-scripts
        
        - name: Check Branch PR Format
          run: |
            bash ./ci-scripts/bash/branch_checks.sh check_branch_pr_format
              
        - name: Validate Jira Ticket
          run: |
            if echo "${{ env.HEAD_BRANCH }}" | grep -Eq '^revert-'; then
                echo "Revert branch, skipping Jira Extraction"
                exit 0
            fi
            python3 ./ci-scripts/python/validate_jira_ticket.py

        - name: Check double commit
          run: |
            bash ./ci-scripts/bash/branch_checks.sh check_double_commit

        - name: Check for Jsonlint
          run: |
            set -e
            git diff --name-only --diff-filter=AM ${{ env.BASE_SHA }}...${{ env.HEAD_SHA }} | grep '\.json$' | xargs -I{} sh -c 'jsonlint -q "{}" || { echo "::error::Invalid JSON file: {}"; exit 1; }'

        - name: Output PR diff 
          run: |
            node ./ci-scripts/javascript/index.js outputPRDiff

        - name: Check for merge conflicts
          run: |
            node ./ci-scripts/javascript/index.js checkMergeConflicts
              
        - name: Check DB Migration Scripts
          run: |
            node ./ci-scripts/javascript/index.js checkDBMigrationScripts
            
        - name: Run API-spec Validation
          run: |
            if [ -f ".github/scripts/duplicate_check_for_component_paths.py" ]; then
              set -e
              python3 .github/ci-scripts/duplicate_check_for_component_paths.py
            else
              echo "Validation file not present. Skipping check."
            fi
            
        - name: Check for terraform (code)
          id: terraform_check
          run: |
            node ./ci-scripts/javascript/index.js checkTerraformVersion
       
        - name: Check for terraform version
          if: steps.terraform_check.outputs.terraform_files 
          env:
            terraform_files: ${{ steps.terraform_check.outputs.terraform_files }}
          run: |
            python3 ./ci-scripts/python/check_terraform_version.py
  
        - name: Check to verify if same branch exists
          if: ${{ startsWith(env.BASE_REF,'rel-') && !contains(env.HEAD_BRANCH,'double_commit') }}
          run: |
            bash ./ci-scripts/bash/branch_checks.sh check_existing_branches
              