---
  name: Best Practices Check
  on:
    workflow_call:
    
  jobs:
    dev-checks:
      runs-on: amd64
      steps:
        - name: Dump GitHub context
          env:
            GITHUB_CONTEXT: ${{ toJson(github) }}
          run: |
            echo "$GITHUB_CONTEXT"
  
        - uses: actions/checkout@v3
          with:
            token: ${{ secrets.CIPIPELINE_NEXUS_PASSWORD  }}
            fetch-depth: 0
  
        - name: Get branch name (merge)
          if: github.event_name != 'pull_request'
          shell: bash
          run: |
            echo "SOURCE_BRANCH=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV
  
        - name: Get branch name (pull request)
          if: github.event_name == 'pull_request'
          shell: bash
          run: |
            echo "SOURCE_BRANCH=$(echo ${{ github.event.pull_request.head.ref }} | tr / -)" >> $GITHUB_ENV
            echo "TARGET_BRANCH=$(echo ${GITHUB_BASE_REF} | tr / -)" >> $GITHUB_ENV
            echo "GITHUB_TOKEN=${{ secrets.CIPIPELINE_NEXUS_PASSWORD  }}" >> $GITHUB_ENV
          
        - name: Check Format
          env:
            PR_TITLE: ${{ github.event.pull_request.title }}
          run: |
            if echo "${{ env.SOURCE_BRANCH }}" | grep -Eq '^revert-'; then
                echo "Revert branch, skipping Format check"
                exit 0
            fi
            if echo "${{ env.SOURCE_BRANCH }}" | grep -Eq '^TS-' || echo "${{ env.SOURCE_BRANCH }}" | grep -Eq '^revert-' || echo "${{ env.SOURCE_BRANCH }}" | grep -Eq '^TDEVOPS-' || "${{ env.SOURCE_BRANCH }}" | grep -Eq '^TOPS-'; then
              echo "Branch name starts with 'TS-' or 'revert-' or 'TDEVOPS-'or 'TOPS-" 
            else
              echo "Branch name does not start with 'TS-' or 'revert-' or 'TDEVOPS-' or 'TOPS-'. Checking PR title format."
              PULL_REQUEST_TITLE="$PR_TITLE"
              PATTERN="^(TS|TDEVOPS|TOPS)-[0-9]+\s\|\s[a-zA-Z0-9]+$"
              if [[ ! $PULL_REQUEST_TITLE =~ $PATTERN ]]; then
                echo "Error: Pull request title is not in the required format. Please use 'TS-XXXX | --' or 'TDEVOPS-XXXX | --' or 'TOPS-XXXX | --' format."
                exit 1
              else 
                echo "PR Title is in the valid format."
              fi  
            fi
  
        - name: Set up Python
          uses: actions/setup-python@v2
  
        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            pip install shyaml
              
        - name: Extract Jira Ticket
          id: extract
          env:
            PR_TITLE: ${{github.event.pull_request.title}}
          run: |
            if echo "${{ env.SOURCE_BRANCH }}" | grep -Eq '^revert-'; then
                echo "Revert branch, skipping Jira Extraction"
                exit 0
            fi
            jira_source=$(shyaml get-value ci.best-practices.jiraValidation.jiraIdSource < convoy.yaml)
            jira_match=$(shyaml get-value ci.best-practices.jiraValidation.matchingRule < convoy.yaml)
            extract_jira_id "${{env.SOURCE_BRANCH}}" "$PR_TITLE" "$jira_source" "$jira_match"
  
        - name: Validate Jira Ticket
          run: |
            if echo "${{ env.SOURCE_BRANCH }}" | grep -Eq '^revert-'; then
              echo "Revert branch, skipping Jira Validation"
              exit 0
            fi
            echo "${{steps.extract.outputs.jira_ticket}}"
            validate_jira_id '${{ secrets.JIRA_USERNAME }}' '${{ secrets.JIRA_API_TOKEN }}' '${{ steps.extract.outputs.jira_ticket }}'

        - name: Check double commit
          env: 
            PR_TITLE: ${{github.event.pull_request.title}}
            BRANCH: ${{ github.event.pull_request.head.ref}}
          run: |
            if ([[ '${{ github.event.pull_request.user.login }}' != 'varenyatessell' ]]) && ([[ "$BRANCH" == *"double_commit"* ]] || [[ "$PR_TITLE" == *"Double Commit"* ]]); then
              if ([[ "$BRANCH" == *"revert"* ]] && [[ "$PR_TITLE" == *"Revert"* ]]); then
                echo "Revert Double commit Branch. Allowed"
              else   
                echo "Exclude Double commit naming in Branch, PR title and try again."
                exit 1
              fi
            else
              echo "No double commit conflicts found in Branch or PR title."
            fi

        - name: import packages for json lint
          run: |
            sudo sudo npm install jsonlint -g
            
        - name: Check for Jsonlint
          run: |
            set -e
            git diff --name-only --diff-filter=AM ${{ github.event.pull_request.base.sha }}...${{ github.event.pull_request.head.sha }} | grep '\.json$' | xargs -I{} sh -c 'jsonlint -q "{}" || { echo "::error::Invalid JSON file: {}"; exit 1; }'
  
        - name: install octokit/rest
          run: |
            if [ ! -d "node_modules/@octokit/rest" ]; then
              npm cache clean --force
              npm install @octokit/rest --legacy-peer-deps
            fi
        - name: install node fetch 
          run: | 
            npm install node-fetch
  
        - name: Install dependencies
          run: npm install js-yaml
  
        - name: Check for merge conflicts
          uses: actions/github-script@v6.4.1
          with:
            github-token: ${{ secrets.CIPIPELINE_NEXUS_PASSWORD  }}
            script: |
              head_commit = "${{ github.sha }}"
              base_commit = "${{ github.sha }}"
              if ( "${{ github.event.before }}" != '0000000000000000000000000000000000000000') { 
                base_commit = "${{ github.event.before }}"
              }
              if ( "${{ github.event_name }}" == 'pull_request') {
                console.log("Using the base branch's commit for comparing.")
                base_commit = "${{ github.event.pull_request.base.sha  }}"
              }
              response = await github.rest.repos.compareCommits({
                  owner: "${{ github.repository_owner }}",
                  repo: "${{  github.repository }}".split('/')[1],
                  head: head_commit,
                  base: base_commit
              });
              response.data.files.forEach(function(file_entry) {
                console.log(file_entry.filename);
                dir_name = file_entry.filename.split("/")[0];
                console.log(file_entry.patch);
                if(typeof file_entry.patch !== 'undefined'){
                  if ( file_entry.patch.includes("+<<<<<<<") || file_entry.patch.includes("+=======") || file_entry.patch.includes("+>>>>>>>")) {
                    core.setFailed("Please resolve Merge Conflict in: " + dir_name );  
                  }
                }
                else{
                  console.log("Skipping:" + file_entry.filename);
                }
              });
              console.log("No merge conflicts found"); 
        
        - name: Check DB Migration Scripts
          id: check_db_migration
          uses: actions/github-script@v6.4.1
          if: github.event_name == 'pull_request'
          with:
            github-token: ${{ secrets.CIPIPELINE_NEXUS_PASSWORD  }}
            script: |
              head_commit = "${{ github.sha }}"
              base_commit = "${{ github.sha }}"
              if ( "${{ github.event.before }}" != '0000000000000000000000000000000000000000') { 
                base_commit = "${{ github.event.before }}"
              }
              if ( "${{ github.event_name }}" == 'pull_request') {
                console.log("Using the base branch's commit for comparing.")
                base_commit = "${{ github.event.pull_request.base.sha  }}"
              }
              console.log("base_commit " + base_commit);
              console.log("head_commit " + head_commit); 
              response = await github.rest.repos.compareCommits({
                  owner: "${{ github.repository_owner }}",
                  repo: "${{  github.repository }}".split('/')[1],
                  head: head_commit,
                  base: base_commit
              });
              response.data.files.forEach(function(file_entry) {
                if (file_entry.filename.endsWith(".sql") && file_entry.filename.includes("db/migration/") && 
                     (file_entry.status == 'modified' || file_entry.status == 'removed')) {
                  console.log(file_entry.filename);
                  console.log(file_entry.status);
                  core.setFailed("Modifying or removing a flyway history file " + file_entry.filename);
                }
              });
              let path = "";
              response.data.files.forEach(function(file_entry) {
                if (file_entry.filename.endsWith(".sql") && file_entry.filename.includes("db/migration/")) {
                  const lastSlashIndex = file_entry.filename.lastIndexOf("/");
                  path = file_entry.filename.substring(0, lastSlashIndex);
                }
              });
              console.log(path);
              const { Octokit } = require("@octokit/rest");
              const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN, request: { fetch } });
              const { data: existingFiles } = await octokit.repos.getContent({
                owner: "${{ github.repository_owner }}",
                repo: "${{  github.repository }}".split('/')[1],
                ref: "${{github.base_ref}}",
                path: path,
              });
              console.log(existingFiles)
              const existing_versions = existingFiles.map(f => f.name.split("__")[0]);
              response.data.files.forEach(function(file_entry){
              if (file_entry.filename.endsWith(".sql") && file_entry.filename.includes("db/migration/")) {
                  console.log(existing_versions)
                  const version = file_entry.filename.split("__")[0].split("/").pop();
                  console.log(version)
                  console.log(existing_versions)
                  if (existing_versions.includes(version)) {
                    console.log(file_entry.filename);
                    core.setFailed(`Flyway file with version ${version} already exists`);
                  }
                }
              });
  
        - name: check for terraform (code)
          if : github.event_name == 'pull_request'
          id: terraform_check
          uses: actions/github-script@v6.3.3
          with:
            github-token: ${{ secrets.CIPIPELINE_NEXUS_PASSWORD  }}
            script: |
              head_commit = "${{ github.sha }}"
              base_commit = "${{ github.sha }}"
              if ( "${{ github.event.before }}" != '0000000000000000000000000000000000000000') { 
                base_commit = "${{ github.event.before }}"
              }
              if ( "${{ github.event_name }}" == 'pull_request') {
                console.log("Using the base branch's commit for comparing.")
                base_commit = "${{ github.event.pull_request.base.sha  }}"
              }
              console.log("base_commit " + base_commit);
              console.log("head_commit " + head_commit); 
              response = await github.rest.repos.compareCommits({
                  owner: "${{ github.repository_owner }}",
                  repo: "${{  github.repository }}".split('/')[1],
                  head: head_commit,
                  base: base_commit
              });
              var terraform_file = [] 
              response.data.files.forEach(function(file_entry) {
                if (file_entry.filename.endsWith(".tf") && file_entry.status != 'removed') {
                  console.log(file_entry.filename);
                  console.log(file_entry.status);
                  terraform_file.push(file_entry.filename)
                  console.log(terraform_file) ;
                }
              });
              core.setOutput('terraform_file' , terraform_file.join(','));

        - name: Check Version sequence of DB Scripts
          id: check_db_version_seq
          if: steps.check_db_migration.outputs.db_migration_dir
          run:
            python3 .github/scripts/check_db_migration_version_sequence.py "${{ steps.check_db_migration.outputs.db_migration_dir }}"      
        
  
        - name: check for terraform version
          if: steps.terraform_check.outputs.terraform_file 
          run:
            terraform_version_check "${{ steps.terraform_check.outputs.terraform_file }}"
        
  
        - name: check to verify same branch is exist
          if: ${{ startsWith(env.TARGET_BRANCH,'rel-') && !contains(env.SOURCE_BRANCH,'double_commit') }}
          run: |
            branch_to_check=${{ env.SOURCE_BRANCH }}-main-double_commit
            list_of_branches=($(git branch -r | awk -F '/' '{print $2}'))
            for branch in "${list_of_branches[@]}";do
            if [[ "$branch" == "$branch_to_check" ]];then
              echo "Double commit branch with name $branch is alredy exist , please merge and/or delete  the branch ";exit 1;
            fi
            done
              