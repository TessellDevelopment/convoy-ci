---
# This is a basic workflow to help you get started with Actions
name: Tessell Pipelines Code Build

# Controls when the workflow will run
on:
  workflow_call:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  file-check:
    runs-on: self-hosted
    outputs:
      specific: ${{steps.check-file-output.outputs.specific}}
    name: Check changed files
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 
      - name: Changed files
        id: changed-files-specific
        uses: tj-actions/changed-files@v39
        with:
          files: |
            .github/**
      - name: Set Output
        id: check-file-output
        run: |
          echo "specific=${{steps.changed-files-specific.outputs.only_changed}}" >> $GITHUB_OUTPUT
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    if: needs.file-check.outputs.specific == 'false' 
    runs-on: self-hosted
    needs: file-check
    outputs:
      mail_id_output: ${{ steps.mail_info.outputs.mail_id }}
      mail_subject_output: ${{ steps.mail_info.outputs.mail_subject}}
      mail_body_output: ${{ steps.mail_info.outputs.mail_body }}
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL  }}
      NEXUS_SERVER: nexus.tessell.cloud
      NEXUS_PULL_REPOS_PY: tessell-py-development
      GITHUB_USER: ${{ secrets.CIPIPELINE_NEXUS_USERNAME }}
      GITHUB_TOKEN: ${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}
      DOCKERHUB_ORG: "tesselldev"
      ARTIFACT_NAME: "tessell-tsm-infra"
      GROUP_NAME: "tessell.tsm.infra"

    steps:
      - name: Get branch name
        shell: bash
        run: |
          echo "SOURCE_BRANCH=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV
          echo "DOCKER_IMAGE_NAME=$(echo ${GITHUB_REPOSITORY} | cut -f2 -d'/')" >> $GITHUB_ENV

      - name: Set Pull repository
        if: ${{ startsWith(env.SOURCE_BRANCH,'rel-') || env.SOURCE_BRANCH == 'main' }}
        shell: bash
        run: |
          echo "NEXUS_PULL_REPOS_PY=tessell-py-component" >> $GITHUB_ENV
          echo "DOCKERHUB_ORG=tessellprod" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get branch name
        shell: bash
        run: |
          echo "SOURCE_BRANCH=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV

      - name: Build
        run: |
          mkdir -p build; cd tsmv101; terraform_build $PWD ../build/${ARTIFACT_NAME}.zip; cd ../build; ls -l;
          unzip -l ${ARTIFACT_NAME}.zip
          cd ..

      - name: Push to repository
        if: ${{ startsWith(env.SOURCE_BRANCH,'rel-') || env.SOURCE_BRANCH == 'main' }}
        run: |
            mkdir -p $HOME/.m2
            cp .github/scripts/settings.xml $HOME/.m2/settings.xml
            cat $HOME/.m2/settings.xml
            VERSION=$(cat version.txt | awk -F "=" {'print $2'})
            mvn deploy:deploy-file -Dnexus_url=https://${NEXUS_SERVER}/repository/tessell-m2-component \
                -Dnexus_username=${GITHUB_USER} -Dnexus_password=${GITHUB_TOKEN} \
                -DgroupId=${GROUP_NAME} -DartifactId=${ARTIFACT_NAME} -Dversion=$VERSION \
                -DgeneratePom=true -Dpackaging=zip \
                -Durl=https://${NEXUS_SERVER}/repository/tessell-repos-m2-component \
                -Dfile=build/${ARTIFACT_NAME}.zip -DrepositoryId=nexus

      - name: Slack Notification
        uses: act10ns/slack@v1.5.0
        if: ${{ failure() && (startsWith(env.SOURCE_BRANCH,'rel-') || env.SOURCE_BRANCH == 'main') }}
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: ${{ secrets.SLACK_DEVOPS_CHANNEL  }}

      - name: Get PR-Author,subject & body to send email
        if: ${{ failure() && contains(github.event.pull_request.head.ref, 'double_commit') }}
        run: |
          echo "MAILID=$(git log -1 '${{ github.event.pull_request.head.sha }}' --pretty=format:'%ae')" >> $GITHUB_ENV
          echo "BODY=JOB_STATUS : ${{ job.status }} %0A WORKFLOW : ${{ github.workflow }} %0A EVENT : ${{ github.event_name }} %0A BRANCH : ${{ env.SOURCE_BRANCH }} %0A COMMIT_ID : ${{ github.sha }} %0A REPO : ${{ github.repository }}" >> $GITHUB_ENV

      - name: sending output
        if: ${{ failure() && contains(github.event.pull_request.head.ref, 'double_commit') }}
        id: mail_info
        run: |
          echo "::set-output name=mail_id::${{ env.MAILID }}"
          echo "::set-output name=mail_subject::***${{ job.status }}*** || ${{ github.workflow }}  ||  ${{ github.repository }} "
          echo "::set-output name=mail_body::${{ env.BODY }}"

  send-mail:
    uses: ./.github/workflows/email_dc.yaml
    needs: build
    with:
      subject: ${{ needs.build.outputs.mail_subject_output }}
      body: ${{ needs.build.outputs.mail_body_output }}
      to: ${{ needs.build.outputs.mail_id_output }}
    secrets: inherit
    if: ${{ failure() && contains(github.event.pull_request.head.ref, 'double_commit') }}
