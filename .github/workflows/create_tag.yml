---
###################################################################################
# GitHub workflow to automatically create a PR against 'main' branch,
# when there is a PR on 'rel-*' branch created.
#
# 1. It checks if the PR already exist and if so, does not create one.
# 2. In future we can enhance it to read the branch name from Jira label or
#    equivalent and then create PR. This way we can extend it to multiple
#    forward merges.
###################################################################################
name: Create tag on release branch
on:
  workflow_call:

jobs:
  create-tag-on-merge:
    runs-on: self-hosted
    outputs:
      mail_id_output: ${{ steps.mail_info.outputs.mail_id }}
      mail_subject_output: ${{ steps.mail_info.outputs.mail_subject}}
      mail_body_output: ${{ steps.mail_info.outputs.mail_body }}
      tag_ref_output: ${{ steps.mail_info.outputs.tag_ref }}
    env:
       SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL  }}
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Find latest tag
        run: |
          latest_tags+=("$(git tag --contains '${{ github.event.pull_request.base.sha }}')")
          for tag in $latest_tags; do tag_arr+=($tag); done
          echo "TAGS=${tag_arr[@]}" >> $GITHUB_ENV
        id: latest_tag

      - name: Create tag and update ref
        uses: actions/github-script@v6.3.3
        id: create_tag
        with:
          github-token: ${{ secrets.CIPIPELINE_NEXUS_PASSWORD  }}
          script: |
            latest_tag = '0.0.0'
            // process multiple tags if any
            tags = "${{ env.TAGS }}".split(' ')
            if (tags.length == 1) {
              latest_tag = tags[0]
            } else {
              if ("${{ github.event.pull_request.base.ref }}" == "main") {
                for (i in tags) {
                  tag = tags[i]
                  console.log("Checking tag " + tag)
                  if (latest_tag == null) {
                    latest_tag = tag
                    continue
                  }
                  latest_parts = latest_tag.split(".")
                  tag_parts = tag.split(".")
                  for (i = 0; i < tag_parts.length; i++) {
                    if (parseInt(tag_parts[i]) < parseInt(latest_parts[i])) {
                      console.log("Skipping " + tag)
                      break
                    }
                    if (parseInt(tag_parts[i]) > parseInt(latest_parts[i])) {
                      latest_tag = tag
                      console.log("Setting " + latest_tag)
                      break
                    }
                  }
                }
              } else {
                tag_base = "${{ github.event.pull_request.base.ref }}".substring(4).split(".").slice(0,2)
                latest_tag = tag_base.join(".") + ".0"
                for (i in tags) {
                  tag = tags[i]
                  console.log("branch - Checking tag " + tag)
                  tag_parts = tag.split(".")
                  if (tag_base[0] == tag_parts[0] && tag_base[1] == tag_parts[1]) {
                    latest_parts = latest_tag.split(".")
                    if (parseInt(latest_parts[2]) < parseInt(tag_parts[2])) {
                      latest_tag = tag
                    }
                  }
                }
              }
            }
            console.log("Latest tag: " + latest_tag)

            // check if we have
            if ( latest_tag == '' || latest_tag === undefined) {
              console.log("Couldn't determine the latest tag, exiting. Retry manually..")
              process.exit(1);
            }

            // increase the minor version lineraly to get the new tag
            tag_parts = latest_tag.split('.')
            new_tag = [tag_parts[0], tag_parts[1], parseInt(tag_parts[2]) + 1].join('.')

            // head of the branch needs to be tagged
            sha_to_tag = "${{ github.event.pull_request.merge_commit_sha }}"

            console.log("Creating tag: " + new_tag + " against commit " + sha_to_tag)

            result = await github.rest.git.createTag({
                owner: "${{ github.repository_owner }}",
                repo: "${{  github.repository }}".split('/')[1],
                tag: new_tag,
                message: 'Tag created by CI pipeline',
                type: 'commit',
                object: sha_to_tag
            });

            console.log(result)

            fullTagName = "refs/tags/" + new_tag

            console.log("Updating tag with REF: " + fullTagName)

            newRef = await github.rest.git.createRef({
                owner: "${{ github.repository_owner }}",
                repo: "${{  github.repository }}".split('/')[1],
                ref: fullTagName,
                sha: sha_to_tag
            });

            console.log('Ref updated.');
            core.setOutput('tag_ref', fullTagName)          
      - name: Slack Notification
        uses: act10ns/slack@v1.5.0
        with:
           status: ${{ job.status }}
           steps: ${{ toJson(steps) }}
           channel: ${{ secrets.SLACK_DEVOPS_CHANNEL  }}
        if: failure()

      - name: Get PR-Author,subject & body to send email
        if: ${{ failure() && contains(github.event.pull_request.head.ref, 'double_commit') }}
        run: |
          echo "MAILID=$(git log -1 '${{ github.event.pull_request.head.sha }}' --pretty=format:'%ae')" >> $GITHUB_ENV
          echo "BODY=JOB_STATUS : ${{ job.status }} %0A WORKFLOW : ${{ github.workflow }} %0A EVENT : ${{ github.event_name }} %0A BRANCH : ${{ env.SOURCE_BRANCH }} %0A COMMIT_ID : ${{ github.sha }} %0A REPO : ${{ github.repository }}" >> $GITHUB_ENV
 
      - name: sending output
        if: ${{ failure() && contains(github.event.pull_request.head.ref, 'double_commit') }}
        id: mail_info
        run: |
          echo "mail_id=${{ env.MAILID }}" >> $GITHUB_OUTPUT
          echo "mail_subject=***${{ job.status }}*** || ${{ github.workflow }}  ||  ${{ github.repository }} " >> $GITHUB_OUTPUT
          echo "mail_body=${{ env.BODY }}" >> $GITHUB_OUTPUT
          echo "tag_ref=${{steps.create_tag.outputs.tag_ref}}" >> $GITHUB_OUTPUT
          
  send-mail:
    uses: ./.github/workflows/email_dc.yaml
    needs: create-tag-on-merge
    with:
      subject: ${{ needs.create-tag-on-merge.outputs.mail_subject_output }}
      body: ${{ needs.create-tag-on-merge.outputs.mail_body_output }}
      to: ${{ needs.create-tag-on-merge.outputs.mail_id_output }}
    secrets: inherit
    if: ${{ failure() && contains(github.event.pull_request.head.ref, 'double_commit') }}

  post-convoy: 
    runs-on: self-hosted
    needs: create-tag-on-merge
    steps:

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.10

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests pyyaml

      - name: Run Python script
        env:
          API_URL: https://api.dev.convoy.tessell.cloud/devops/git-metadata/commits
          commit_hash: "${{github.sha}}"
          repo: "${{github.repository}}"
          tag: "${{needs.create-tag-on-merge.outputs.tag_ref_output}}"
          base_branch: "${{github.event.pull_request.base.ref}}"
          commit_message: "${{github.event.id}}"
          pr_id: "${{github.ref}}"
          github_token: ${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}
          user: ${{secrets.CIPIPELINE_NEXUS_USERNAME}}
        run: |
          python - <<EOF
          
          import yaml
          import requests
          import os
          import time

          def exclude_keys(data, keys_to_exclude):
            return {key: value for key, value in data.items() if key not in keys_to_exclude}

          API_URL = os.environ.get('API_URL')
          github_token = os.environ.get('github_token')+':'+ os.environ.get('user')
          repo = os.environ.get('repo')
          commit_hash = os.environ.get('commit_hash')
          commit_message = os.environ.get('commit_message')
          base_branch = os.environ.get('base_branch')
          pr_id = os.environ.get('pr_id')
          tag = os.environ.get('tag')
          
          github_token = base64.b64encode(github_token.encode('utf-8')).decode('utf-8')
          with open('convoy.yaml', 'r') as convoy_content:
              yaml_data = yaml.safe_load(convoy_content)
          type = yaml_data.get('artifactType') 
          payload={}

          if type == 'dockerImage':
            payload = {
              "repoName": repo,
              "commitHash": commit_hash,
              "commitMessage": commit_message,
              "baseBranch": base_branch,
              "tag": tag,
              "pullRequestId": pr_id,
              "artifactMetadata": {
                "type": type,
                "version": tag,
              }
            }
          elif type == 'helmChart':
            version_path = yaml_data.get('version')
            with open(version_path, 'r') as helm_content:
              data = yaml.safe_load(helm_content)
            version = data.get('version') 
            payload = {
              "repoName": repo,
              "commitHash": commit_hash,
              "commitMessage": commit_message,
              "baseBranch": base_branch,
              "tag": tag,
              "pullRequestId": pr_id,
              "artifactMetadata": {
                "type": type,
                "version": version,
              }
            }
          elif type == 'zip':
            keys_to_exclude = ['artifactType', 'version']
            convoy_content = exclude_keys(yaml_data, keys_to_exclude)
            version = yaml_data.get('version')
            if version == None:
              version=tag
            payload = {
              "repoName": repo,
              "commitHash": commit_hash,
              "commitMessage": commit_message,
              "baseBranch": base_branch,
              "tag": tag,
              "pullRequestId": pr_id,
              "artifactMetadata": {
                "type": type,
                "version": version,
                "convoyConfig": convoy_content
              }
            }
          elif type == 'nested':
            artifacts=[]
            headers = {'Authorization': f'Bearer {github_token}'}
            url = f'https://api.github.com/repos/TessellDevelopment/tessell-terraform-modules/pulls/{pr_id}/files'
            res = requests.get(url, headers=headers)
            files_data = res.json()

            modified_folders = set()
            for file_data in files_data:
                file_path = file_data['filename']
                folder_path = '/'.join(file_path.split('/')[:-1])  
                modified_folders.add(folder_path)

            print("Modified folders:")
            for folder in modified_folders:
                print(folder)
                path = f'./{folder}/convoy.yaml'
                with open(path, 'r') as module_content:
                  module_data = yaml.safe_load(module_content)
                data = {
                  "name": folder,
                  "convoyConfig": module_data
                } 
                artifacts.append(data) 

            payload = {
              "repoName": repo,
              "commitHash": commit_hash,
              "commitMessage": commit_message,
              "baseBranch": base_branch,
              "tag": tag,
              "pullRequestId": pr_id,
              "artifactMetadata": {
                "type": type,
                "artifacts": artifacts
              }
            }
          else:
            print("Invalid Type in Convoy.yaml")
            
          headers = {
              'Authorization': f'Bearer {github_token}',
              'Content-Type': 'application/json'
          }

          max_retries = 3
          retry_delay = 5 

          for _ in range(max_retries):
              response = requests.post(API_URL, json=payload, headers=headers)
              if response.status_code == 200:
                  print(response.status_code)
                  print(response.text)
                  break
              else:
                  print(response.text)
                  print(f"Retrying... ({max_retries - _} attempts left)")
                  time.sleep(retry_delay)
          else:
              print("API request failed after retries.")
              exit(1)
          print("POST request Complete")
          EOF