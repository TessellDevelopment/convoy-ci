# This is a basic workflow to help you get started with Actions
name: Tessell Pipelines Code Build

# Controls when the workflow will run
on:
  workflow_call:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  file-check:
    runs-on: self-hosted
    outputs:
      any-modified: ${{steps.check-file-output.outputs.any-modified}}
    name: Check changed files
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Changed files
        id: changed-files
        uses: tj-actions/changed-files@v39
        with:
          files: |
            scripts/Dockerfile
            scripts/initializeAutomation.sh
      - name: Set Output
        id: check-file-output
        run: |
          echo "any-modified=${{steps.changed-files.outputs.any_modified}}" >> $GITHUB_OUTPUT

  build:
    runs-on: self-hosted
    needs: file-check
    outputs:
      mail_id_output: ${{ steps.mail_info.outputs.mail_id }}
      mail_subject_output: ${{ steps.mail_info.outputs.mail_subject}}
      mail_body_output: ${{ steps.mail_info.outputs.mail_body }}
    env:
      NEXUS_SERVER: nexus.tessell.cloud
      NEXUS_PULL_REPOS_PY: tessell-py-development
      DOCKER_IMAGE_NAME: tessell-qa-runner

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get branch name
        shell: bash
        run: |
          echo "SOURCE_BRANCH=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV

      - name: Create pip conf
        run: |
          # Create pip.conf and copy to /etc; 
          # The --extra_index_url option of pip install does not work with username/password
          # Also pip does not have separate option to specify creds.
          echo "[global]" > pip.conf
          echo "index =  https://${{ secrets.CIPIPELINE_NEXUS_USERNAME }}:${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}@${{ env.NEXUS_SERVER }}/repository/${{ env.NEXUS_PULL_REPOS_PY }}/simple" >> pip.conf
          echo "index-url = https://${{ secrets.CIPIPELINE_NEXUS_USERNAME }}:${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}@${{ env.NEXUS_SERVER }}/repository/${{ env.NEXUS_PULL_REPOS_PY }}/simple" >> pip.conf
          echo "extra-index-url = https://pypi.org/simple" >> pip.conf
          sudo cp pip.conf /etc/pip.conf
        shell: bash


      - name: Setup environment
        id: setup
        shell: bash
        run: |
          INSTALL_DIR=/usr/local/bin
          sudo mkdir -p $INSTALL_DIR/openapitools
          curl https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/bin/utils/openapi-generator-cli.sh > openapi-generator-cli
          sudo cp openapi-generator-cli $INSTALL_DIR/openapitools/openapi-generator-cli
          sudo chmod 755 $INSTALL_DIR/openapitools/openapi-generator-cli
          sudo ln -f -s $INSTALL_DIR/openapitools/openapi-generator-cli $INSTALL_DIR/openapi-generator
          wget https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/6.0.0/openapi-generator-cli-6.0.0.jar -O openapi-generator-cli.jar
          sudo mv openapi-generator-cli.jar /usr/local/bin/openapi-generator-cli-6.0.0.jar
          sudo python3 -m pip install -r scripts/requirements.txt
          pip install yq

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Make clients
        id: make_clients
        shell: bash
        run: |
          export PYTHONPATH=lib
          export GITHUB_USER="${{ secrets.CIPIPELINE_NEXUS_USERNAME }}"
          export GITHUB_TOKEN="${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}"
          cp configs/qarel.json config.json
          make clients -B

      - name: Dry run
        id: dry_run_check
        shell: bash
        run: |
          python3 ./main.py ./testcases -s -v --dry-run --run-long-tests --business-edition
      
      - name: Extract version
        id: extract-version
        run: | 
          VERSION=$(yq '.version' convoy.yaml)
          echo "The extracted value is: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV    
      
      - name: Build and push to tessellDev
        if: ${{ !startsWith(env.SOURCE_BRANCH,'rel-') && env.SOURCE_BRANCH != 'main' && needs.file-check.outputs.any-modified == 'true' }}
        env:
          DOCKERHUB_ORG: tesselldev
        run: |
          cd scripts
          docker build -t $DOCKERHUB_ORG/${{env.DOCKER_IMAGE_NAME}}:${{ env.VERSION }} .
          docker push $DOCKERHUB_ORG/${{env.DOCKER_IMAGE_NAME}}:${{ env.VERSION }}
  
      - name: Build and push to tessellProd
        if: ${{ (startsWith(env.SOURCE_BRANCH,'rel-') || env.SOURCE_BRANCH == 'main') && needs.file-check.outputs.any-modified == 'true' }}
        env:
          DOCKERHUB_ORG: tessellprod
        run: |
          cd scripts
          docker build -t $DOCKERHUB_ORG/${{env.DOCKER_IMAGE_NAME}}:${{ env.VERSION }} .
          docker push $DOCKERHUB_ORG/${{env.DOCKER_IMAGE_NAME}}:${{ env.VERSION }}

      - name: Get PR-Author,subject & body to send email
        if: ${{ failure() && contains(github.event.pull_request.head.ref, 'double_commit') }}
        run: |
          echo "MAILID=$(git log -1 '${{ github.event.pull_request.head.sha }}' --pretty=format:'%ae')" >> $GITHUB_ENV
          echo "BODY=JOB_STATUS : ${{ job.status }} %0A WORKFLOW : ${{ github.workflow }} %0A EVENT : ${{ github.event_name }} %0A BRANCH : ${{ env.SOURCE_BRANCH }} %0A COMMIT_ID : ${{ github.sha }} %0A REPO : ${{ github.repository }}" >> $GITHUB_ENV
 
      - name: sending output
        if: ${{ failure() && contains(github.event.pull_request.head.ref, 'double_commit') }}
        id: mail_info
        run: |
          echo "mail_id=${{ env.MAILID }}" >> $GITHUB_OUTPUT
          echo "mail_subject=***${{ job.status }}*** || ${{ github.workflow }}  ||  ${{ github.repository }} " >> $GITHUB_OUTPUT
          echo "mail_body=${{ env.BODY }}" >> $GITHUB_OUTPUT
           
  post-build-status-to-convoy:
    runs-on: self-hosted
    needs: build
    if: always()  
    steps:
      - name: Set up Python
        uses: actions/setup-python@v2

      - name: Get branch name
        shell: bash
        run: |
          echo "SOURCE_BRANCH=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests pybase64

      - uses: technote-space/workflow-conclusion-action@v3
        with:
          GITHUB_TOKEN: ${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}

      - name: POST API to Convoy
        if: ${{ startsWith(env.SOURCE_BRANCH,'rel-') || env.SOURCE_BRANCH == 'main' }}
        env:
          API_URL: http://convoy-devops.convoy:8080/devops/git-metadata/build-status
          COMMIT_HASH: "${{github.sha}}"
          REPO: "${{github.repository}}"
          BASE_BRANCH: "${{github.event.pull_request.base.ref}}"
          GITHUB_TOKEN: ${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}
          USER: ${{secrets.CIPIPELINE_NEXUS_USERNAME}}
          STATUS: "${{env.WORKFLOW_CONCLUSION}}"
          SOURCE_BRANCH: "${{env.SOURCE_BRANCH}}"
        run: |
          python - <<EOF
          import requests
          import json
          import os
          import time
          import base64

          API_URL = os.environ.get('API_URL')
          REPO = os.environ.get('REPO')
          COMMIT_HASH = os.environ.get('COMMIT_HASH')
          BASE_BRANCH = os.environ.get('BASE_BRANCH')
          STATUS = (os.environ.get('STATUS')).upper()
          CONVOY_AUTH_TOKEN = os.environ.get('USER')+':'+ os.environ.get('GITHUB_TOKEN')
          CONVOY_AUTH_TOKEN = base64.b64encode(CONVOY_AUTH_TOKEN.encode('utf-8')).decode('utf-8')

          if not(bool(BASE_BRANCH)):
            BASE_BRANCH = os.environ.get('SOURCE_BRANCH')
          
          OWNER = REPO.split("/")
          REPO = OWNER[1]
          
          if STATUS == 'SUCCESS':
            STATUS='SUCCESSFULL'
          if STATUS == 'FAILURE':
            STATUS = 'FAILED'

          payload = {
            "repoName": REPO,
            "commitHash": COMMIT_HASH,
            "baseBranch": BASE_BRANCH,
            "buildStatus": STATUS
          }

          print(payload)
          headers = {
            'Content-Type': 'application/json',
            'Authorization': f'Basic {CONVOY_AUTH_TOKEN}'
          }

          max_retries = 3
          retry_delay = 5 
      
          for _ in range(max_retries):
              response = requests.post(API_URL, json=payload, headers=headers)
              if response.status_code == 200:
                  print(response.status_code)
                  print(response.text)
                  break
              else:
                  print(response.status_code)
                  print(response.text)
                  print(f"Retrying... ({max_retries - _} attempts left)")
                  time.sleep(retry_delay)
          else:
              print("API request failed after retries.")
              exit(1)
          print("POST request Complete")
          EOF

  send-mail:
    uses: ./.github/workflows/email_dc.yaml
    needs: build
    with:
      subject: ${{ needs.build.outputs.mail_subject_output }}
      body: ${{ needs.build.outputs.mail_body_output }} 
      to: ${{ needs.build.outputs.mail_id_output }}
    secrets: inherit
    if: ${{ failure() && contains(github.event.pull_request.head.ref, 'double_commit') }}

            

