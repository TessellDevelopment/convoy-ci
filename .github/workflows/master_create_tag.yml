---
name: Create tag on release branch
on:
  workflow_call:
    inputs:
      label:
        description: 'Release label'
        required: true
        type: string
    outputs:
      tag:
        description: "New tag created post merge"
        value: ${{ jobs.create-tag-on-merge.outputs.tag_ref_output }}
      uses_custom_version:
        description: "Key for using tag as version"
        value: ${{ jobs.create-tag-on-merge.outputs.uses_custom_version }}

jobs:

  create-tag-on-merge:
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
    runs-on: non-build
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL  }}
      LABEL: ${{inputs.label}}
    outputs:
      tag_ref_output: ${{ steps.tag_output.outputs.tag_ref }}
      uses_custom_version: ${{ steps.tag_output.outputs.uses_custom_version }}
    steps:
      - uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      - name: Find latest tag
        id: latest_tag
        run: |
          latest_tags+=("$(git tag --contains '${{ github.event.pull_request.base.sha }}')")
          for tag in $latest_tags; do tag_arr+=($tag); done
          echo "TAGS=${tag_arr[@]}" >> $GITHUB_ENV

      - name: Check if tag exists
        run: |
          current_tag="$(git tag --contains ${{ github.event.pull_request.merge_commit_sha }})"
          if [[ ! -z "$current_tag" ]]; then
            echo "Tag already exists for commit ${{ github.event.pull_request.merge_commit_sha }}: $current_tag"
            echo "CURRENT_TAG=$current_tag" >> $GITHUB_ENV
            echo "TAG_EXISTS=true" >> $GITHUB_ENV
          else
            echo "TAG_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Create tag and update ref
        uses: actions/github-script@v7.0.1
        id: create_tag
        with:
          github-token: ${{ secrets.CIPIPELINE_GITHUB_TOKEN  }}
          script: |
            const fs = require('fs');
            const yaml = require('js-yaml');
            const content = fs.readFileSync('./convoy.yaml', 'utf8');
            const data = yaml.load(content);
            var language = data.language
            var version = data.version
            var uses_custom_version = "false"
            var base_branch = "${{ github.event.pull_request.base.ref }}"
            if (language === 'helm' || version !== undefined){
              uses_custom_version = "true"
            }
            if ("${{env.TAG_EXISTS}}" === 'true'){
              new_tag = "${{env.CURRENT_TAG}}"
              console.log("Skipping New tag creation")
            } 
            else {
              latest_tag = '0.0.0'
              // process multiple tags if any
              tags = "${{ env.TAGS }}".split(' ')
              if (tags.length == 1) {
                latest_tag = tags[0]
              } 
              else {
                if (language === 'helm'){
                  for (i in tags) {
                    tag = tags[i]
                    console.log("Checking tag " + tag)
                    if (latest_tag == '0.0.0') {
                      latest_tag = tag
                      continue
                    }
                    latest_parts = latest_tag.split(".")
                    tag_parts = tag.split(".")
                    for (i = 0; i < tag_parts.length; i++) {
                      if (parseInt(tag_parts[i]) > parseInt(latest_parts[i])) {
                        console.log("Skipping " + tag)
                        break
                      }
                      if (parseInt(tag_parts[i]) < parseInt(latest_parts[i])) {
                        latest_tag = tag
                        console.log("Setting " + latest_tag)
                        break
                      }
                    }
                  }
                }
                else{
                  if ("${{ github.event.pull_request.base.ref }}" == "main") {
                    for (i in tags) {
                      tag = tags[i]
                      console.log("Checking tag " + tag)
                      if (latest_tag == null) {
                        latest_tag = tag
                        continue
                      }
                      latest_parts = latest_tag.split(".")
                      tag_parts = tag.split(".")
                      for (i = 0; i < tag_parts.length; i++) {
                        if (parseInt(tag_parts[i]) < parseInt(latest_parts[i])) {
                          console.log("Skipping " + tag)
                          break
                        }
                        if (parseInt(tag_parts[i]) > parseInt(latest_parts[i])) {
                          latest_tag = tag
                          console.log("Setting " + latest_tag)
                          break
                        }
                      }
                    }
                  } else {
                    tag_base = "${{ github.event.pull_request.base.ref }}".substring(4).split(".").slice(0,2)
                    latest_tag = tag_base.join(".") + ".0"
                    for (i in tags) {
                      tag = tags[i]
                      console.log("branch - Checking tag " + tag)
                      tag_parts = tag.split(".")
                      if (tag_base[0] == tag_parts[0] && tag_base[1] == tag_parts[1]) {
                        latest_parts = latest_tag.split(".")
                        if (parseInt(latest_parts[2]) < parseInt(tag_parts[2])) {
                          latest_tag = tag
                        }
                      }
                    }
                  }
                }
              }
              console.log("Latest tag: " + latest_tag)

              // check if we have
              if ( latest_tag == '' || latest_tag === undefined) {
                console.log("Couldn't determine the latest tag, exiting. Retry manually..")
                process.exit(1);
              }
              if (language === 'helm'){
                previous_base = latest_tag.split('-')[0];
                previous_minor = parseInt(previous_base.split('.').pop(), 10);
                new_minor = previous_minor + 1;
                
                if (base_branch.startsWith('rel-')) {
                    new_tag = `${previous_base.split('.').slice(0, -1).join('.')}.${new_minor}-${base_branch}`;
                } else {
                    new_tag = `${previous_base.split('.').slice(0, -1).join('.')}.${new_minor}`;
                }
              }
              else{
                // increase the minor version lineraly to get the new tag
                tag_parts = latest_tag.split('.')
                new_tag = [tag_parts[0], tag_parts[1], parseInt(tag_parts[2]) + 1].join('.')
              }
            
              // head of the branch needs to be tagged
              sha_to_tag = "${{ github.event.pull_request.merge_commit_sha }}"

              console.log("Creating tag: " + new_tag + " against commit " + sha_to_tag)

              result = await github.rest.git.createTag({
                  owner: "${{ github.repository_owner }}",
                  repo: "${{  github.repository }}".split('/')[1],
                  tag: new_tag,
                  message: 'Tag created by CI pipeline',
                  type: 'commit',
                  object: sha_to_tag
              });

              console.log(result)

              fullTagName = "refs/tags/" + new_tag

              console.log("Updating tag with REF: " + fullTagName)

              newRef = await github.rest.git.createRef({
                  owner: "${{ github.repository_owner }}",
                  repo: "${{  github.repository }}".split('/')[1],
                  ref: fullTagName,
                  sha: sha_to_tag
              });
              console.log('Ref updated.');
            }
            core.setOutput('tag_ref', new_tag) 
            core.setOutput('uses_custom_version', uses_custom_version)  

      - name: Tag Output
        id: tag_output
        run: |
          echo "tag_ref=${{steps.create_tag.outputs.tag_ref}}" >> $GITHUB_OUTPUT
          echo "uses_custom_version=${{steps.create_tag.outputs.uses_custom_version}}" >> $GITHUB_OUTPUT

      - name: Set Label
        id: set_label
        shell: bash
        run: |
          validate_label=false
          if [ -f convoy.yaml ]; then
            language=$(yq '.language' convoy.yaml)
            version=$(yq '.version' convoy.yaml)
            if [[ "$language" == "helm" ]]; then
              echo "Helm repo, No validation needed using version as tag."
            elif [[ "$version" != "null" ]]; then
              echo "Version present in convoy.yaml, No validation needed using version as tag."
            else
              validate_label=true
              if [[ "${{ github.event.pull_request.base.ref }}" == "main" ]]; then
                APP_GROUP=$(yq '.appGroup // "tessell"' convoy.yaml)
                URL="http://${{vars.CONVOY_API_ENDPOINT}}/devops/applications/app-groups/$APP_GROUP/latest-main-release-label"
                RESPONSE=$(curl -f --location "$URL" --header "x-api-key: ${{secrets.CONVOY_AUTH_TOKEN}}")
                echo "$RESPONSE"
                LABEL=$(echo "$RESPONSE" | jq -r '.["latest-main-release-label"]')
                echo "$LABEL"
                if [[ $LABEL == rel-* ]]; then
                    echo "LABEL=$LABEL" >> $GITHUB_ENV
                else
                    echo "Response: $LABEL"
                    echo "Label does not start with 'rel'. Check response."
                    exit 1 
                fi
              
              else
                echo "LABEL=${{ github.event.pull_request.base.ref }}" >> $GITHUB_ENV
              fi
            fi  
           else
            echo "convoy.yaml not found"
           fi 
           echo "validate_label=$validate_label" >> $GITHUB_OUTPUT

      - name: Validate Label
        if: ${{ steps.set_label.outputs.validate_label == 'true' }}
        run: |
          tag=$(echo ${{steps.create_tag.outputs.tag_ref}} | cut -d '.' -f 2)
          label=$(echo ${{env.LABEL}} | cut -d '.' -f 2)
          if [ "$tag" == "$label" ]; then
              echo "TAG and LABEL are on same release label: rel-$TAG"
          else
              echo "TAG and LABEL are on different release label. Please check git tag and API response."
              exit 1
          fi   

      - name: Slack Notification
        if: failure()
        uses: act10ns/slack@v2.0.0
        with:
           status: ${{ job.status }}
           steps: ${{ toJson(steps) }}
           channel: ${{ secrets.SLACK_DEVOPS_CHANNEL  }}
