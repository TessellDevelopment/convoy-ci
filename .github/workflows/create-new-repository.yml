---
name: Create new repository
on:
  workflow_dispatch:
    inputs:
      organisation:
        description: Organisation name
        required: true
        default: 'TessellDevelopment'
      new_repo_name:
        description: New repository name
        required: true
      new_repo_desc:
        description: Repository description
        required: true
      repo_owner:
        description: Repository Owner (e.g., sundeeptessell)
        required: true
      template_repo:
        description: Template repository
        required: true
        default: 'tessell-template-repo'
jobs:
  check-repository-settings:
    runs-on: self-hosted
    steps:
      - name: Validate repository name
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ secrets.PIPELINES_REPO_TOKEN }}
          script: |
            var result = await github.rest.orgs.get({
              org: "${{ github.event.inputs.organisation }}"
            })
            total_repo_count = result.data['total_private_repos']
            page_count = 100
            max_pages = total_repo_count / page_count
            if (total_repo_count % page_count) {
              max_pages = max_pages + 1
            }
            var arr = []
            for (var page_no = 1; page_no <= max_pages; page_no++) {
              result = await github.rest.repos.listForOrg({
                org: "${{ github.event.inputs.organisation }}",
                type: 'all',
                accept: 'application/vnd.github.v3+json',
                sort: 'full_name',
                per_page: page_count,
                page: page_no
              })
              for (var idx in result.data) {
                if (result.data[idx]['name'] == "${{ github.event.inputs.new_repo_name }}") {
                  core.setFailed("Repository with name, ${{ github.event.inputs.new_repo_name }} already exists.")
                }
              }
            }

      - name: Validate repository owner
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ secrets.PIPELINES_REPO_TOKEN }}
          script: |
            var result = await github.rest.orgs.checkMembershipForUser({
              org: "${{ github.event.inputs.organisation }}",
              username: "${{ github.event.inputs.repo_owner }}"
            })
            if (result.status != 204) {
              core.setFailed("User, ${{ github.event.inputs.repo_owner }}, does not belong Tessell.")
            }
            try {
              var result = await github.rest.orgs.checkBlockedUser({
                org: "${{ github.event.inputs.organisation }}",
                username: "${{ github.event.inputs.repo_owner }}"
              })
              if (result.status == 204) {
                core.setFailed("User, ${{ github.event.inputs.repo_owner }}, is blocked in Tessell.")
              }
            } catch (error) {
              console.log(error)
            }
            console.log("User, ${{ github.event.inputs.repo_owner }}, is a valid user.")

      - name: Create repository from template
        id: org_repos
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ secrets.PIPELINES_REPO_TOKEN }}
          script: |
            const result = await github.rest.repos.createUsingTemplate({
              template_owner: "${{ github.event.inputs.organisation }}",
              template_repo: "${{ github.event.inputs.template_repo }}",
              owner: "${{ github.event.inputs.organisation }}",
              name: "${{ github.event.inputs.new_repo_name }}",
              description: "${{ github.event.inputs.new_repo_desc }}",
              private: true
            })
      - name: Check repository created
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ secrets.PIPELINES_REPO_TOKEN }}
          script: |
            try {
              const result = await github.rest.repos.get({
                owner: "${{ github.event.inputs.organisation }}",
                repo: "${{ github.event.inputs.new_repo_name }}",
                accept: 'application/vnd.github.v3+json'
              })
              console.log("Repository with name, ${{ github.event.inputs.new_repo_name }} created successfully")
            } catch (err) {
              core.setFailed("Repository with name, ${{ github.event.inputs.new_repo_name }} does not exists.")
            }
      - name: Set repository owner
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ secrets.PIPELINES_REPO_TOKEN }}
          script: |
            const result = await github.rest.repos.addCollaborator({
                owner: "${{ github.event.inputs.organisation }}",
                repo: "${{ github.event.inputs.new_repo_name }}",
                accept: 'application/vnd.github.v3+json',
                username: "${{ github.event.inputs.repo_owner }}",
                permission: "admin"
            })

      - name: Configure settings
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ secrets.PIPELINES_REPO_TOKEN }}
          script: |
            console.log("Configuring the git repository pull-request settings.")
            const result = await github.rest.repos.update({
                owner: "${{ github.event.inputs.organisation }}",
                repo: "${{ github.event.inputs.new_repo_name }}",
                accept: 'application/vnd.github.v3+json',
                fork: false,
                allow_squash_merge: true,
                allow_merge_commit: false,
                allow_rebase_merge: false,
                delete_branch_on_merge: true
            })
