---
# This is a basic workflow to help you get started with Actions
name: Tessell Pipelines Code Build

# Controls when the workflow will run
on:
  workflow_call:

jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: self-hosted
    outputs:
      mail_id_output: ${{ steps.mail_info.outputs.mail_id }}
      mail_subject_output: ${{ steps.mail_info.outputs.mail_subject}}
      mail_body_output: ${{ steps.mail_info.outputs.mail_body }}
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL  }}
      NEXUS_SERVER: nexus.tessell.cloud
      NEXUS_PULL_REPOS_M2: tessell-m2-development
      NEXUS_PUSH_REPOS_M2: tessell-repos-m2-development
      GOPATH: /home/github/go
      GITHUB_USER: ${{ secrets.CIPIPELINE_NEXUS_USERNAME }}
      GITHUB_TOKEN: ${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}
      OS_NAMES: "linux windows"

    steps:
      - name: Get branch name
        shell: bash
        run: |
          echo "SOURCE_BRANCH=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV

      - name: Set Pull repository
        if: ${{ startsWith(env.SOURCE_BRANCH,'rel-') || env.SOURCE_BRANCH == 'main' }}
        shell: bash
        run: |
          echo "NEXUS_PULL_REPOS_M2=tessell-m2-component" >> $GITHUB_ENV
          echo "NEXUS_PUSH_REPOS_M2=tessell-repos-m2-component" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |
          git config --global url."https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com".insteadOf "https://github.com"
          go version
          go install golang.org/x/tools/cmd/goimports@latest
          which go

      - name: Install AWS CLI
        run: |
          curl -L -o install-aws.sh https://raw.githubusercontent.com/unfor19/install-aws-cli-action/master/entrypoint.sh && \
          chmod +x install-aws.sh
          sudo ./install-aws.sh "v2" "amd64"
          rm install-aws.sh

      - run: aws --version
        shell: bash

      - name: Configure AWS Credentials
        run: |
          aws configure set aws_access_key_id ${{ secrets.PROD_ASSET_ACCESS_KEY }}
          aws configure set aws_secret_access_key ${{ secrets.PROD_ASSET_SECRET_KEY }}
          aws configure set region ap-south-1

      - name: Make clients
        run: |
          for os in ${OS_NAMES[@]};do
          echo "Building the service"
          git config --global url."https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com".insteadOf "https://github.com"
          make os=$os package
          make os=$os upgrader
          make clean
          ls -lrta package
          done

      - name: getting commit id for workflow_dispatch
        uses: actions/github-script@v6.3.3
        id: find_commit
        if: ${{ startsWith(env.SOURCE_BRANCH,'rel-') || env.SOURCE_BRANCH == 'main' }}
        with:
          github-token: ${{ secrets.CIPIPELINE_NEXUS_PASSWORD  }}
          script: |
            if (${{ github.event_name  == 'workflow_dispatch'}} ){
                core.setOutput('commit_id', "${{ github.sha }}" )
            }
            else{
               core.setOutput('commit_id', "${{ github.event.after }}" )
            }

      - name: Get tags
        uses: nick-fields/retry@v2.8.1
        if: ${{ startsWith(env.SOURCE_BRANCH,'rel-') || env.SOURCE_BRANCH == 'main' }}
        with:
          timeout_seconds: 10
          max_attempts: 3
          retry_on: error
          command: |
            git fetch --all
            git tag --contains '${{ steps.find_commit.outputs.commit_id}}'
            latest_tags+=("$(git tag --contains '${{ steps.find_commit.outputs.commit_id }}')")
            if [[ "$latest_tags" == '' ]]; then 
              echo " Tag is Empty"
              exit 1
            fi
            echo "Tag is present: $latest_tags"       
            for tag in $latest_tags; do tag_arr+=($tag); done
            echo "TAGS=${tag_arr[@]}" >> $GITHUB_ENV

      - name: Find latest tag
        uses: actions/github-script@v6.3.3
        id: latest_tag
        if: ${{ startsWith(env.SOURCE_BRANCH,'rel-') || env.SOURCE_BRANCH == 'main' }}
        with:
          github-token: ${{ secrets.PIPELINES_REPO_TOKEN  }}
          script: |
            console.log("Tags are " + "${{ env.TAGS }}")
            latest_tag = '0.0.0'
            // process multiple tags if any
            tags = "${{ env.TAGS }}".split(' ')
            if (tags.length == 1) {
              console.log("There is only one tag. Using it." + tags[0])
              latest_tag = tags[0]
            } else {
              if ("${{ env.SOURCE_BRANCH }}" == "main") {
                for (i in tags) {
                  tag = tags[i]
                  console.log("Checking tag " + tag)
                  if (latest_tag == null) {
                    latest_tag = tag
                    continue
                  }
                  latest_parts = latest_tag.split(".")
                  tag_parts = tag.split(".")
                  for (i = 0; i < tag_parts.length; i++) {
                    if (parseInt(tag_parts[i]) < parseInt(latest_parts[i])) {
                      console.log("Skipping " + tag)
                      break
                    }
                    if (parseInt(tag_parts[i]) > parseInt(latest_parts[i])) {
                      latest_tag = tag
                      console.log("Setting " + latest_tag)
                      break
                    }
                  }
                }
              } else {
                tag_base = "${{ env.SOURCE_BRANCH }}".substring(4).split(".").slice(0,2)
                latest_tag = tag_base.join(".") + ".0"
                for (i in tags) {
                  tag = tags[i]
                  console.log("branch - Checking tag " + tag)
                  tag_parts = tag.split(".")
                  if (tag_base[0] == tag_parts[0] && tag_base[1] == tag_parts[1]) {
                    latest_parts = latest_tag.split(".")
                    if (parseInt(latest_parts[2]) < parseInt(tag_parts[2])) {
                      latest_tag = tag
                    }
                  }
                }
              }
            }
            console.log("Latest tag: " + latest_tag)

            // check if we have
            if ( latest_tag == '' || latest_tag === undefined) {
              console.log("Couldn't determine the latest tag, exiting. Retry manually..")
              process.exit(1);
            }
            core.setOutput('tag_ref', latest_tag)

      - name: Push to repository
        if: ${{ startsWith(env.SOURCE_BRANCH,'rel-') || env.SOURCE_BRANCH == 'main' }}
        run: |
            for os in ${OS_NAMES[@]};do
            mkdir -p $HOME/.m2
            cp .github/scripts/settings.xml $HOME/.m2/settings.xml
            cat $HOME/.m2/settings.xml
            mvn deploy:deploy-file -Dnexus_url=https://${NEXUS_SERVER}/repository/${NEXUS_PULL_REPOS_M2} \
                -Dnexus_username=${GITHUB_USER} -Dnexus_password=${GITHUB_TOKEN} \
                -DgroupId=tessell.agent -DartifactId=tessell-agent-pkg-$os -Dversion=${{ steps.latest_tag.outputs.tag_ref }} \
                -DgeneratePom=true -Dpackaging=tar \
                -Durl=https://${NEXUS_SERVER}/repository/${NEXUS_PUSH_REPOS_M2} \
                -Dfile=package/tessell-agent-pkg-$os.tar -DrepositoryId=nexus

            mvn deploy:deploy-file -Dnexus_url=https://${NEXUS_SERVER}/repository/${NEXUS_PULL_REPOS_M2} \
                -Dnexus_username=${GITHUB_USER} -Dnexus_password=${GITHUB_TOKEN} \
                -DgroupId=tessell.agent -DartifactId=tessell-upgrader-pkg-$os -Dversion=${{ steps.latest_tag.outputs.tag_ref }} \
                -DgeneratePom=true -Dpackaging=tar \
                -Durl=https://${NEXUS_SERVER}/repository/${NEXUS_PUSH_REPOS_M2} \
                -Dfile=package/tessell-upgrader-pkg-$os.tar -DrepositoryId=nexus
            done

      - name: Upload tar file to S3 Bucket
        if: ${{ startsWith(env.SOURCE_BRANCH,'rel-') || env.SOURCE_BRANCH == 'main' }}
        run: |
          VERSION=${{ steps.latest_tag.outputs.tag_ref }}
          for os in ${OS_NAMES[@]};do
            mv package/tessell-agent-pkg-$os.tar package/tessell-agent-pkg-$os-$VERSION.tar
            mv package/tessell-upgrader-pkg-$os.tar package/tessell-upgrader-pkg-$os-$VERSION.tar
            aws s3 cp package/tessell-agent-pkg-$os-$VERSION.tar s3://tesselltools/terls/tessell/agent/$VERSION/
            aws s3 cp package/tessell-upgrader-pkg-$os-$VERSION.tar s3://tesselltools/terls/tessell/agent/$VERSION/
          done  

      - name: Slack Notification
        uses: act10ns/slack@v1.5.0
        if: ${{ failure() && (startsWith(env.SOURCE_BRANCH,'rel-') || env.SOURCE_BRANCH == 'main') }}
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: ${{ secrets.SLACK_DEVOPS_CHANNEL  }}

      - name: Get PR-Author,subject & body to send email
        if: ${{ failure() && contains(github.event.pull_request.head.ref, 'double_commit') }}
        run: |
          echo "MAILID=$(git log -1 '${{ github.event.pull_request.head.sha }}' --pretty=format:'%ae')" >> $GITHUB_ENV
          echo "BODY=JOB_STATUS : ${{ job.status }} %0A WORKFLOW : ${{ github.workflow }} %0A EVENT : ${{ github.event_name }} %0A BRANCH : ${{ env.SOURCE_BRANCH }} %0A COMMIT_ID : ${{ github.sha }} %0A REPO : ${{ github.repository }}" >> $GITHUB_ENV
 
      - name: sending output
        if: ${{ failure() && contains(github.event.pull_request.head.ref, 'double_commit') }}
        id: mail_info
        run: |
          echo "mail_id=${{ env.MAILID }}" >> $GITHUB_OUTPUT
          echo "mail_subject=***${{ job.status }}*** || ${{ github.workflow }}  ||  ${{ github.repository }} " >> $GITHUB_OUTPUT
          echo "mail_body=${{ env.BODY }}" >> $GITHUB_OUTPUT
        

  post-build-status-to-convoy:
    runs-on: self-hosted
    needs: build
    if: always()  
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.CONVOY_ALERTS_SLACK_URL }}
    steps:
      - name: Set up Python
        uses: actions/setup-python@v2

      - name: Get branch name
        shell: bash
        run: |
          echo "SOURCE_BRANCH=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests pybase64

      - uses: technote-space/workflow-conclusion-action@v3
        with:
          GITHUB_TOKEN: ${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}

      - name: POST API to Convoy
        if: ${{ startsWith(env.SOURCE_BRANCH,'rel-') || env.SOURCE_BRANCH == 'main' }}
        env:
          API_URL: http://convoy-devops.convoy:8080/devops/git-metadata/build-status
          COMMIT_HASH: "${{github.sha}}"
          REPO: "${{github.repository}}"
          BASE_BRANCH: "${{github.event.pull_request.base.ref}}"
          GITHUB_TOKEN: ${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}
          USER: ${{secrets.CIPIPELINE_NEXUS_USERNAME}}
          STATUS: "${{env.WORKFLOW_CONCLUSION}}"
          SOURCE_BRANCH: "${{env.SOURCE_BRANCH}}"
        run: |
          python - <<EOF
          import requests
          import json
          import os
          import time
          import base64

          API_URL = os.environ.get('API_URL')
          REPO = os.environ.get('REPO')
          COMMIT_HASH = os.environ.get('COMMIT_HASH')
          BASE_BRANCH = os.environ.get('BASE_BRANCH')
          STATUS = (os.environ.get('STATUS')).upper()
          CONVOY_AUTH_TOKEN = os.environ.get('USER')+':'+ os.environ.get('GITHUB_TOKEN')
          CONVOY_AUTH_TOKEN = base64.b64encode(CONVOY_AUTH_TOKEN.encode('utf-8')).decode('utf-8')

          if not(bool(BASE_BRANCH)):
            BASE_BRANCH = os.environ.get('SOURCE_BRANCH')
          
          OWNER = REPO.split("/")
          REPO = OWNER[1]
          
          if STATUS == 'SUCCESS':
            STATUS = 'SUCCESSFUL'
          if STATUS == 'FAILURE':
            STATUS = 'FAILED'

          payload = {
            "repoName": REPO,
            "commitHash": COMMIT_HASH,
            "baseBranch": BASE_BRANCH,
            "buildStatus": STATUS
          }

          print(payload)
          headers = {
            'Content-Type': 'application/json',
            'Authorization': f'Basic {CONVOY_AUTH_TOKEN}'
          }

          max_retries = 3
          retry_delay = 5 
      
          for _ in range(max_retries):
              response = requests.post(API_URL, json=payload, headers=headers)
              if response.status_code == 200:
                  print(response.status_code)
                  print(response.text)
                  break
              else:
                  print(response.status_code)
                  print(response.text)
                  print(f"Retrying... ({max_retries - _} attempts left)")
                  time.sleep(retry_delay)
          else:
              print("API request failed after retries.")
              exit(1)
          print("POST request Complete")
          EOF

      - name: Slack Notification
        uses: act10ns/slack@v1.5.0
        with:
            status: ${{ job.status }}
            steps: ${{ toJson(steps) }}
            channel: ${{ secrets.CONVOY_ALERTS_SLACK_CHANNEL  }}
        if: failure()

  send-mail:
    uses: ./.github/workflows/email_dc.yaml
    needs: build
    with:
      subject: ${{ needs.build.outputs.mail_subject_output }}
      body: ${{ needs.build.outputs.mail_body_output }} 
      to: ${{ needs.build.outputs.mail_id_output }}
    secrets: inherit
    if: ${{ failure() && contains(github.event.pull_request.head.ref, 'double_commit') }}

            