---
# This is a basic workflow to help you get started with Actions
name: Tessell Pipelines Code Build

# Controls when the workflow will run

on:
  workflow_call:

  # Allows you to run this workflow manually from the Actions
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in the parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: non-build
    outputs:
      mail_id_output: ${{ steps.mail_info.outputs.mail_id }}
      mail_subject_output: ${{ steps.mail_info.outputs.mail_subject}}
      mail_body_output: ${{ steps.mail_info.outputs.mail_body }}
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL  }}
      NEXUS_PULL_REPOS_PY: tessell-py-development
      NEXUS_PUSH_REPOS_PY: tessell-repos-py-development
      NEXUS_PUSH_REPOS_RAW: tessell-repos-raw-component
      NEXUS_PULL_REPOS_RAW: tessell-raw-development
      AWS_ACCESS_KEY_ID: ${{ secrets.PACKER_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.PACKER_AWS_SECRET_ACCESS_KEY }}
      AZURE_CLIENT_ID: ${{ secrets.PACKER_AZURE_CLIENT_ID }}
      AZURE_CLIENT_SECRET: ${{ secrets.PACKER_AZURE_CLIENT_SECRET }}
      AZURE_TENANT_ID: ${{ secrets.PACKER_AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.PACKER_AZURE_SUBSCRIPTION_ID }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: "0"
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          echo "$GITHUB_CONTEXT"
      - name: Get branch name
        shell: bash
        run: |
          echo "SOURCE_BRANCH=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV
          echo "TARGET_BRANCH=$(echo ${{ github.event.ref }} | tr / -)" >> $GITHUB_ENV

      - name: visible
        run: |
          echo ${{ env.SOURCE_BRANCH }}
          echo ${{ env.TARGET_BRANCH }}
          echo ${GITHUB_BASE_REF}
          echo "Source branch is ${{ github.head_ref }}"
          echo $TARGET_BRANCH_MAIN
          cat ${GITHUB_EVENT_PATH} | jq '.'

      - name: Create pip conf
        run: |
          # Create pip.conf and copy to /etc;
          # The --extra_index_url option of pip install does not work with username/password
          # Also pip does not have separate option to specify creds.
          echo "[global]" > pip.conf
          echo "index =  https://${{ secrets.CIPIPELINE_NEXUS_USERNAME }}:${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}@${{vars.NEXUS_SERVER_ENDPOINT}}/repository/${{ env.NEXUS_PULL_REPOS_PY }}/simple" >> pip.conf
          echo "index-url = https://${{ secrets.CIPIPELINE_NEXUS_USERNAME }}:${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}@${{vars.NEXUS_SERVER_ENDPOINT}}/repository/${{ env.NEXUS_PULL_REPOS_PY }}/simple" >> pip.conf
          echo "extra-index-url = https://pypi.org/simple" >> pip.conf
          sudo cp pip.conf /etc/pip.conf
        shell: bash

      - name: Install packer software
        run: |
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get update && sudo apt-get install packer
          packer plugins install github.com/hashicorp/amazon
      
      - name: Install dependencies
        run: |
          sudo python3 -m pip install --upgrade --force-reinstall packer-framework==0.0.0
          find /usr/bin /usr/local/bin -name build_all_artifacts

      - name: getting commit id for workflow_dispatch
        uses: actions/github-script@v7.0.1
        id: find_commit
        if: ${{ startsWith(env.SOURCE_BRANCH,'rel-') || env.SOURCE_BRANCH == 'main' }}
        with:
          github-token: ${{ secrets.PIPELINES_REPO_TOKEN  }}
          script: |
            if (${{ github.event_name  == 'workflow_dispatch'}} ){
                core.setOutput('commit_id', "${{ github.sha }}" )
            }
            else{
               core.setOutput('commit_id', "${{ github.event.after }}" )
            }

      - name: Get tags
        uses: nick-fields/retry@v3.0.0
        if: ${{ startsWith(env.SOURCE_BRANCH,'rel-') || env.SOURCE_BRANCH == 'main' }}
        with:
          timeout_seconds: 10
          max_attempts: 3
          retry_on: error
          command: |
            git fetch --all
            git tag --contains '${{ steps.find_commit.outputs.commit_id}}'
            latest_tags+=("$(git tag --contains '${{ steps.find_commit.outputs.commit_id }}')")
            if [[ "$latest_tags" == '' ]]; then
              echo " Tag is Empty"
              exit 1
            fi
            echo "Tag is present: $latest_tags"
            for tag in $latest_tags; do tag_arr+=($tag); done
            echo "TAGS=${tag_arr[@]}" >> $GITHUB_ENV

      - name: Find latest tag
        uses: actions/github-script@v7.0.1
        id: latest_tag
        if: ${{ startsWith(env.SOURCE_BRANCH,'rel-') || env.SOURCE_BRANCH == 'main' }}
        with:
          github-token: ${{ secrets.CIPIPELINE_GITHUB_TOKEN  }}
          script: |
            console.log("Tags are " + "${{ env.TAGS }}")
            latest_tag = '0.0.0'
            // process multiple tags if any
            tags = "${{ env.TAGS }}".split(' ')
            if (tags.length == 1) {
              console.log("There is only one tag. Using it." + tags[0])
              latest_tag = tags[0]
            } else {
              if ("${{ env.SOURCE_BRANCH }}" == "main") {
                for (i in tags) {
                  tag = tags[i]
                  console.log("Checking tag " + tag)
                  if (latest_tag == null) {
                    latest_tag = tag
                    continue
                  }
                  latest_parts = latest_tag.split(".")
                  tag_parts = tag.split(".")
                  for (i = 0; i < tag_parts.length; i++) {
                    if (parseInt(tag_parts[i]) < parseInt(latest_parts[i])) {
                      console.log("Skipping " + tag)
                      break
                    }
                    if (parseInt(tag_parts[i]) > parseInt(latest_parts[i])) {
                      latest_tag = tag
                      console.log("Setting " + latest_tag)
                      break
                    }
                  }
                }
              } else {
                tag_base = "${{ env.SOURCE_BRANCH }}".substring(4).split(".").slice(0,2)
                latest_tag = tag_base.join(".") + ".0"
                for (i in tags) {
                  tag = tags[i]
                  console.log("branch - Checking tag " + tag)
                  tag_parts = tag.split(".")
                  if (tag_base[0] == tag_parts[0] && tag_base[1] == tag_parts[1]) {
                    latest_parts = latest_tag.split(".")
                    if (parseInt(latest_parts[2]) < parseInt(tag_parts[2])) {
                      latest_tag = tag
                    }
                  }
                }
              }
            }
            console.log("Latest tag: " + latest_tag)
            // check if we have
            if ( latest_tag == '' || latest_tag === undefined) {
              console.log("Couldn't determine the latest tag, exiting. Retry manually..")
              process.exit(1);
            }
            core.setOutput('tag_ref', latest_tag)

      - name: Validate Images
        # this build runs when PR is created and on every push to PR
        if: ${{ !startsWith(env.SOURCE_BRANCH,'rel-') && env.SOURCE_BRANCH != 'main' }}
        run: |
          export CURRENT_VERSION_TAG="2.0.1"
          mkdir -p ~/.packer.d/plugins
          validate_all -r $PWD --src_branch ${{ github.head_ref }} --pipeline_run

      - name: Dry Run Input-config1
        if: ${{ !startsWith(env.SOURCE_BRANCH,'rel-') && env.SOURCE_BRANCH != 'main' }}
        run: |
          export CURRENT_VERSION_TAG="2.0.1"
          build_all_artifacts -r $PWD --dest_branch ${GITHUB_BASE_REF} --src_branch ${{ github.head_ref }} --dry_run --pipeline_run

      - name: Build and upload
        if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
        run: |
          CURRENT_VERSION_TAG="${{ steps.latest_tag.outputs.tag_ref }}"
          build_all_artifacts -r $PWD -d
