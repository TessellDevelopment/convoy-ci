---
# This is a basic workflow to help you get started with Actions
name: Tessell Pipelines Code Build

# Controls when the workflow will run

on:
  workflow_call:

  # Allows you to run this workflow manually from the Actions
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in the parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: self-hosted
    outputs:
      mail_id_output: ${{ steps.mail_info.outputs.mail_id }}
      mail_subject_output: ${{ steps.mail_info.outputs.mail_subject}}
      mail_body_output: ${{ steps.mail_info.outputs.mail_body }}
    env:
      CUSTOM_TAGS: '{"workflow-user": "${{ github.triggering_actor }}", "workflow-id": "${{ github.run_id }}" }'
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL  }}
      NEXUS_PULL_REPOS_PY: tessell-py-development
      NEXUS_PUSH_REPOS_PY: tessell-repos-py-development
      NEXUS_PUSH_REPOS_RAW: tessell-repos-raw-component
      NEXUS_PULL_REPOS_RAW: tessell-raw-development
      NEXUS_PROTOCOL: ${{vars.NEXUS_PROTOCOL_LOCAL}}
      NEXUS_SERVER_ENDPOINT: ${{vars.NEXUS_SERVER_ENDPOINT_LOCAL}}
      AWS_ACCESS_KEY_ID: ${{ secrets.PACKER_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.PACKER_AWS_SECRET_ACCESS_KEY }}
      AZURE_CLIENT_ID: ${{ secrets.PACKER_AZURE_CLIENT_ID }}
      AZURE_CLIENT_SECRET: ${{ secrets.PACKER_AZURE_CLIENT_SECRET }}
      AZURE_TENANT_ID: ${{ secrets.PACKER_AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.PACKER_AZURE_SUBSCRIPTION_ID }}
      NEXUS_ARTIFACT_REPO: tessell-artifacts

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: "0"
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          echo "$GITHUB_CONTEXT"
      - name: Get branch name
        shell: bash
        run: |
          echo "SOURCE_BRANCH=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV
          echo "TARGET_BRANCH=$(echo ${{ github.event.ref }} | tr / -)" >> $GITHUB_ENV

      - name: Set Label
        if: ${{ startsWith(env.SOURCE_BRANCH,'rel-') || env.SOURCE_BRANCH == 'main' }}
        shell: bash
        run: |
          if [[ "${{env.SOURCE_BRANCH}}" == "main" ]]; then
            APP_GROUP=$(yq '.appGroup // "tessell"' convoy.yaml)
            echo "$APP_GROUP"
            URL="http://${{vars.CONVOY_DEV_API_ENDPOINT}}/devops/applications/app-groups/$APP_GROUP/latest-main-release-label"
            echo "$URL"
            RESPONSE=$(curl -f --location "$URL" --header "x-api-key: ${{secrets.CONVOY_AUTH_TOKEN}}")
            echo "$RESPONSE"
            LABEL=$(echo "$RESPONSE" | jq -r '.["latest-main-release-label"]')
            echo "$LABEL"
            if [[ $LABEL == rel-* ]]; then
                echo "LABEL=$LABEL" >> $GITHUB_ENV
            else
                echo "Response: $LABEL"
                echo "Label does not start with 'rel'. Check response."
                exit 1 
            fi
          else
            echo "LABEL=${{env.SOURCE_BRANCH}}" >> $GITHUB_ENV
          fi

      - name: visible
        run: |
          echo ${{ env.SOURCE_BRANCH }}
          echo ${{ env.TARGET_BRANCH }}
          echo ${{ env.LABEL }}
          echo ${GITHUB_BASE_REF}
          echo "Source branch is ${{ github.head_ref }}"
          echo $TARGET_BRANCH_main
          cat ${GITHUB_EVENT_PATH} | jq '.'

      - name: Create pip conf
        run: |
          # Create pip.conf and copy to /etc;
          # The --extra_index_url option of pip install does not work with username/password
          # Also pip does not have separate option to specify creds.
          echo "[global]" > pip.conf
          echo "index =  ${{env.NEXUS_PROTOCOL}}://${{ secrets.CIPIPELINE_NEXUS_USERNAME }}:${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}@${{env.NEXUS_SERVER_ENDPOINT}}/repository/${{ env.NEXUS_PULL_REPOS_PY }}/simple" >> pip.conf
          echo "index-url = ${{env.NEXUS_PROTOCOL}}://${{ secrets.CIPIPELINE_NEXUS_USERNAME }}:${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}@${{env.NEXUS_SERVER_ENDPOINT}}/repository/${{ env.NEXUS_PULL_REPOS_PY }}/simple" >> pip.conf
          echo "extra-index-url = https://pypi.org/simple" >> pip.conf
          sudo cp pip.conf /etc/pip.conf
        shell: bash

      - name: Check packer software
        run: |
          packer version

      - name: Install dependencies
        run: |
          sudo python3 -m pip uninstall -y packer_framework
          python3 -m pip install --user virtualenv --trusted-host ${{env.NEXUS_SERVER_ENDPOINT}}
          python3 -m venv pkenv
          source pkenv/bin/activate
          python3 -m pip install wheel --trusted-host ${{env.NEXUS_SERVER_ENDPOINT}}
          python3 -m pip install -r ./requirements.txt --trusted-host ${{env.NEXUS_SERVER_ENDPOINT}}
          find /usr/bin /usr/local/bin -name build_all_artifacts
          rm -rf /usr/lib/python3/dist-packages/OpenSSL
          pip3 install pyopenssl
          pip3 install pyopenssl --upgrade
          pip3 install --force-reinstall setuptools==45.2.0

      - name: getting commit id for workflow_dispatch
        uses: actions/github-script@v7.0.1
        id: find_commit
        if: ${{ startsWith(env.SOURCE_BRANCH,'rel-') || env.SOURCE_BRANCH == 'main' }}
        with:
          github-token: ${{ secrets.PIPELINES_REPO_TOKEN  }}
          script: |
            if (${{ github.event_name  == 'workflow_dispatch'}} ){
                core.setOutput('commit_id', "${{ github.sha }}" )
            }
            else{
               core.setOutput('commit_id', "${{ github.event.after }}" )
            }

      - name: Get tags
        uses: nick-fields/retry@v3.0.0
        if: ${{ startsWith(env.SOURCE_BRANCH,'rel-') || env.SOURCE_BRANCH == 'main' }}
        with:
          timeout_seconds: 10
          max_attempts: 3
          retry_on: error
          command: |
            git fetch --all
            git tag --contains '${{ github.event.pull_request.base.sha }}'
            latest_tags+=("$(git tag --contains '${{ github.event.pull_request.base.sha }}')")
            if [[ "$latest_tags" == '' ]]; then 
              echo " Tag is Empty"
              exit 1
            fi
            echo "Tag is present: $latest_tags"       
            for tag in $latest_tags; do tag_arr+=($tag); done
            echo "TAGS=${tag_arr[@]}" >> $GITHUB_ENV

      - name: Find latest tag
        uses: actions/github-script@v7.0.1
        id: latest_tag
        if: ${{ startsWith(env.SOURCE_BRANCH,'rel-') || env.SOURCE_BRANCH == 'main' }}
        with:
          github-token: ${{ secrets.CIPIPELINE_GITHUB_TOKEN  }}
          script: |
            console.log("Tags are " + "${{ env.TAGS }}")
            latest_tag = '0.0.0'
            // process multiple tags if any
            tags = "${{ env.TAGS }}".split(' ')
            if (tags.length == 1) {
              console.log("There is only one tag. Using it." + tags[0])
              latest_tag = tags[0]
            } else {
              if ("${{ env.SOURCE_BRANCH }}" == "main") {
                for (i in tags) {
                  tag = tags[i]
                  console.log("Checking tag " + tag)
                  if (latest_tag == null) {
                    latest_tag = tag
                    continue
                  }
                  latest_parts = latest_tag.split(".")
                  tag_parts = tag.split(".")
                  for (i = 0; i < tag_parts.length; i++) {
                    if (parseInt(tag_parts[i]) < parseInt(latest_parts[i])) {
                      console.log("Skipping " + tag)
                      break
                    }
                    if (parseInt(tag_parts[i]) > parseInt(latest_parts[i])) {
                      latest_tag = tag
                      console.log("Setting " + latest_tag)
                      break
                    }
                  }
                }
              } else {
                tag_base = "${{ env.SOURCE_BRANCH }}".substring(4).split(".").slice(0,2)
                latest_tag = tag_base.join(".") + ".0"
                for (i in tags) {
                  tag = tags[i]
                  console.log("branch - Checking tag " + tag)
                  tag_parts = tag.split(".")
                  if (tag_base[0] == tag_parts[0] && tag_base[1] == tag_parts[1]) {
                    latest_parts = latest_tag.split(".")
                    if (parseInt(latest_parts[2]) < parseInt(tag_parts[2])) {
                      latest_tag = tag
                    }
                  }
                }
              }
            }
            console.log("Latest tag: " + latest_tag)
            // check if we have
            if ( latest_tag == '' || latest_tag === undefined) {
              console.log("Couldn't determine the latest tag, exiting. Retry manually..")
              process.exit(1);
            }
            core.setOutput('tag_ref', latest_tag)

      - name: Validate Images
        # this build runs when PR is created and on every push to PR
        if: ${{ !startsWith(env.SOURCE_BRANCH,'rel-') && env.SOURCE_BRANCH != 'main' }}
        run: |
          echo $TAGS
          echo $CUSTOM_TAGS
          source pkenv/bin/activate
          export CURRENT_VERSION_TAG="${{ steps.latest_tag.outputs.tag_ref }}"
          echo $CURRENT_VERSION_TAG
          mkdir -p ~/.packer.d/plugins
          
          validate_all -r $PWD --src_branch ${{ github.head_ref }} --pipeline_run

      - name: Dry Run Input-config
        if: ${{ !startsWith(env.SOURCE_BRANCH,'rel-') && env.SOURCE_BRANCH != 'main' }}
        run: |
          source pkenv/bin/activate
          export CURRENT_VERSION_TAG="${{ steps.latest_tag.outputs.tag_ref }}"
          echo $CURRENT_VERSION_TAG

          build_all_artifacts -r $PWD --dest_branch ${GITHUB_BASE_REF} --src_branch ${{ github.head_ref }} --dry_run --pipeline_run

      - name: Build and upload
        if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
        run: |
          echo $TAGS
          echo $CUSTOM_TAGS
          source pkenv/bin/activate
          export CURRENT_VERSION_TAG="${{ steps.latest_tag.outputs.tag_ref }}"
          echo $CURRENT_VERSION_TAG

          build_all_artifacts -r $PWD --base_commit  --pipeline_run

      - name: Push to repository
        if: ${{ startsWith(env.SOURCE_BRANCH,'rel-') || env.SOURCE_BRANCH == 'main' }}
        run: |
          curl -v -u ${{secrets.CIPIPELINE_NEXUS_USERNAME}}:${{secrets.CIPIPELINE_NEXUS_PASSWORD}} \
                --upload-file ./common_manifest.json \
                ${NEXUS_PROTOCOL}://${NEXUS_SERVER_ENDPOINT}/repository/${NEXUS_ARTIFACT_REPO}/${{env.LABEL}}/delta-image-manifest/delta-image-manifest-${{ steps.latest_tag.outputs.tag_ref }}.json

  post-build-status-to-convoy:
    runs-on: non-build
    needs: build
    if: always()
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.CONVOY_ALERTS_SLACK_URL }}
    steps:
      - uses: actions/checkout@v4.1.1
        name: Checkout repos
        with:
          fetch-depth: 0

      - name: Get branch name
        shell: bash
        run: |
          echo "SOURCE_BRANCH=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV

      - uses: technote-space/workflow-conclusion-action@v3.0.3
        if: ${{ startsWith(env.SOURCE_BRANCH,'rel-') || env.SOURCE_BRANCH == 'main' }}
        with:
          GITHUB_TOKEN: ${{ secrets.CIPIPELINE_GITHUB_TOKEN }}

      - name: POST API to Convoy
        if: ${{ startsWith(env.SOURCE_BRANCH,'rel-') || env.SOURCE_BRANCH == 'main' }}
        env:
          API_URL_BUILD_STATUS: http://${{vars.CONVOY_DEV_API_ENDPOINT}}/devops/git-metadata/build-status
          API_URL_REPLICATE: http://${{vars.CONVOY_DEV_API_ENDPOINT}}/devops/applications/replicate-artifacts
          COMMIT_HASH: "${{github.sha}}"
          REPO: "${{github.repository}}"
          BASE_BRANCH: "${{github.event.pull_request.base.ref}}"
          API_KEY: ${{secrets.CONVOY_AUTH_TOKEN}}
          STATUS: "${{env.WORKFLOW_CONCLUSION}}"
          SOURCE_BRANCH: "${{env.SOURCE_BRANCH}}"
        run: |
          echo ${{ env.API_URL }}
          echo ${{ env.COMMIT_HASH }}
          echo ${{ env.REPO }}
          echo ${{ env.BASE_BRANCH }}
          echo ${{ env.API_KEY }}
          echo ${{ env.SOURCE_BRANCH }}
          python3 - <<EOF
          import requests
          import json
          import os
          import time
          import base64
          import yaml

          API_KEY = os.environ.get('API_KEY')
          REPO = os.environ.get('REPO')
          COMMIT_HASH = os.environ.get('COMMIT_HASH')
          BASE_BRANCH = os.environ.get('BASE_BRANCH')
          STATUS = (os.environ.get('STATUS')).upper()

          if STATUS == 'SUCCESS':
            STATUS = 'SUCCESSFUL'
          if STATUS == 'FAILURE':
            STATUS = 'FAILED'

          if STATUS == 'SUCCESSFUL':
            API_URL = os.environ.get('API_URL_REPLICATE')
          else:
            API_URL = os.environ.get('API_URL_BUILD_STATUS')

          if not(bool(BASE_BRANCH)):
            BASE_BRANCH = os.environ.get('SOURCE_BRANCH')

          OWNER = REPO.split("/")
          REPO = OWNER[1]

          with open('convoy.yaml', 'r') as yaml_file:
            yaml_data = yaml.safe_load(yaml_file)
          APP_GROUP = yaml_data.get('appGroup')
          payload = {
            "repoName": REPO,
            "appGroup": APP_GROUP,
            "commitHash": COMMIT_HASH[:7],
            "baseBranch": BASE_BRANCH,
          }
          if API_URL == os.environ.get('API_URL_BUILD_STATUS'):
            payload["buildStatus"] = STATUS
          print(payload)

          headers = {
            'Content-Type': 'application/json',
            'x-api-key': API_KEY
          }

          max_retries = 3
          retry_delay = 20 

          for _ in range(max_retries):
              response = requests.post(API_URL, json=payload, headers=headers)
              if response.status_code == 200 or response.status_code == 202:
                  print(response.status_code)
                  print(response.text)
                  break
              else:
                  print(response.status_code)
                  print(response.text)
                  print(f"Retrying... ({max_retries - _} attempts left)")
                  time.sleep(retry_delay)
          else:
              print("API request failed after retries.")
              exit(1)
          print("POST request Complete")
          EOF

      - name: Slack Notification
        uses: act10ns/slack@v2.0.0
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: ${{ secrets.CONVOY_ALERTS_SLACK_CHANNEL  }}
        if: failure()
