---
name: Best Practices Check
on:
  workflow_call:
    inputs:
      check_version_in_gradle_properties:
        description: 'This is used to check gradle_properties version '
        required: true
        type: boolean
        default: false
      check_version_in_version_txt:
        description: 'This is used to check version in version.txt '
        required: true
        type: boolean
        default: false
      check_sql_update:
        description: 'This is used to check if the sql files has any changes'
        required: true
        type: boolean
        default: true
      check_branch_name:
        description: 'This is used to check branch name starts with TS-'
        required: true
        type: boolean
        default: true
      check_existing_branch_name:
        description: 'This is the Receiver of Email'
        required: true
        type: boolean
        default: true
      check_valid_jira:
        description: 'This is used to check if we are using a valid jira or not '
        required: true
        type: boolean
        default: true
      check_terraform_provider_version:
        description: 'This is used to check terraform provider version in terraform files '
        required: true
        type: boolean
        default: true

jobs:
  dev-checks:
    runs-on: self-hosted
    outputs:
      mail_id_output: ${{ steps.mail_info.outputs.mail_id }}
      mail_subject_output: ${{ steps.mail_info.outputs.mail_subject}}
      mail_body_output: ${{ steps.mail_info.outputs.mail_body }}
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          echo "$GITHUB_CONTEXT"

      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.PIPELINES_REPO_TOKEN  }}
          fetch-depth: 0

      - name: Get branch name (merge)
        if: github.event_name != 'pull_request'
        shell: bash
        run: |
          echo "SOURCE_BRANCH=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV

      - name: Get branch name (pull request)
        if: github.event_name == 'pull_request'
        shell: bash
        run: |
          echo "SOURCE_BRANCH=$(echo ${{ github.event.pull_request.head.ref }} | tr / -)" >> $GITHUB_ENV
          echo "TARGET_BRANCH=$(echo ${GITHUB_BASE_REF} | tr / -)" >> $GITHUB_ENV
        
      - name: Check branch name
        if: ${{ ${{ github.event.inputs.check_branch_name == true &&  !startsWith(env.SOURCE_BRANCH,'TS-') && !startsWith(env.SOURCE_BRANCH,'revert-') }} 
        run: |
          echo "::debug::Branch name must start with 'TS-' ${{ env.SOURCE_BRANCH }}"
          exit 1

      - name: Check for merge conflict in PR
        run: |
          if [ $(git grep -rln '<<<<<<< HEAD' -- ':(exclude)*dev-checks.yml') ]; then echo "Please resolve the merge conflict"; exit 1; else exit 0; fi

      - name: Check DB Migration Scripts
        id: check_db_migration
        uses: actions/github-script@v6.3.3
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.PIPELINES_REPO_TOKEN  }}
          script: |
            head_commit = "${{ github.sha }}"
            base_commit = "${{ github.sha }}"
            if ( "${{ github.event.before }}" != '0000000000000000000000000000000000000000') { 
              base_commit = "${{ github.event.before }}"
            }
            if ( "${{ github.event_name }}" == 'pull_request') {
              console.log("Using the base branch's commit for comparing.")
              base_commit = "${{ github.event.pull_request.base.sha  }}"
            }
            console.log("base_commit " + base_commit);
            console.log("head_commit " + head_commit); 
            response = await github.rest.repos.compareCommits({
                owner: "${{ github.repository_owner }}",
                repo: "${{  github.repository }}".split('/')[1],
                head: head_commit,
                base: base_commit
            });
            response.data.files.forEach(function(file_entry) {
              if (file_entry.filename.endsWith(".sql") && file_entry.filename.includes("db/migration/") && 
                   (file_entry.status == 'modified' || file_entry.status == 'removed')) {
                console.log(file_entry.filename);
                console.log(file_entry.status);
                core.setFailed("Modifying or removing a flyway history file " + file_entry.filename);
              }
            });
            response.data.files.forEach(function(file_entry) {
              if (file_entry.filename == 'version.txt'){
                 core.setFailed("modifying version.txt is not allowed ")
            }
            });
            version_updated = false
             response.data.files.forEach(function(file_entry) {
               if (file_entry.filename == 'gradle.properties') {
                   console.log(file_entry.patch)
                   if (file_entry.patch.includes("-version=") && file_entry.patch.includes("+version=")) {
                       version_updated = true
                   }
               }
             });
             if (version_updated == false) {
                  core.setFailed("Tessell Libraries must update the version in gradle.properties file")
             }
             var terraform_file = [] 
            response.data.files.forEach(function(file_entry) {
              if (file_entry.filename.endsWith(".tf")) {
                console.log(file_entry.filename);
                console.log(file_entry.status);
                terraform_file.push(file_entry.filename)
                console.log(terraform_file) ;
              }
            });
            core.setOutput('terraform_file' , terraform_file.join(','));

      - name: check for terraform version
        if: steps.check_db_migration.outputs.terraform_file
        run:
          terraform_version_check "${{ steps.check_db_migration.outputs.terraform_file }}"
      
      - name: Jira number validation
        run: |
          jira_check '${{ secrets.JIRA_USERNAME }}' '${{ secrets.JIRA_API_TOKEN }}' '${{ env.SOURCE_BRANCH }}'

      - name: check to verify same branch is exist
        if: ${{ startsWith(env.TARGET_BRANCH,'rel-') && !contains(env.SOURCE_BRANCH,'double_commit') }}
        run: |
          branch_to_check=${{ env.SOURCE_BRANCH }}-main-double_commit
          list_of_branches=($(git branch -r | awk -F '/' '{print $2}'))
          for branch in "${list_of_branches[@]}";do
          if [[ "$branch" == "$branch_to_check" ]];then
            echo "Double commit branch with name $branch is alredy exist , please merge and/or delete  the branch ";exit 1;
          fi
          done
             
      - name: Get PR-Author,subject & body to send email
        if: ${{ failure() && contains(github.event.pull_request.head.ref, 'double_commit') }}
        run: |
          echo "MAILID=$(git log -1 '${{ github.event.pull_request.head.sha }}' --pretty=format:'%ae')" >> $GITHUB_ENV
          echo "BODY=JOB_STATUS : ${{ job.status }} %0A WORKFLOW : ${{ github.workflow }} %0A EVENT : ${{ github.event_name }} %0A BRANCH : ${{ env.SOURCE_BRANCH }} %0A COMMIT_ID : ${{ github.sha }} %0A REPO : ${{ github.repository }}" >> $GITHUB_ENV
 
      - name: sending output
        if: ${{ failure() && contains(github.event.pull_request.head.ref, 'double_commit') }}
        id: mail_info
        run: |
          echo "mail_id=${{ env.MAILID }}" >> $GITHUB_OUTPUT
          echo "mail_subject=***${{ job.status }}*** || ${{ github.workflow }}  ||  ${{ github.repository }} " >> $GITHUB_OUTPUT
          echo "mail_body=${{ env.BODY }}" >> $GITHUB_OUTPUT
        
  send-mail:
    uses: ./.github/workflows/email_dc.yaml
    needs: dev-checks
    with:
      subject: ${{ needs.dev-checks.outputs.mail_subject_output }}
      body: ${{ needs.dev-checks.outputs.mail_body_output }} 
      to: ${{ needs.dev-checks.outputs.mail_id_output }}
    secrets: inherit
    if: ${{ failure() && contains(github.event.pull_request.head.ref, 'double_commit') }}
        
