---
name: Best Practices Check
on:
  workflow_call:
    inputs:
      check_version_in_gradle_properties:
        description: 'This is used to check gradle_properties version'
        required: false
        type: string
        default: 'false'
      check_version_in_version_txt:
        description: 'This is used to check version in version.txt'
        required: false
        type: string
        default: 'false'
      check_sql_update:
        description: 'This is used to check if the sql files has any changes'
        required: false
        type: string
        default: 'true'
      check_terraform_provider_version:
        description: 'This is used to check terraform provider version in terraform files'
        required: false
        type: string
        default: 'true'
      check_version_in_terraform_modules:
        description: 'This is used to check terraform modules directories version in convoy-config'
        required: false
        type: string
        default: 'false'
      check_version_of_helm_chart:
        description: 'This is used to check version(helm chart version) present in chart.yaml  '
        required: false
        type: string
        default: 'false'

jobs:
  dev-checks:
    runs-on: self-hosted
    outputs:
      mail_id_output: ${{ steps.mail_info.outputs.mail_id }}
      mail_subject_output: ${{ steps.mail_info.outputs.mail_subject}}
      mail_body_output: ${{ steps.mail_info.outputs.mail_body }}
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          echo "$GITHUB_CONTEXT"

      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.CIPIPELINE_NEXUS_PASSWORD  }}
          fetch-depth: 0

      - name: Get branch name (merge)
        if: github.event_name != 'pull_request'
        shell: bash
        run: |
          echo "SOURCE_BRANCH=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV

      - name: Get branch name (pull request)
        if: github.event_name == 'pull_request'
        shell: bash
        run: |
          echo "SOURCE_BRANCH=$(echo ${{ github.event.pull_request.head.ref }} | tr / -)" >> $GITHUB_ENV
          echo "TARGET_BRANCH=$(echo ${GITHUB_BASE_REF} | tr / -)" >> $GITHUB_ENV
          echo "GITHUB_TOKEN=${{ secrets.CIPIPELINE_NEXUS_PASSWORD  }}" >> $GITHUB_ENV
      
      - name: Check Format
        env:
          PR_TITLE: ${{ github.event.pull_request.title }}
        run: |
          if echo "${{ env.SOURCE_BRANCH }}" | grep -Eq '^revert-'; then
              echo "Revert branch, skipping Format check"
              exit 0
          fi
          if echo "${{ env.SOURCE_BRANCH }}" | grep -Eq '^(TS-|SRE-|TDEVOPS-|TOPS-)'; then
            echo "Branch name starts with 'TS-' or 'SRE-' or 'TDEVOPS-' or 'TOPS-'"
          else
            echo "Branch name does not start with 'TS-' or 'SRE-' or 'TDEVOPS-' or 'TOPS-'. Checking PR title format."
            PULL_REQUEST_TITLE="$PR_TITLE"
            PATTERN="(TS|TDEVOPS|TOPS|SRE)-[0-9]+\s\|\s"
            if [[ ! $PULL_REQUEST_TITLE =~ $PATTERN ]]; then
              echo "Error: Pull request title is not in the required format. Please use 'TS-XXXX | --' or 'TDEVOPS-XXXX | --' or 'TOPS-XXXX | --' or 'SRE-XXXX | --' format."
              exit 1
            else 
              echo "PR Title is in the valid format."
            fi  
          fi

      - name: Check convoy.yaml
        id: convoy_check
        run: |
          if [ -f "convoy.yaml" ]; then
            echo "convoy_exists=true" >> $GITHUB_OUTPUT
          else
            echo "convoy_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up Python
        uses: actions/setup-python@v2

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install shyaml jira
          echo ${{steps.convoy_check.outputs.convoy_exists}}
                   
      - name: Extract Jira Ticket
        if: ${{ steps.convoy_check.outputs.convoy_exists == 'true' }}
        id: extract
        env:
          PR_TITLE: ${{github.event.pull_request.title}}
          SUPPORTED_JIRA_TICKETS: ${{vars.SUPPORTED_JIRA_PROJECTS}}
        run: |
          if echo "${{ env.SOURCE_BRANCH }}" | grep -Eq '^revert-'; then
              echo "Revert branch, skipping Jira Extraction"
              exit 0
          fi
          python3 - <<EOF
          import os
          import re
          import sys
          import yaml

          with open('convoy.yaml', 'r') as file:
              data = yaml.safe_load(file)

          supported_jira_tickets = os.environ.get('SUPPORTED_JIRA_TICKETS')
          branch_name = os.environ.get('SOURCE_BRANCH')
          pr_title = os.environ.get('PR_TITLE')
          jira_source = data.get('ci').get('bestPractices').get('jiraValidation').get('jiraIdSource') or data.get('ci').get('best-practices').get('jiraValidation').get('jiraIdSource')
          jira_match = data.get('ci').get('bestPractices').get('jiraValidation').get('matchingRule') or data.get('ci').get('best-practices').get('jiraValidation').get('matchingRule')

          match_branch = re.search(rf'({supported_jira_tickets})\d+', branch_name)
          match_pr = re.search(rf'({supported_jira_tickets})\d+', pr_title)
              
          if jira_match == 'ALL': 
              if match_branch and match_pr and jira_source == 'BOTH':
                  ticket_branch = match_branch.group(0)
                  ticket_pr = match_pr.group(0)
                  if ticket_branch == ticket_pr:
                      print(f"Same Jira present in both Branch and PR:{ticket_branch}")
                      sys.stdout.write(f"::set-output name=jira_ticket::{ticket_branch}\n")
                      exit(0)
                  else:
                      raise Exception("Error: Different Jira present in both Branch and PR")
              elif match_branch and jira_source == 'BRANCH_NAME_PREFIX':
                  ticket = match_branch.group(0)
                  print(f"Jira ticket extracted from Branch name:{ticket}")
                  sys.stdout.write(f"::set-output name=jira_ticket::{ticket}\n")
                  exit(0)
              elif match_pr and jira_source == 'PR_TITLE_PREFIX':
                  ticket = match_pr.group(0)
                  print(f"Jira ticket extracted from PR Title:{ticket}")
                  sys.stdout.write(f"::set-output name=jira_ticket::{ticket}\n")
                  exit(0)
              else:
                  raise Exception("No Appropriate Jira ticket found in Branch name or PR Title")   
          elif jira_match == 'ANY':
                  if jira_source == 'BRANCH_NAME_PREFIX':
                      if match_branch:
                          ticket = match_branch.group(0)
                          print(f"Jira ticket extracted from Branch name:{ticket}")
                          sys.stdout.write(f"::set-output name=jira_ticket::{ticket}\n")
                          exit(0)
                      else: 
                          print(f"No Jira ticket found in Branch name, checking in PR title")     
                          if match_pr :
                              ticket = match_pr.group(0)
                              print(f"Jira ticket extracted from PR Title:{ticket}")
                              sys.stdout.write(f"::set-output name=jira_ticket::{ticket}\n")
                              exit(0)
                          else:
                              raise Exception("No Appropriate Jira ticket found in Branch name or PR Title")  
                  elif jira_source == 'PR_TITLE_PREFIX':
                      if match_pr:
                          ticket = match_pr.group(0)
                          print(f"Jira ticket extracted from PR Title:{ticket}")
                          sys.stdout.write(f"::set-output name=jira_ticket::{ticket}\n")
                          exit(0)

                      else:
                          print(f"No Jira ticket found in PR Title, checking in Branch name")     
                          if match_branch:
                              ticket = match_branch.group(0)
                              print(f"Jira ticket extracted from Branch name:{ticket}")
                              sys.stdout.write(f"::set-output name=jira_ticket::{ticket}\n")
                              exit(0)
                          else:
                              raise Exception("No Appropriate Jira ticket found in Branch name or PR Title")  
                  elif jira_source == 'BOTH':
                      if match_branch:
                          ticket = match_branch.group(0)
                          print(f"Jira ticket extracted from Branch name:{ticket}")
                          sys.stdout.write(f"::set-output name=jira_ticket::{ticket}\n")
                          exit(0)
                      else: 
                          print(f"No Jira ticket found in Branch name, checking in PR title")     
                          if match_pr:
                              ticket = match_pr.group(0)
                              print(f"Jira ticket extracted from PR Title:{ticket}")
                              sys.stdout.write(f"::set-output name=jira_ticket::{ticket}\n")
                              exit(0)
                          else:
                              raise Exception("No Appropriate Jira ticket found in Branch name or PR Title")            
                  else: 
                      raise Exception("Error: Invalid selection in Jira Source")         
          elif jira_match == 'NONE':
              print("No extraction of Jira ticket specified")
              exit(0)
          else: 
              raise Exception("Invalid Jira Match type specified")
          EOF

      - name: Validate Jira Ticket
        if: ${{ steps.convoy_check.outputs.convoy_exists == 'true' }}
        env:
          JIRA: ${{steps.extract.outputs.jira_ticket}}
          JIRA_USERNAME: ${{ secrets.JIRA_USERNAME }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
        run: |
          if echo "${{ env.SOURCE_BRANCH }}" | grep -Eq '^revert-'; then
            echo "Revert branch, skipping Jira Validation"
            exit 0
          fi
          echo "${{env.JIRA}}"
          python3 - <<EOF
          import os
          from jira import JIRA
          user = os.environ.get('JIRA_USERNAME')
          try:
            apikey = os.environ.get('JIRA_API_TOKEN')
            jira_ticket = os.environ.get('JIRA')
            options = {'server': 'https://tessell.atlassian.net'}
            jira = JIRA(options, basic_auth=(user, apikey) )
            try:
                issue = jira.issue(jira_ticket)
                print("Ticket Summary=",issue.fields.summary)
            except Exception as ex:
                print("Not a valid jira", jira_ticket)
                raise Exception(ex)
          except Exception as ex:
            raise Exception(ex)  
          EOF

      - name: Check double commit
        env: 
          PR_TITLE: ${{github.event.pull_request.title}}
          BRANCH: ${{ github.event.pull_request.head.ref}}
        run: |
          if ([[ '${{ github.event.pull_request.user.login }}' != 'cipipelinetessell' ]]) && ([[ "$BRANCH" == *"double_commit"* ]] || [[ "$PR_TITLE" == *"Double Commit"* ]]); then
            if ([[ "$BRANCH" == *"revert"* ]] && [[ "$PR_TITLE" == *"Revert"* ]]); then
              echo "Revert Double commit Branch. Allowed"
            else   
              echo "Exclude Double commit naming in Branch, PR title and try again."
              exit 1
            fi
          else
            echo "No double commit conflicts found in Branch or PR title."
          fi

      - name: Adding Common UI config
        run: |
          set +e
          rm ~/.npmrc
          TOKEN=$(echo -n '${{secrets.CIPIPELINE_NEXUS_USERNAME}}:${{secrets.CIPIPELINE_NEXUS_PASSWORD}}' | base64 -w 0)
          echo "//${{vars.NEXUS_SERVER_ENDPOINT}}/repository/${{vars.NEXUS_PUSH_REPOS_NPM}}:_auth = '$TOKEN'" >> .npmrc
          echo "//${{vars.NEXUS_SERVER_ENDPOINT}}/repository/${{vars.NEXUS_PUSH_REPOS_NPM}}:always-auth = true" >> .npmrc
          echo "@tessell:registry=https://${{vars.NEXUS_SERVER_ENDPOINT}}/repository/${{vars.NEXUS_PUSH_REPOS_NPM}}" >> .npmrc
          cat .npmrc

      - name: import packages for json lint
        run: |
          sudo sudo npm install jsonlint -g
          
      - name: Check for Jsonlint
        run: |
          set -e
          git diff --name-only --diff-filter=AM ${{ github.event.pull_request.base.sha }}...${{ github.event.pull_request.head.sha }} | grep '\.json$' | xargs -I{} sh -c 'jsonlint -q "{}" || { echo "::error::Invalid JSON file: {}"; exit 1; }'

      - name: install octokit/rest
        run: |
          if [ ! -d "node_modules/@octokit/rest" ]; then
            npm cache clean --force
            npm install @octokit/rest --legacy-peer-deps
          fi
      - name: install node fetch 
        run: | 
          npm install node-fetch 

      - name: Install dependencies
        run: npm install js-yaml

      - name: Check for merge conflicts
        uses: actions/github-script@v6.4.1
        with:
          github-token: ${{ secrets.CIPIPELINE_NEXUS_PASSWORD  }}
          script: |
            head_commit = "${{ github.sha }}"
            base_commit = "${{ github.sha }}"
            if ( "${{ github.event.before }}" != '0000000000000000000000000000000000000000') { 
              base_commit = "${{ github.event.before }}"
            }
            if ( "${{ github.event_name }}" == 'pull_request') {
              console.log("Using the base branch's commit for comparing.")
              base_commit = "${{ github.event.pull_request.base.sha  }}"
            }
            response = await github.rest.repos.compareCommits({
                owner: "${{ github.repository_owner }}",
                repo: "${{  github.repository }}".split('/')[1],
                head: head_commit,
                base: base_commit
            });
            response.data.files.forEach(function(file_entry) {
              console.log(file_entry.filename);
              dir_name = file_entry.filename.split("/")[0];
              console.log(file_entry.patch);
              if(typeof file_entry.patch !== 'undefined'){
                if ( file_entry.patch.includes("+<<<<<<<") || file_entry.patch.includes("+=======") || file_entry.patch.includes("+>>>>>>>")) {
                  core.setFailed("Please resolve Merge Conflict in: " + dir_name );  
                }
              }
              else{
                console.log("Skipping:" + file_entry.filename);
              }
            });
            console.log("No merge conflicts found"); 
      
      - name: Check DB Migration Scripts
        id: check_db_migration
        uses: actions/github-script@v6.4.1
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.CIPIPELINE_NEXUS_PASSWORD  }}
          script: |
            head_commit = "${{ github.sha }}"
            base_commit = "${{ github.sha }}"
            if ( "${{ github.event.before }}" != '0000000000000000000000000000000000000000') { 
              base_commit = "${{ github.event.before }}"
            }
            if ( "${{ github.event_name }}" == 'pull_request') {
              console.log("Using the base branch's commit for comparing.")
              base_commit = "${{ github.event.pull_request.base.sha  }}"
            }
            console.log("base_commit " + base_commit);
            console.log("head_commit " + head_commit); 
            response = await github.rest.repos.compareCommits({
                owner: "${{ github.repository_owner }}",
                repo: "${{  github.repository }}".split('/')[1],
                head: head_commit,
                base: base_commit
            });
            response.data.files.forEach(function(file_entry) {
              if (file_entry.filename.endsWith(".sql") && file_entry.filename.includes("db/migration/") && 
                   (file_entry.status == 'modified' || file_entry.status == 'removed')) {
                console.log(file_entry.filename);
                console.log(file_entry.status);
                core.setFailed("Modifying or removing a flyway history file " + file_entry.filename);
              }
            });
            let path = "";
            response.data.files.forEach(function(file_entry) {
              if (file_entry.filename.endsWith(".sql") && file_entry.filename.includes("db/migration/")) {
                const lastSlashIndex = file_entry.filename.lastIndexOf("/");
                path = file_entry.filename.substring(0, lastSlashIndex);
              }
            });
            console.log(path);
            const { Octokit } = require("@octokit/rest");
            const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN, request: { fetch } });
            const { data: existingFiles } = await octokit.repos.getContent({
              owner: "${{ github.repository_owner }}",
              repo: "${{  github.repository }}".split('/')[1],
              ref: "${{github.base_ref}}",
              path: path,
            });
            console.log(existingFiles)
            const existing_versions = existingFiles.map(f => f.name.split("__")[0]);
            response.data.files.forEach(function(file_entry){
            if (file_entry.filename.endsWith(".sql") && file_entry.filename.includes("db/migration/")) {
                console.log(existing_versions)
                const version = file_entry.filename.split("__")[0].split("/").pop();
                console.log(version)
                console.log(existing_versions)
                if (existing_versions.includes(version)) {
                  console.log(file_entry.filename);
                  core.setFailed(`Flyway file with version ${version} already exists`);
                }
              }
            });
            
      - name: Check version in convoy.yaml and gradle.properties
        id: check_convoy
        if:  ${{ inputs.check_version_in_gradle_properties == 'true' }} 
        run: |
            if [ -f convoy.yaml ]; then
              if grep -q 'version:' convoy.yaml; then
                echo "Version found in convoy.yaml"
                
                if [ -f gradle.properties ]; then
                  if grep -q '^\s*version=' gradle.properties; then
                    echo "Please remove version from gradle.properties"
                    exit 1
                  else
                    echo "check_version_in_gradle=true" >> $GITHUB_OUTPUT
                  fi
                fi
              else
                echo "Version not found in convoy.yaml"
                echo "check_version_in_gradle=false" >> $GITHUB_OUTPUT
              fi
            else
              echo "convoy.yaml not found"
              echo "check_version_in_gradle=false" >> $GITHUB_OUTPUT
            fi
            
      - name: check for gradle properties version
        uses: actions/github-script@v6.3.3
        if:  ${{ inputs.check_version_in_gradle_properties == 'true' && steps.check_convoy.outputs.check_version_in_gradle == 'true'}} 
        with:
          github-token: ${{ secrets.CIPIPELINE_NEXUS_PASSWORD  }}
          script: |
            head_commit = "${{ github.sha }}"
            base_commit = "${{ github.sha }}"
            if ( "${{ github.event.before }}" != '0000000000000000000000000000000000000000') { 
              base_commit = "${{ github.event.before }}"
            }
            if ( "${{ github.event_name }}" == 'pull_request') {
              console.log("Using the base branch's commit for comparing.")
              base_commit = "${{ github.event.pull_request.base.sha  }}"
            }
            console.log("base_commit " + base_commit);
            console.log("head_commit " + head_commit); 
            response = await github.rest.repos.compareCommits({
                owner: "${{ github.repository_owner }}",
                repo: "${{  github.repository }}".split('/')[1],
                head: head_commit,
                base: base_commit
            });
            version_updated = false
             response.data.files.forEach(function(file_entry) {
               if (file_entry.filename == 'convoy.yaml') {
                   console.log(file_entry.patch)
                   if (file_entry.patch.includes("-version:") && file_entry.patch.includes("+version:")) {
                       version_updated = true
                   }
               }
             });
             if (version_updated == false) {
                  core.setFailed("Tessell Libraries must update the version in gradle.properties file")
             }
      
      - name: check for version in version_txt
        if:  ${{ inputs.check_version_in_version_txt == 'true' }}
        uses: actions/github-script@v6.3.3
        with:
          github-token: ${{ secrets.CIPIPELINE_NEXUS_PASSWORD  }}
          script: |
            head_commit = "${{ github.sha }}"
            base_commit = "${{ github.sha }}"
            if ( "${{ github.event.before }}" != '0000000000000000000000000000000000000000') { 
              base_commit = "${{ github.event.before }}"
            }
            if ( "${{ github.event_name }}" == 'pull_request') {
              console.log("Using the base branch's commit for comparing.")
              base_commit = "${{ github.event.pull_request.base.sha  }}"
            }
            console.log("base_commit " + base_commit);
            console.log("head_commit " + head_commit); 
            response = await github.rest.repos.compareCommits({
                owner: "${{ github.repository_owner }}",
                repo: "${{  github.repository }}".split('/')[1],
                head: head_commit,
                base: base_commit
            });
            version_updated = false
              response.data.files.forEach(function(file_entry) {
                if (file_entry.filename == 'version.txt') {
                    console.log(file_entry.patch)
                    if (file_entry.patch.includes("-version=") && file_entry.patch.includes("+version=")) {
                         version_updated = true
                    }
                }
              });
              if (version_updated == false) {
                  core.setFailed("Tessell Libraries must update the version in version.txt file")
              }

      - name: check for version in convoy.yaml in terraform modules repo
        if:  ${{ inputs.check_version_in_terraform_modules == 'true' }}
        id: terraform_file_check
        uses: actions/github-script@v6.3.3
        with:
          github-token: ${{ secrets.CIPIPELINE_NEXUS_PASSWORD  }}
          script: |
            head_commit = "${{ github.sha }}"
            base_commit = "${{ github.sha }}"
            if ( "${{ github.event.before }}" != '0000000000000000000000000000000000000000') { 
              base_commit = "${{ github.event.before }}"
            }
            if ( "${{ github.event_name }}" == 'pull_request') {
              console.log("Using the base branch's commit for comparing.")
              base_commit = "${{ github.event.pull_request.base.sha  }}"
            }
            console.log("base_commit " + base_commit);
            console.log("head_commit " + head_commit); 
            response = await github.rest.repos.compareCommits({
                owner: "${{ github.repository_owner }}",
                repo: "${{  github.repository }}".split('/')[1],
                head: head_commit,
                base: base_commit
            });
            const excludedDirectories = ['.github','.gitignore','convoy.yaml','README.md'];
            const modifiedFiles = response.data.files;
            const modifiedDirectories = {};
            const modifiedDir = []
            response.data.files.forEach(file => {
              const fileDirectory = file.filename.split("/")[0];
              if (file.status !== "removed" && !excludedDirectories.includes(fileDirectory)) {
              if (!modifiedDirectories[fileDirectory]) {
                modifiedDirectories[fileDirectory] = false;
                modifiedDir.push(fileDirectory)
                }}
            });
            const uniqueDirectories = [...new Set(modifiedDir)];
            const outputString = uniqueDirectories.join(' ');
            console.log(outputString);
            core.setOutput('modifiedDir', outputString);
            response.data.files.forEach(function(file_entry) {
              dir_name = file_entry.filename.split("/")[0];
              if ((file_entry.filename.split("/")[1] === 'convoy.yaml') && file_entry.patch.includes("+version")) {
                console.log("Modifying version" + dir_name );  
                modifiedDirectories[dir_name] = true;
              }
            });
            console.log(modifiedDirectories);
            Object.entries(modifiedDirectories).forEach(([fileDirectory, isModified]) => {
              if (isModified == false) {
                core.setFailed('Tessell Libraries must update the version in convoy.yaml :' + fileDirectory );
              }
            });

      - name: check for terraform (code)
        if : github.event_name == 'pull_request'
        id: terraform_check
        uses: actions/github-script@v6.3.3
        with:
          github-token: ${{ secrets.CIPIPELINE_NEXUS_PASSWORD  }}
          script: |
            head_commit = "${{ github.sha }}"
            base_commit = "${{ github.sha }}"
            if ( "${{ github.event.before }}" != '0000000000000000000000000000000000000000') { 
              base_commit = "${{ github.event.before }}"
            }
            if ( "${{ github.event_name }}" == 'pull_request') {
              console.log("Using the base branch's commit for comparing.")
              base_commit = "${{ github.event.pull_request.base.sha  }}"
            }
            console.log("base_commit " + base_commit);
            console.log("head_commit " + head_commit); 
            response = await github.rest.repos.compareCommits({
                owner: "${{ github.repository_owner }}",
                repo: "${{  github.repository }}".split('/')[1],
                head: head_commit,
                base: base_commit
            });
            var terraform_file = [] 
            response.data.files.forEach(function(file_entry) {
              if (file_entry.filename.endsWith(".tf") && file_entry.status != 'removed') {
                console.log(file_entry.filename);
                console.log(file_entry.status);
                terraform_file.push(file_entry.filename)
                console.log(terraform_file) ;
              }
            });
            core.setOutput('terraform_file' , terraform_file.join(','));

      - name: check for chart verison in chart.yaml 
        if : ${{ inputs.check_version_of_helm_chart == 'true' }}
        uses: actions/github-script@v6.3.3
        with:
          github-token: ${{ secrets.PIPELINES_REPO_TOKEN  }}
          script: |
            const yaml = require("js-yaml");
            const fs = require("fs");
            head_commit = "${{ github.sha }}"
            base_commit = "${{ github.sha }}"
            if ( "${{ github.event.before }}" != '0000000000000000000000000000000000000000') { 
              base_commit = "${{ github.event.before }}"
            }
            if ( "${{ github.event_name }}" == 'pull_request') {
              console.log("Using the base branch's commit for comparing.")
              base_commit = "${{ github.event.pull_request.base.sha  }}"
            }
            console.log("base_commit " + base_commit);
            console.log("head_commit " + head_commit); 
            response = await github.rest.repos.compareCommits({
                owner: "${{ github.repository_owner }}",
                repo: "${{  github.repository }}".split('/')[1],
                head: head_commit,
                base: base_commit
            });
            yamlFile = fs.readFileSync("convoy.yaml", "utf8");
            convoyYaml = yaml.load(yamlFile);
            chartPath = convoyYaml['generates']['helmCharts'][0].chartPath
            chartPath = chartPath.substring(2)
            version_updated = true;
            const excludeDirs = ['.github', '.gitignore', 'README.md'];
            response.data.files.forEach(function(file_entry) {
              if (!excludeDirs.some(dir => file_entry.filename.startsWith(dir))) {
                  version_updated = false;
              }
            });
            response.data.files.forEach(function(file_entry) {
                if (file_entry.filename === chartPath && file_entry.patch.includes("-version:") && file_entry.patch.includes("+version:")) {
                  version_updated = true;
              }
            });
            if (version_updated == false ) {
              core.setFailed("Tessell Libraries must update the version in chart.yaml file")
            }

      - name: check for version in nexus 
        uses: actions/github-script@v6.3.3
        env:
          NEXUS_URL: https://${{vars.NEXUS_SERVER_ENDPOINT}}/service/rest/v1/search?repository
          NEXUS_USER: ${{secrets.CIPIPELINE_NEXUS_USERNAME}}
          NEXUS_TOKEN: ${{ secrets.CIPIPELINE_NEXUS_PASSWORD}}
        with:
          script: |
            const exp = require('constants');
            const fs = require('fs');
            const yaml = require('js-yaml');
            var nexusRepo;
            var version;
            var exporter;
            
            function checkVersion(nexusRepo, exporter, version){
              console.log(nexusRepo);
              console.log(exporter);
              console.log(version);
              execSync = require('child_process').execSync;
              const output=execSync(`
                  file="${exporter}-${version}"
                  API_URL="$NEXUS_URL=${nexusRepo}&version=${version}"
                  echo $API_URL
                  echo $file
                  response=$(curl -u "$NEXUS_USER:$NEXUS_TOKEN" -X GET "$API_URL")
                  check="$(echo $response | grep $file)"
                  if [ ! -z "$check" ]
                      then
                          echo "Fail"
                          exit 
                      fi
                  
                  while [ "$(echo $response | jq -r '.continuationToken')" != "null" ]; do
                      continuationToken=$(echo $response | jq -r '.continuationToken')
                      response=$(curl -u "$NEXUS_USER:$NEXUS_TOKEN" -X GET "$API_URL&continuationToken=$continuationToken")
                      check="$(echo $response | grep $file)"
                      if [ ! -z "$check" ]
                      then
                          echo "Fail"
                          exit 
                      fi
                  done
                  if [ -z "$check" ]
                      then
                          echo "Pass"
                          exit 
                      fi
              `, { encoding: 'utf-8' }); 
              console.log(output);
              if(output.includes("Fail")){
                throw new Error("Error: Update version, matching version file already present in Nexus")
              }
              else
                console.log("Passed: No matching version present in Nexus")
            }
            
            try{
              const content = fs.readFileSync('./convoy.yaml', 'utf8');
              const data = yaml.load(content);
              var artifactType = data.artifactType
              if(artifactType === 'nested'){
                modifiedDir = "${{ steps.terraform_file_check.outputs.modifiedDir }}"
                console.log(modifiedDir);
                const directories = modifiedDir.split(' ');
                for (let i = 0; i < directories.length; i++) {
                  console.log(directories[i]);
                  const path = `./${directories[i]}/convoy.yaml`
                  const contentDir = fs.readFileSync(path, 'utf8');
                  const dataDir = yaml.load(contentDir);
                  exporter = dataDir.artifactNames
                  version = dataDir.version
                  try{
                    checkVersion('tessell-repos-m2-component',exporter,version);
                  } catch (e) {
                    console.error(e);
                    process.exit(1);
                  }
                }
                process.exit(0);
              }
              else if(artifactType === 'helmChart'){
                const path = data.chartPath
                const contentHelm = fs.readFileSync(path, 'utf8');
                const dataHelm = yaml.load(contentHelm);
                version = dataHelm.version
              }
              else{
                version = data.version;
              }
              nexusUrl = data.nexusUrl;
              if(nexusUrl != undefined){
                const parts = nexusUrl.split('/');
                nexusRepo = parts[4];
              }
              artifacts = data.artifactNames;
              if(artifacts != undefined){
                exporter = artifacts[0];
              }
              if(version === undefined || nexusUrl === undefined || artifacts === undefined ){
                console.log("Required parameters not present in convoy.yaml, skipping check nexus version")
                process.exit(0);
              }
            } catch(error){
              console.log("convoy.yaml not present in respository skipping check nexus version.")
              console.error('Error:', error.message)
              process.exit(0);
            }
            if(nexusRepo === 'tessell-repos-py-component'){
              exporter = exporter.replaceAll('-','_')
            }
            try{
              checkVersion(nexusRepo,exporter,version)
            } catch (e) {
              console.error(e);
              process.exit(1);
            }


      - name: Check Version sequence of DB Scripts
        id: check_db_version_seq
        if: steps.check_db_migration.outputs.db_migration_dir
        run:
          python3 .github/scripts/check_db_migration_version_sequence.py "${{ steps.check_db_migration.outputs.db_migration_dir }}"      
      

      - name: check for terraform version
        if: steps.terraform_check.outputs.terraform_file 
        run:
          terraform_version_check "${{ steps.terraform_check.outputs.terraform_file }}"
      
      - name: check to verify same branch is exist
        if: ${{ startsWith(env.TARGET_BRANCH,'rel-') && !contains(env.SOURCE_BRANCH,'double_commit') }}
        run: |
          branch_to_check=${{ env.SOURCE_BRANCH }}-main-double_commit
          list_of_branches=($(git branch -r | awk -F '/' '{print $2}'))
          for branch in "${list_of_branches[@]}";do
          if [[ "$branch" == "$branch_to_check" ]];then
            echo "Double commit branch with name $branch is alredy exist , please merge and/or delete  the branch ";exit 1;
          fi
          done
             
      - name: Get PR-Author,subject & body to send email
        if: ${{ failure() && contains(github.event.pull_request.head.ref, 'double_commit') }}
        run: |
          echo "MAILID=$(git log -1 '${{ github.event.pull_request.head.sha }}' --pretty=format:'%ae')" >> $GITHUB_ENV
          echo "BODY=JOB_STATUS : ${{ job.status }} %0A WORKFLOW : ${{ github.workflow }} %0A EVENT : ${{ github.event_name }} %0A BRANCH : ${{ env.SOURCE_BRANCH }} %0A COMMIT_ID : ${{ github.sha }} %0A REPO : ${{ github.repository }}" >> $GITHUB_ENV
 
      - name: sending output
        if: ${{ failure() && contains(github.event.pull_request.head.ref, 'double_commit') }}
        id: mail_info
        run: |
          echo "mail_id=${{ env.MAILID }}" >> $GITHUB_OUTPUT
          echo "mail_subject=***${{ job.status }}*** || ${{ github.workflow }}  ||  ${{ github.repository }} " >> $GITHUB_OUTPUT
          echo "mail_body=${{ env.BODY }}" >> $GITHUB_OUTPUT

  send-mail:
    uses: ./.github/workflows/email_dc.yaml
    needs: dev-checks
    with:
      subject: ${{ needs.dev-checks.outputs.mail_subject_output }}
      body: ${{ needs.dev-checks.outputs.mail_body_output }} 
      to: ${{ needs.dev-checks.outputs.mail_id_output }}
    secrets: inherit
    if: ${{ failure() && contains(github.event.pull_request.head.ref, 'double_commit') }}
