---
name: Best Practices Check
on:
  workflow_call:
    inputs:
      check_version_in_gradle_properties:
        description: 'This is used to check gradle_properties version'
        required: false
        type: string
        default: 'false'
      check_version_in_version_txt:
        description: 'This is used to check version in version.txt'
        required: false
        type: string
        default: 'false'
      check_sql_update:
        description: 'This is used to check if the sql files has any changes'
        required: false
        type: string
        default: 'true'
      check_branch_name:
        description: 'This is used to check branch name starts with TS-'
        required: false
        type: string
        default: 'true'
      check_existing_branch_name:
        description: 'This is used to check whether same branch is existing or no'
        required: false
        type: string
        default: 'true'
      check_valid_jira:
        description: 'This is used to check if we are using a valid jira or not'
        required: false
        type: string
        default: 'true'
      check_terraform_provider_version:
        description: 'This is used to check terraform provider version in terraform files'
        required: false
        type: string
        default: 'true'
      check_version_in_terraform_modules:
        description: 'This is used to check terraform modules directories version'
        required: false
        type: string
        default: 'false'
      check_version_of_helm_chart:
        description: 'This is used to check version(helm chart version) present in chart.yaml  '
        required: false
        type: string
        default: 'false'

jobs:
  dev-checks:
    runs-on: self-hosted
    outputs:
      mail_id_output: ${{ steps.mail_info.outputs.mail_id }}
      mail_subject_output: ${{ steps.mail_info.outputs.mail_subject}}
      mail_body_output: ${{ steps.mail_info.outputs.mail_body }}
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          echo "$GITHUB_CONTEXT"

      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.CIPIPELINE_NEXUS_PASSWORD  }}
          fetch-depth: 0

      - name: Get branch name (merge)
        if: github.event_name != 'pull_request'
        shell: bash
        run: |
          echo "SOURCE_BRANCH=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV

      - name: Get branch name (pull request)
        if: github.event_name == 'pull_request'
        shell: bash
        run: |
          echo "SOURCE_BRANCH=$(echo ${{ github.event.pull_request.head.ref }} | tr / -)" >> $GITHUB_ENV
          echo "TARGET_BRANCH=$(echo ${GITHUB_BASE_REF} | tr / -)" >> $GITHUB_ENV
          echo "GITHUB_TOKEN=${{ secrets.CIPIPELINE_NEXUS_PASSWORD  }}" >> $GITHUB_ENV
        
      # - name: Check branch name
      #   run: |
      #    if echo "${{ env.SOURCE_BRANCH }}" | grep -Eq '^TS-' || echo "${{ env.SOURCE_BRANCH }}" | grep -Eq '^revert-' || echo "${{ env.SOURCE_BRANCH }}" | grep -Eq '^TDEVOPS-'; then
      #      echo "Branch name starts with 'TS-' or 'revert-' or 'TDEVOPS-'" 
      #    else
      #      echo "Branch name does not start with 'TS-' or 'revert-' or 'TDEVOPS-'"
      #      exit 1
      #    fi
      
      - name: Check PR Title
        run : |
          SUB_PR="${"${{github.event.pull_request.title}}"%|*}"
          SUB_BR="${"${{github.event.pull_request.title}}"%_*}"
          if echo "${{github.event.pull_request.title}}" | grep -Eq '^TS-' || echo "${{github.event.pull_request.title}}" | grep -Eq '^TDEVOPS-'; then
            echo "PR title starts with 'TS-' or 'TDEVOPS-'"
            if SUB_PR==SUB_BR
            then
              echo "PR Jira ticket and Branch Jira ticket Matched"
            else
              echo "Different Jira in PR and Branch"
              exit 1
          else 
            echo "PR title does not start with 'TS-' or 'TDEVOPS-'"
            exit 1
          fi  

      - name: Check for merge conflict in PR
        run: |
          if [ $(git grep -rln '<<<<<<< HEAD' -- ':(exclude)*dev-checks.yml') ]; then echo "Please resolve the merge conflict"; exit 1; else exit 0; fi
      
      - name: import packages for json lint
        run: |
          sudo sudo npm install jsonlint -g
          
      - name: Check for Jsonlint
        run: |
          set -e
          git diff --name-only --diff-filter=AM ${{ github.event.pull_request.base.sha }}...${{ github.event.pull_request.head.sha }} | grep '\.json$' | xargs -I{} sh -c 'jsonlint -q "{}" || { echo "::error::Invalid JSON file: {}"; exit 1; }'

      - name: install octokit/rest
        run: |
          if [ ! -d "node_modules/@octokit/rest" ]; then
            npm cache clean --force
            npm install @octokit/rest --legacy-peer-deps
          fi
      - name: install node fetch 
        run: | 
          npm install node-fetch
          
      - name: Check DB Migration Scripts
        id: check_db_migration
        uses: actions/github-script@v6.4.1
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.CIPIPELINE_NEXUS_PASSWORD  }}
          script: |
            head_commit = "${{ github.sha }}"
            base_commit = "${{ github.sha }}"
            if ( "${{ github.event.before }}" != '0000000000000000000000000000000000000000') { 
              base_commit = "${{ github.event.before }}"
            }
            if ( "${{ github.event_name }}" == 'pull_request') {
              console.log("Using the base branch's commit for comparing.")
              base_commit = "${{ github.event.pull_request.base.sha  }}"
            }
            console.log("base_commit " + base_commit);
            console.log("head_commit " + head_commit); 
            response = await github.rest.repos.compareCommits({
                owner: "${{ github.repository_owner }}",
                repo: "${{  github.repository }}".split('/')[1],
                head: head_commit,
                base: base_commit
            });
            response.data.files.forEach(function(file_entry) {
              if (file_entry.filename.endsWith(".sql") && file_entry.filename.includes("db/migration/") && 
                   (file_entry.status == 'modified' || file_entry.status == 'removed')) {
                console.log(file_entry.filename);
                console.log(file_entry.status);
                core.setFailed("Modifying or removing a flyway history file " + file_entry.filename);
              }
            });
            let path = "";
            response.data.files.forEach(function(file_entry) {
              if (file_entry.filename.endsWith(".sql") && file_entry.filename.includes("db/migration/")) {
                const lastSlashIndex = file_entry.filename.lastIndexOf("/");
                path = file_entry.filename.substring(0, lastSlashIndex);
              }
            });
            const { Octokit } = require("@octokit/rest");
            const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN, request: { fetch } });
            const { data: existingFiles } = await octokit.repos.getContent({
              owner: "${{ github.repository_owner }}",
              repo: "${{  github.repository }}".split('/')[1],
              path: path,
            });
            console.log(existingFiles)
            const existing_versions = existingFiles.map(f => f.name.split("__")[0]);
            response.data.files.forEach(function(file_entry){
            if (file_entry.filename.endsWith(".sql") && file_entry.filename.includes("db/migration/")) {
                console.log(existing_versions)
                const version = file_entry.filename.split("__")[0].split("/").pop();
                console.log(version)
                console.log(existing_versions)
                if (existing_versions.includes(version)) {
                  console.log(file_entry.filename);
                  core.setFailed(`Flyway file with version ${version} already exists`);
                }
              }
            });
            
            
      - name: check for gradle properties version
        uses: actions/github-script@v6.3.3
        if:  ${{ inputs.check_version_in_gradle_properties == 'true' }} 
        with:
          github-token: ${{ secrets.CIPIPELINE_NEXUS_PASSWORD  }}
          script: |
            head_commit = "${{ github.sha }}"
            base_commit = "${{ github.sha }}"
            if ( "${{ github.event.before }}" != '0000000000000000000000000000000000000000') { 
              base_commit = "${{ github.event.before }}"
            }
            if ( "${{ github.event_name }}" == 'pull_request') {
              console.log("Using the base branch's commit for comparing.")
              base_commit = "${{ github.event.pull_request.base.sha  }}"
            }
            console.log("base_commit " + base_commit);
            console.log("head_commit " + head_commit); 
            response = await github.rest.repos.compareCommits({
                owner: "${{ github.repository_owner }}",
                repo: "${{  github.repository }}".split('/')[1],
                head: head_commit,
                base: base_commit
            });
            version_updated = false
             response.data.files.forEach(function(file_entry) {
               if (file_entry.filename == 'gradle.properties') {
                   console.log(file_entry.patch)
                   if (file_entry.patch.includes("-version=") && file_entry.patch.includes("+version=")) {
                       version_updated = true
                   }
               }
             });
             if (version_updated == false) {
                  core.setFailed("Tessell Libraries must update the version in gradle.properties file")
             }
      
      - name: check for version in version_txt
        if:  ${{ inputs.check_version_in_version_txt == 'true' }}
        uses: actions/github-script@v6.3.3
        with:
          github-token: ${{ secrets.CIPIPELINE_NEXUS_PASSWORD  }}
          script: |
            head_commit = "${{ github.sha }}"
            base_commit = "${{ github.sha }}"
            if ( "${{ github.event.before }}" != '0000000000000000000000000000000000000000') { 
              base_commit = "${{ github.event.before }}"
            }
            if ( "${{ github.event_name }}" == 'pull_request') {
              console.log("Using the base branch's commit for comparing.")
              base_commit = "${{ github.event.pull_request.base.sha  }}"
            }
            console.log("base_commit " + base_commit);
            console.log("head_commit " + head_commit); 
            response = await github.rest.repos.compareCommits({
                owner: "${{ github.repository_owner }}",
                repo: "${{  github.repository }}".split('/')[1],
                head: head_commit,
                base: base_commit
            });
            version_updated = false
              response.data.files.forEach(function(file_entry) {
                if (file_entry.filename == 'version.txt') {
                    console.log(file_entry.patch)
                    if (file_entry.patch.includes("-version=") && file_entry.patch.includes("+version=")) {
                         version_updated = true
                    }
                }
              });
              if (version_updated == false) {
                  core.setFailed("Tessell Libraries must update the version in version.txt file")
              }
            
      - name: check for version in version.txt in terraform modules repo
        if:  ${{ inputs.check_version_in_terraform_modules == 'true' }}
        uses: actions/github-script@v6.3.3
        with:
          github-token: ${{ secrets.CIPIPELINE_NEXUS_PASSWORD  }}
          script: |
            head_commit = "${{ github.sha }}"
            base_commit = "${{ github.sha }}"
            if ( "${{ github.event.before }}" != '0000000000000000000000000000000000000000') { 
              base_commit = "${{ github.event.before }}"
            }
            if ( "${{ github.event_name }}" == 'pull_request') {
              console.log("Using the base branch's commit for comparing.")
              base_commit = "${{ github.event.pull_request.base.sha  }}"
            }
            console.log("base_commit " + base_commit);
            console.log("head_commit " + head_commit); 
            response = await github.rest.repos.compareCommits({
                owner: "${{ github.repository_owner }}",
                repo: "${{  github.repository }}".split('/')[1],
                head: head_commit,
                base: base_commit
            });
              const excludedDirectories = ['.github','.gitignore'];
              const modifiedFiles = response.data.files;
              const modifiedDirectories = {};
              response.data.files.forEach(file => {
                const fileDirectory = file.filename.split("/")[0];
                 if (!excludedDirectories.includes(fileDirectory)) {
                if (!modifiedDirectories[fileDirectory]) {
                  modifiedDirectories[fileDirectory] = false;
                }}
              });
              response.data.files.forEach(function(file_entry) {
                dir_name = file_entry.filename.split("/")[0];
                if (file_entry.filename.split("/")[1] == 'version.txt') {
                    console.log("Modifying version" + dir_name );
                      if  (file_entry.patch?.includes("+version=")) {
                           modifiedDirectories[dir_name] = true;
                       }
                }
              });
              console.log(modifiedDirectories);
              Object.entries(modifiedDirectories).forEach(([fileDirectory, isModified]) => {
               if (isModified == false) {
                core.setFailed('Tessell Libraries must update the version in version.txt' + fileDirectory );
              }
            });
            
           
      - name: check for terraform (code)
        if : github.event_name == 'pull_request'
        id: terraform_check
        uses: actions/github-script@v6.3.3
        with:
          github-token: ${{ secrets.CIPIPELINE_NEXUS_PASSWORD  }}
          script: |
            head_commit = "${{ github.sha }}"
            base_commit = "${{ github.sha }}"
            if ( "${{ github.event.before }}" != '0000000000000000000000000000000000000000') { 
              base_commit = "${{ github.event.before }}"
            }
            if ( "${{ github.event_name }}" == 'pull_request') {
              console.log("Using the base branch's commit for comparing.")
              base_commit = "${{ github.event.pull_request.base.sha  }}"
            }
            console.log("base_commit " + base_commit);
            console.log("head_commit " + head_commit); 
            response = await github.rest.repos.compareCommits({
                owner: "${{ github.repository_owner }}",
                repo: "${{  github.repository }}".split('/')[1],
                head: head_commit,
                base: base_commit
            });
            var terraform_file = [] 
            response.data.files.forEach(function(file_entry) {
              if (file_entry.filename.endsWith(".tf") && file_entry.status != 'removed') {
                console.log(file_entry.filename);
                console.log(file_entry.status);
                terraform_file.push(file_entry.filename)
                console.log(terraform_file) ;
              }
            });
            core.setOutput('terraform_file' , terraform_file.join(','));
        
      - name: check for chart verison in chart.yaml 
        if : ${{ inputs.check_version_of_helm_chart == 'true' }}
        uses: actions/github-script@v6.3.3
        with:
          github-token: ${{ secrets.PIPELINES_REPO_TOKEN  }}
          script: |
            head_commit = "${{ github.sha }}"
            base_commit = "${{ github.sha }}"
            if ( "${{ github.event.before }}" != '0000000000000000000000000000000000000000') { 
              base_commit = "${{ github.event.before }}"
            }
            if ( "${{ github.event_name }}" == 'pull_request') {
              console.log("Using the base branch's commit for comparing.")
              base_commit = "${{ github.event.pull_request.base.sha  }}"
            }
            console.log("base_commit " + base_commit);
            console.log("head_commit " + head_commit); 
            response = await github.rest.repos.compareCommits({
                owner: "${{ github.repository_owner }}",
                repo: "${{  github.repository }}".split('/')[1],
                head: head_commit,
                base: base_commit
            });
              version_updated = true;
              const excludeDirs = ['.github', '.gitignore', 'README.md'];
              response.data.files.forEach(function(file_entry) {
                if (!excludeDirs.some(dir => file_entry.filename.startsWith(dir))) {
                    version_updated = false;
                }
              });
              response.data.files.forEach(function(file_entry) {
                  if (file_entry.filename === 'helm-chart/Chart.yaml' && file_entry.patch.includes("-version:") && file_entry.patch.includes("+version:")) {
                    version_updated = true;
                }
              });
              if (version_updated == false ) {
                core.setFailed("Tessell Libraries must update the version in chart.yaml file")
              }

            
          
      - name: Check Version sequence of DB Scripts
        id: check_db_version_seq
        if: steps.check_db_migration.outputs.db_migration_dir
        run:
          python3 .github/scripts/check_db_migration_version_sequence.py "${{ steps.check_db_migration.outputs.db_migration_dir }}"      
      

      - name: check for terraform version
        if: steps.terraform_check.outputs.terraform_file 
        run:
          terraform_version_check "${{ steps.terraform_check.outputs.terraform_file }}"
      
      #- name: Jira number validation
      #  run: |
      #    jira_check '${{ secrets.JIRA_USERNAME }}' '${{ secrets.JIRA_API_TOKEN }}' '${{ env.SOURCE_BRANCH }}'

      - name: check to verify same branch is exist
        if: ${{ startsWith(env.TARGET_BRANCH,'rel-') && !contains(env.SOURCE_BRANCH,'double_commit') }}
        run: |
          branch_to_check=${{ env.SOURCE_BRANCH }}-main-double_commit
          list_of_branches=($(git branch -r | awk -F '/' '{print $2}'))
          for branch in "${list_of_branches[@]}";do
          if [[ "$branch" == "$branch_to_check" ]];then
            echo "Double commit branch with name $branch is alredy exist , please merge and/or delete  the branch ";exit 1;
          fi
          done
             
      - name: Get PR-Author,subject & body to send email
        if: ${{ failure() && contains(github.event.pull_request.head.ref, 'double_commit') }}
        run: |
          echo "MAILID=$(git log -1 '${{ github.event.pull_request.head.sha }}' --pretty=format:'%ae')" >> $GITHUB_ENV
          echo "BODY=JOB_STATUS : ${{ job.status }} %0A WORKFLOW : ${{ github.workflow }} %0A EVENT : ${{ github.event_name }} %0A BRANCH : ${{ env.SOURCE_BRANCH }} %0A COMMIT_ID : ${{ github.sha }} %0A REPO : ${{ github.repository }}" >> $GITHUB_ENV
 
      - name: sending output
        if: ${{ failure() && contains(github.event.pull_request.head.ref, 'double_commit') }}
        id: mail_info
        run: |
          echo "mail_id=${{ env.MAILID }}" >> $GITHUB_OUTPUT
          echo "mail_subject=***${{ job.status }}*** || ${{ github.workflow }}  ||  ${{ github.repository }} " >> $GITHUB_OUTPUT
          echo "mail_body=${{ env.BODY }}" >> $GITHUB_OUTPUT
        
  send-mail:
    uses: ./.github/workflows/email_dc.yaml
    needs: dev-checks
    with:
      subject: ${{ needs.dev-checks.outputs.mail_subject_output }}
      body: ${{ needs.dev-checks.outputs.mail_body_output }} 
      to: ${{ needs.dev-checks.outputs.mail_id_output }}
    secrets: inherit
    if: ${{ failure() && contains(github.event.pull_request.head.ref, 'double_commit') }}
