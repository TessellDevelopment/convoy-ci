---
# This is a basic workflow to help you get started with Actions
name: Tessell Pipelines Code Build

# Controls when the workflow will run
on:
  workflow_call:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL  }}
      DOCKERHUB_ORG: "tesselldev"
      IMAGE_NAME: "tessell-filebeat"
      NEXUS_SERVER: "nexus.tessell.cloud"
      NEXUS_PULL_REPOS_PY: tessell-py-development
      NEXUS_PUSH_REPOS_PY: tessell-repos-py-component
      NEXUS_PULL_REPOS_M2: tessell-m2-development
      NEXUS_PUSH_REPOS_M2: tessell-repos-m2-component
      GITHUB_USER: ${{ secrets.CIPIPELINE_NEXUS_USERNAME }}
      GITHUB_TOKEN: ${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}


    steps:
      - name: Get branch name
        shell: bash
        run: |
          echo "SOURCE_BRANCH=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV
          echo "DOCKER_IMAGE_NAME=$(echo ${GITHUB_REPOSITORY} | cut -f2 -d'/')" >> $GITHUB_ENV
          echo "GOPATH=/home/runner/go" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          
      - name: Setup Go
        uses: actions/setup-go@v2

      - name: Install dependencies
        run: |
           git config --global url."https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com".insteadOf "https://github.com"
           go version
           go install golang.org/x/tools/cmd/goimports@latest
           which go
          
      - name: Install Mage
        run: |
          git clone https://github.com/magefile/mage
          cd mage
          go run bootstrap.go

      - name: Make clients
        run: |
          echo "Building the service"
          export GOPATH=/home/runner/go/bin
          export PATH=/go/bin:/usr/local/go/bin:/opt/maven/bin:/usr/lib/jvm/java-16-openjdk-amd64/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/home/runner/go/bin
          cd filebeat
          mage package
          cp ./build/package/filebeat-oss/filebeat-oss-linux-amd64.docker/docker-build/beat/filebeat .
          
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1    
          

      - name: Login to docker
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}    
          
      - name: docker build
        run: |
          cd filebeat
          docker build -t  ${{ env.IMAGE_NAME }}  .   
          
          

      - name: Docker image scan
        if: ${{ !startsWith(env.SOURCE_BRANCH,'rel-') && env.SOURCE_BRANCH != 'main' }}
        id: docker-image-scan
        continue-on-error: false
        uses: azure/container-scan@v0
        with:
          image-name: ${{ env.DOCKER_IMAGE_NAME }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - uses: actions/upload-artifact@v3
        if: ${{ startsWith(env.SOURCE_BRANCH,'rel-') || env.SOURCE_BRANCH == 'main' }}
        continue-on-error: true
        with:
          name: image-scan-report
          path: ${{ steps.docker-image-scan.outputs.scan-report-path }}

      - name: Get tags
        uses: nick-fields/retry@v2.8.1
        if: ${{ startsWith(env.SOURCE_BRANCH,'rel-') || env.SOURCE_BRANCH == 'main' }}
        with:
          timeout_seconds: 10
          max_attempts: 3
          retry_on: error
          command: |
            git fetch --all
            git tag --contains '${{ github.event.after }}'
            latest_tags+=("$(git tag --contains '${{ github.event.after }}')")
            if [[ "$latest_tags" == '' ]]; then 
              echo " Tag is Empty"
              exit 1
            fi
            echo "Tag is present: $latest_tags"       
            for tag in $latest_tags; do tag_arr+=($tag); done
            echo "TAGS=${tag_arr[@]}" >> $GITHUB_ENV

      - name: Find latest tag
        uses: actions/github-script@v4
        id: latest_tag
        if: ${{ startsWith(env.SOURCE_BRANCH,'rel-') || env.SOURCE_BRANCH == 'main' }}
        with:
          github-token: ${{ secrets.PIPELINES_REPO_TOKEN  }}
          script: |
            console.log("Tags are " + "${{ env.TAGS }}")
            latest_tag = '0.0.0'
            // process multiple tags if any
            tags = "${{ env.TAGS }}".split(' ')
            if (tags.length == 1) {
              console.log("There is only one tag. Using it." + tags[0])
              latest_tag = tags[0]
            } else {
              if ("${{ env.SOURCE_BRANCH }}" == "main") {
                for (i in tags) {
                  tag = tags[i]
                  console.log("Checking tag " + tag)
                  if (latest_tag == null) {
                    latest_tag = tag
                    continue
                  }
                  latest_parts = latest_tag.split(".")
                  tag_parts = tag.split(".")
                  for (i = 0; i < tag_parts.length; i++) {
                    if (parseInt(tag_parts[i]) < parseInt(latest_parts[i])) {
                      console.log("Skipping " + tag)
                      break
                    }
                    if (parseInt(tag_parts[i]) > parseInt(latest_parts[i])) {
                      latest_tag = tag
                      console.log("Setting " + latest_tag)
                      break
                    }
                  }
                }
              } else {
                tag_base = "${{ env.SOURCE_BRANCH }}".substring(4).split(".").slice(0,2)
                latest_tag = tag_base.join(".") + ".0"
                for (i in tags) {
                  tag = tags[i]
                  console.log("branch - Checking tag " + tag)
                  tag_parts = tag.split(".")
                  if (tag_base[0] == tag_parts[0] && tag_base[1] == tag_parts[1]) {
                    latest_parts = latest_tag.split(".")
                    if (parseInt(latest_parts[2]) < parseInt(tag_parts[2])) {
                      latest_tag = tag
                    }
                  }
                }
              }
            }
            console.log("Latest tag: " + latest_tag)
            // check if we have
            if ( latest_tag == '' || latest_tag === undefined) {
              console.log("Couldn't determine the latest tag, exiting. Retry manually..")
              process.exit(1);
            }
            core.setOutput('tag_ref', latest_tag)
            
            
      - name: creating tar files
        run: |
          PACKAGES_DIR=./filebeat/build/distributions/
          cp ./filebeat/tessell-filebeat-linux.yml $PACKAGES_DIR/filebeat.yml
          pushd $PACKAGES_DIR
          tar -zcvf filebeat-linux.tar.gz filebeat.yml
          popd
          cp ./filebeat/tessell-filebeat-windows.yml $PACKAGES_DIR/filebeat.yml
          pushd $PACKAGES_DIR
          tar -zcvf filebeat-windows.tar.gz filebeat.yml
          popd
          
            
      - name: steps to upload tar files to nexus
        if: ${{ startsWith(env.SOURCE_BRANCH,'rel-') || env.SOURCE_BRANCH == 'main' }}
        run: |
            mkdir -p $HOME/.m2
            cp .github/scripts/settings.xml $HOME/.m2/settings.xml
            cat $HOME/.m2/settings.xml
            mvn deploy:deploy-file -Dnexus_url=https://${NEXUS_SERVER}/repository/${NEXUS_PULL_REPOS_M2} \
              -Dnexus_username=${GITHUB_USER} -Dnexus_password=${GITHUB_TOKEN} \
              -DgroupId=tessell.filebeat -DartifactId=filebeat-linux -Dversion=${{ steps.latest_tag.outputs.tag_ref }} \
              -DgeneratePom=true -Dpackaging=tar.gz \
              -Durl=https://${NEXUS_SERVER}/repository/${NEXUS_PUSH_REPOS_M2} \
              -Dfile=./filebeat/build/distributions/filebeat-linux.tar.gz -DrepositoryId=nexus
            cat $HOME/.m2/settings.xml
            mvn deploy:deploy-file -Dnexus_url=https://${NEXUS_SERVER}/repository/${NEXUS_PULL_REPOS_M2} \
              -Dnexus_username=${GITHUB_USER} -Dnexus_password=${GITHUB_TOKEN} \
              -DgroupId=tessell.filebeat -DartifactId=filebeat-windows -Dversion=${{ steps.latest_tag.outputs.tag_ref }} \
              -DgeneratePom=true -Dpackaging=tar.gz \
              -Durl=https://${NEXUS_SERVER}/repository/${NEXUS_PUSH_REPOS_M2} \
              -Dfile=./filebeat/build/distributions/filebeat-windows.tar.gz -DrepositoryId=nexus
              


      - name: Set Push repository
        if: ${{ startsWith(env.SOURCE_BRANCH,'rel-') || env.SOURCE_BRANCH == 'main' }}
        shell: bash
        run: |
          echo "DOCKERHUB_ORG=tessellprod" >> $GITHUB_ENV
          
      

      - name: Docker Image push
        if: ${{ startsWith(env.SOURCE_BRANCH,'rel-') || env.SOURCE_BRANCH == 'main' }}
        run: |
          docker tag ${{ env.IMAGE_NAME }}:latest ${{env.DOCKERHUB_ORG}}/${{ env.IMAGE_NAME }}:${{ steps.latest_tag.outputs.tag_ref }}
          docker push ${{ env.DOCKERHUB_ORG }}/${{ env.IMAGE_NAME }}:${{ steps.latest_tag.outputs.tag_ref }}


      - name: Slack Notification
        uses: act10ns/slack@v1.5.0
        if: ${{ failure() && (startsWith(env.SOURCE_BRANCH,'rel-') || env.SOURCE_BRANCH == 'main') }}
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: ${{ secrets.SLACK_DEVOPS_CHANNEL  }}
