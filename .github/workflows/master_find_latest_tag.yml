---
name: Find latest tag
on:
  workflow_call:
    inputs:
      dev_build:
        description: 'Determine whether dispatch is on dev branch or not'
        required: false
        default: false
        type: boolean
    outputs:
      tag:
        description: "Latest tag"
        value: ${{ jobs.find-latest-tag.outputs.tag_ref_output }}
  
jobs:

  find-latest-tag:
    runs-on: non-build
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL  }}
    outputs:
      tag_ref_output: ${{ steps.tag_output.outputs.tag_ref }}
    steps:
      - run: |
            set +e
            git config --global core.compression 0
            pwd
            rm -rf tessell-mysql-go-lib
            git clone --depth 1 https://${{secrets.CIPIPELINE_GITHUB_TOKEN}}@github.com/TessellDevelopment/tessell-mysql-go-lib.git
            cd tessell-mysql-go-lib
            git fetch --unshallow
            git fetch --depth=2147483647
            git pull --all
      # - uses: actions/checkout@v4.1.1
      #   with:
      #     fetch-depth: 1

      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          echo "$GITHUB_CONTEXT"
          
      - name: Get branch name
        shell: bash
        run: |
          echo "SOURCE_BRANCH=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV
              
      - name: Get tags
        uses: nick-fields/retry@v3.0.0
        if: ${{ inputs.dev_build == false }}
        with:
          timeout_seconds: 10
          max_attempts: 3
          retry_on: error
          command: |
            git fetch --all
            sha="${{github.sha}}"
            sha="${sha:0:7}"
            echo "$(git log --decorate --oneline)"
            latest_tags="$(git log --decorate --oneline | grep $sha | grep -o -E "tag: [0-9]+\.[0-9]+\.[0-9]+" | awk '{print $2}')"
            if [[ "$latest_tags" == '' ]]; then 
              echo "Tag is Empty"
              exit 1
            fi
            echo "Tag is present: $latest_tags"       
            for tag in $latest_tags; do tag_arr+=($tag); done
            echo "TAGS=${tag_arr[@]}" >> $GITHUB_ENV
        
        
      - name: Find latest tag
        uses: actions/github-script@v7.0.1
        id: latest_tag
        if: ${{ inputs.dev_build == false}}
        with:
          github-token: ${{ secrets.PIPELINES_REPO_TOKEN  }}
          script: |
            console.log("Tags are " + "${{ env.TAGS }}")
            latest_tag = '0.0.0'
            // process multiple tags if any
            tags = "${{ env.TAGS }}".split(' ')
            if (tags.length == 1) {
              console.log("There is only one tag. Using it." + tags[0])
              latest_tag = tags[0]
            } else {
              if ("${{ env.SOURCE_BRANCH }}" == "main") {
                for (i in tags) {
                  tag = tags[i]
                  console.log("Checking tag " + tag)
                  if (latest_tag == null) {
                    latest_tag = tag
                    continue
                  }
                  latest_parts = latest_tag.split(".")
                  tag_parts = tag.split(".")
                  for (i = 0; i < tag_parts.length; i++) {
                    if (parseInt(tag_parts[i]) < parseInt(latest_parts[i])) {
                      console.log("Skipping " + tag)
                      break
                    }
                    if (parseInt(tag_parts[i]) > parseInt(latest_parts[i])) {
                      latest_tag = tag
                      console.log("Setting " + latest_tag)
                      break
                    }
                  }
                }
              } else {
                tag_base = "${{ env.SOURCE_BRANCH }}".substring(4).split(".").slice(0,2)
                latest_tag = tag_base.join(".") + ".0"
                for (i in tags) {
                  tag = tags[i]
                  console.log("branch - Checking tag " + tag)
                  tag_parts = tag.split(".")
                  if (tag_base[0] == tag_parts[0] && tag_base[1] == tag_parts[1]) {
                    latest_parts = latest_tag.split(".")
                    if (parseInt(latest_parts[2]) < parseInt(tag_parts[2])) {
                      latest_tag = tag
                    }
                  }
                }
              }
            }
            console.log("Latest tag: " + latest_tag)
            // check if we have
            if ( latest_tag == '' || latest_tag === undefined) {
              console.log("Couldn't determine the latest tag, exiting. Retry manually..")
              process.exit(1);
            }
            core.setOutput('tag_ref', latest_tag)

      - name: Tag Output
        id: tag_output
        run: |
          if ${{inputs.dev_build}}; then
            branch_name="${{github.ref_name}}"
            if [[ "${branch_name}" =~ ^[^-]+-([0-9]+) ]]; then
              version="0.0.${BASH_REMATCH[1]}"
            else
              echo "Error: Branch name is not in format 'TS/TDEVOPS/SRE-XXXX'"
              exit 1
            fi
            echo "Constructed version: ${version}"
            echo "tag_ref=${version}" >> $GITHUB_OUTPUT
          else
            echo "tag_ref=${{steps.latest_tag.outputs.tag_ref}}" >> $GITHUB_OUTPUT
          fi
          
      - name: Slack Notification
        if: failure()
        uses: act10ns/slack@v2.0.0
        with:
            status: ${{ job.status }}
            steps: ${{ toJson(steps) }}
            channel: ${{ secrets.SLACK_DEVOPS_CHANNEL  }}
