name: Tessell Pipelines Code Build

on:
  workflow_call:
  workflow_dispatch:

jobs:

  file-check:
    runs-on: self-hosted
    outputs:
      any-modified: ${{steps.changed-files.outputs.any_modified}}
    name: Check changed files
    steps:
      - uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      - name: Changed files
        id: changed-files
        uses: tj-actions/changed-files@v42.0.2
        with:
          files: |
            Chart.yaml
            services/**

  build:
    runs-on: self-hosted
    needs: file-check
    if: needs.file-check.outputs.any-modified == 'true' 
    outputs:
      mail_id_output: ${{ steps.mail_info.outputs.mail_id }}
      mail_subject_output: ${{ steps.mail_info.outputs.mail_subject}}
      mail_body_output: ${{ steps.mail_info.outputs.mail_body }}
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL  }}
      GITHUB_USER: ${{ secrets.CIPIPELINE_GITHUB_USER }}
      GITHUB_TOKEN: ${{ secrets.CIPIPELINE_GITHUB_TOKEN }}
      NEXUS_USER: ${{secrets.CIPIPELINE_NEXUS_USERNAME}}
      NEXUS_PASSWORD: ${{secrets.CIPIPELINE_NEXUS_PASSWORD}}
      NEXUS_REPOS_HELM: tessell-repos-helm-development
    steps:
      - uses: actions/checkout@v4.1.1

      - name: Get branch name
        shell: bash
        run: |
          echo "SOURCE_BRANCH=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV

      - name: Set Helm Repository
        if: ${{ startsWith(env.SOURCE_BRANCH,'rel-') || env.SOURCE_BRANCH == 'main' }}
        shell: bash
        run: |
          echo "NEXUS_REPOS_HELM=${{vars.NEXUS_PUSH_REPOS_HELM}}" >> $GITHUB_ENV

      - name: Configure convoy-helm-template
        run: |
          set +e
          GITHUB_WORKSPACE=$(pwd)
          CHART_GITHUB_LOCATION=$GITHUB_WORKSPACE
          TEMPLATE_REPO_GITHUB_LOCATION=$GITHUB_WORKSPACE/../convoy-helm-template
          echo "$CHART_GITHUB_LOCATION"
          echo "$TEMPLATE_REPO_GITHUB_LOCATION"
          echo "TEMPLATE_REPO_GITHUB_LOCATION=$TEMPLATE_REPO_GITHUB_LOCATION" >> $GITHUB_ENV
          echo "Cloning convoy-helm-template"
          rm -rf $TEMPLATE_REPO_GITHUB_LOCATION
          template_version=$(yq --exit-status '.convoy-helm-template' Chart.yaml)
          if [ $? -eq 0 ]; then
              echo "convoy-helm-template version: $template_version"
          else
              echo "convoy-helm-template version not found.Exiting."
              exit 1
          fi
          git clone --branch $template_version https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com/${{github.repository_owner}}/convoy-helm-template.git $TEMPLATE_REPO_GITHUB_LOCATION
          echo "Copying the service values file"
          cp -r $CHART_GITHUB_LOCATION/services/* $TEMPLATE_REPO_GITHUB_LOCATION/helm-chart/values/apps/
          cp -r $CHART_GITHUB_LOCATION/Chart.yaml $TEMPLATE_REPO_GITHUB_LOCATION/helm-chart/Chart.yaml

      - name: Package and Push 
        run: |
          CHART_NAME=$(grep 'name' convoy.yaml | awk '{print $2}')
          cd ${{env.TEMPLATE_REPO_GITHUB_LOCATION}}/scripts
          ls -lrta ../helm-chart/values/apps/
          echo "Running package and push"
          if [[ "${{env.NEXUS_REPOS_HELM}}" == "${{vars.NEXUS_PUSH_REPOS_HELM}}" ]]; then
            ./package-and-push --prod -n $CHART_NAME
          else
            ./package-and-push --no-push -n $CHART_NAME
          fi

      - name: Get PR-Author,subject & body to send email
        if: ${{ failure() && contains(github.event.pull_request.head.ref, 'double_commit') }}
        run: |
          echo "MAILID=$(git log -1 '${{ github.event.pull_request.head.sha }}' --pretty=format:'%ae')" >> $GITHUB_ENV
          echo "BODY=JOB_STATUS : ${{ job.status }} %0A WORKFLOW : ${{ github.workflow }} %0A EVENT : ${{ github.event_name }} %0A BRANCH : ${{ env.SOURCE_BRANCH }} %0A COMMIT_ID : ${{ github.sha }} %0A REPO : ${{ github.repository }}" >> $GITHUB_ENV
 
      - name: sending output
        if: ${{ failure() && contains(github.event.pull_request.head.ref, 'double_commit') }}
        id: mail_info
        run: |
          echo "mail_id=${{ env.MAILID }}" >> $GITHUB_OUTPUT
          echo "mail_subject=***${{ job.status }}*** || ${{ github.workflow }}  ||  ${{ github.repository }} " >> $GITHUB_OUTPUT
          echo "mail_body=${{ env.BODY }}" >> $GITHUB_OUTPUT
  
  post-build-status-to-convoy:
    runs-on: non-build
    needs: build
    if: always()  
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.CONVOY_ALERTS_SLACK_URL }}
    steps:
      
      - uses: actions/checkout@v4.1.1
        name: Checkout repos
        with:
          fetch-depth: 0

      - name: Get branch name
        shell: bash
        run: |
          echo "SOURCE_BRANCH=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV

      - uses: technote-space/workflow-conclusion-action@v3.0.3
        with:
          GITHUB_TOKEN: ${{ secrets.CIPIPELINE_GITHUB_TOKEN }}

      - name: POST API to Convoy
        if: ${{ startsWith(env.SOURCE_BRANCH,'rel-') || env.SOURCE_BRANCH == 'main' }}
        env:
          API_URL: http://${{vars.CONVOY_API_ENDPOINT}}/devops/git-metadata/build-status
          COMMIT_HASH: "${{github.sha}}"
          REPO: "${{github.repository}}"
          BASE_BRANCH: "${{github.event.pull_request.base.ref}}"
          API_KEY: ${{secrets.CONVOY_AUTH_TOKEN}}
          STATUS: "${{env.WORKFLOW_CONCLUSION}}"
          SOURCE_BRANCH: "${{env.SOURCE_BRANCH}}"
        run: |
          python3 - <<EOF
          import requests
          import json
          import os
          import time
          import base64
          import yaml

          API_URL = os.environ.get('API_URL')
          API_KEY = os.environ.get('API_KEY')
          REPO = os.environ.get('REPO')
          COMMIT_HASH = os.environ.get('COMMIT_HASH')
          BASE_BRANCH = os.environ.get('BASE_BRANCH')
          STATUS = (os.environ.get('STATUS')).upper()

          if not(bool(BASE_BRANCH)):
            BASE_BRANCH = os.environ.get('SOURCE_BRANCH')
          
          OWNER = REPO.split("/")
          REPO = OWNER[1]
          
          if STATUS == 'SUCCESS':
            STATUS = 'SUCCESSFUL'
          if STATUS == 'FAILURE':
            STATUS = 'FAILED'

          with open('convoy.yaml', 'r') as yaml_file:
            yaml_data = yaml.safe_load(yaml_file)
          APP_GROUP = yaml_data.get('appGroup')
          payload = {
            "repoName": REPO,
            "appGroup": APP_GROUP,
            "commitHash": COMMIT_HASH[:7],
            "baseBranch": BASE_BRANCH,
            "buildStatus": STATUS
          }
          print(payload)
          headers = {
            'Content-Type': 'application/json',
            'x-api-key': API_KEY
          }

          max_retries = 3
          retry_delay = 20 
      
          for _ in range(max_retries):
              response = requests.post(API_URL, json=payload, headers=headers)
              if response.status_code == 200:
                  print(response.status_code)
                  print(response.text)
                  break
              else:
                  print(response.status_code)
                  print(response.text)
                  print(f"Retrying... ({max_retries - _} attempts left)")
                  time.sleep(retry_delay)
          else:
              print("API request failed after retries.")
              exit(1)
          print("POST request Complete")
          EOF

      - name: Slack Notification
        uses: act10ns/slack@v2.0.0
        with:
            status: ${{ job.status }}
            steps: ${{ toJson(steps) }}
            channel: ${{ secrets.CONVOY_ALERTS_SLACK_CHANNEL  }}
        if: failure()

  send-mail:
    uses: ./.github/workflows/email_dc.yaml
    needs: build
    with:
      subject: ${{ needs.build.outputs.mail_subject_output }}
      body: ${{ needs.build.outputs.mail_body_output }} 
      to: ${{ needs.build.outputs.mail_id_output }}
    secrets: inherit
    if: ${{ failure() && contains(github.event.pull_request.head.ref, 'double_commit') }}
