# This is a basic workflow to help you get started with Actions
name: Tessell Pipelines Code Build

# Controls when the workflow will run
on:
  workflow_call:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: self-hosted
    outputs:
      mail_id_output: ${{ steps.mail_info.outputs.mail_id }}
      mail_subject_output: ${{ steps.mail_info.outputs.mail_subject}}
      mail_body_output: ${{ steps.mail_info.outputs.mail_body }}
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL  }}
      NEXUS_SERVER: nexus.tessell.cloud
      NEXUS_PULL_REPOS_PY: tessell-py-development
      GITHUB_USER: ${{ secrets.CIPIPELINE_GITHUB_USER }}
      GITHUB_TOKEN: ${{ secrets.CIPIPELINE_GITHUB_TOKEN }}
      NEXUS_USER: ${{secrets.CIPIPELINE_NEXUS_USERNAME}}
      NEXUS_PASSWORD: ${{secrets.CIPIPELINE_NEXUS_PASSWORD}}
      GROUP_NAME: "tessell.terraform_modules"

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          echo "$GITHUB_CONTEXT"

      - name: Get branch name && repo name 
        shell: bash
        run: |
          pwd
          echo "SOURCE_BRANCH=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV
          echo "REPO_NAME=$(git ls-remote --get-url | xargs basename -s .git)" >> $GITHUB_ENV
     
      - name: Install AWS CLI
        run: |
          curl -L -o install-aws.sh https://raw.githubusercontent.com/unfor19/install-aws-cli-action/master/entrypoint.sh && \
          chmod +x install-aws.sh
          sudo ./install-aws.sh "v2" "amd64"
          rm install-aws.sh
  
      - run: aws --version
        shell: bash

      - name: Configure AWS Credentials
        run: |
          aws configure set aws_access_key_id ${{ secrets.DEVQA_INFRA_ACCESS_KEY }}
          aws configure set aws_secret_access_key ${{ secrets.DEVQA_INFRA_SECRET_KEY }}
          aws configure set region ap-south-1

      - name: finding the modified dir's
        id: modified_dir
        uses: actions/github-script@v6.3.3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN  }}
          script: |
            head_commit = "${{ github.sha }}"
            base_commit = "${{ github.sha }}"
            if ( "${{ github.event.before }}" != '0000000000000000000000000000000000000000') { 
              base_commit = "${{ github.event.before }}"
            }
            if ( "${{ github.event_name }}" == 'pull_request') {
              console.log("Using the base branch's commit for comparing.")
              base_commit = "${{ github.event.pull_request.base.sha  }}"
            }
            console.log("base_commit " + base_commit);
            console.log("head_commit " + head_commit); 
            response = await github.rest.repos.compareCommits({
                owner: "${{ github.repository_owner }}",
                repo: "${{  github.repository }}".split('/')[1],
                head: head_commit,
                base: base_commit
            });
              const excludedDirectories = ['.github','.gitignore','convoy.yaml','README.md'];
              const modifiedFiles = response.data.files;
              const modifiedDirectories = [];
              response.data.files.forEach(file => {
                const fileDirectory = file.filename.split("/")[0];
                if (file.status !== "removed" && !excludedDirectories.includes(fileDirectory)) {
                  modifiedDirectories.push(fileDirectory)
                }
              });
              const uniqueDirectories = [...new Set(modifiedDirectories)];
              const outputString = uniqueDirectories.join(' ');
              core.setOutput('modifiedDirectories', outputString);
              

      - name: Zip terraform modules
        shell: bash
        run: |
          BASE_DIR=$PWD
          BUILD_DIR=$BASE_DIR/build
          mkdir -p $BUILD_DIR
          DIRECTORIES="${{ steps.modified_dir.outputs.modifiedDirectories }}"
          EXCLUDE_DIR=("build")
          for DIR in $DIRECTORIES
          do
            if [[ " ${EXCLUDE_DIR[*]} " != *"$DIR"* ]]; then 
              echo "building  ${DIR}"
              ARTIFACT_FILE=$BUILD_DIR/${DIR}.zip
              cd $BASE_DIR/$DIR
              VERSION=$(yq .version convoy.yaml)
              echo terraform_build $BASE_DIR/$DIR $ARTIFACT_FILE
              terraform_build $PWD $ARTIFACT_FILE
            fi
          done
          ls -lrta $BUILD_DIR

      - name: Upload terraform modules to nexus / S3 bucket
        if: ${{ startsWith(env.SOURCE_BRANCH,'rel-') || env.SOURCE_BRANCH == 'main' }}
        shell: bash
        run: |
          BASE_DIR=$PWD
          BUILD_DIR=$BASE_DIR/build
          mkdir -p $BUILD_DIR
          DIRECTORIES="${{ steps.modified_dir.outputs.modifiedDirectories }}"
          EXCLUDE_DIR=("build")
          for DIR in $DIRECTORIES
          do
            if [[ " ${EXCLUDE_DIR[*]} " != *"$DIR"* ]]; then 
              ARTIFACT_FILE=$BUILD_DIR/${DIR}.zip
              cd $BASE_DIR/$DIR
              VERSION=$(yq .version convoy.yaml)
              echo terraform_build $BASE_DIR/$DIR $ARTIFACT_FILE $VERSION
              terraform_build $PWD $ARTIFACT_FILE

              mvn deploy:deploy-file -Dnexus_url=https://${NEXUS_SERVER}/repository/tessell-m2-component \
                -Dnexus_username=${GITHUB_USER} -Dnexus_password=${GITHUB_TOKEN} \
                -DgroupId=${GROUP_NAME} -DartifactId=${DIR} -Dversion=$VERSION \
                -DgeneratePom=true -Dpackaging=zip \
                -Durl=https://${NEXUS_SERVER}/repository/tessell-repos-m2-component \
                -Dfile=${ARTIFACT_FILE} -DrepositoryId=nexus
              
              aws s3 cp $ARTIFACT_FILE s3://tessell-terraform-modules-terls/$DIR/$VERSION/
               
            fi
          done

      - name: Slack Notification
        uses: act10ns/slack@v1.5.0
        if: ${{ failure() && (startsWith(env.SOURCE_BRANCH,'rel-') || env.SOURCE_BRANCH == 'main') }}
        with:
           status: ${{ job.status }}
           steps: ${{ toJson(steps) }}
           channel: ${{ secrets.SLACK_DEVOPS_CHANNEL  }}
      
      - name: Get PR-Author,subject & body to send email
        if: ${{ failure() && contains(github.event.pull_request.head.ref, 'double_commit') }}
        run: |
          echo "MAILID=$(git log -1 '${{ github.event.pull_request.head.sha }}' --pretty=format:'%ae')" >> $GITHUB_ENV
          echo "BODY=JOB_STATUS : ${{ job.status }} %0A WORKFLOW : ${{ github.workflow }} %0A EVENT : ${{ github.event_name }} %0A BRANCH : ${{ env.SOURCE_BRANCH }} %0A COMMIT_ID : ${{ github.sha }} %0A REPO : ${{ github.repository }}" >> $GITHUB_ENV
 
      - name: sending output
        if: ${{ failure() && contains(github.event.pull_request.head.ref, 'double_commit') }}
        id: mail_info
        run: |
          echo "mail_id=${{ env.MAILID }}" >> $GITHUB_OUTPUT
          echo "mail_subject=***${{ job.status }}*** || ${{ github.workflow }}  ||  ${{ github.repository }} " >> $GITHUB_OUTPUT
          echo "mail_body=${{ env.BODY }}" >> $GITHUB_OUTPUT
  
          
  post-build-status-to-convoy:
    runs-on: self-hosted
    needs: build
    if: always()
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.CONVOY_ALERTS_SLACK_URL }}
    steps:
      - name: Set up Python
        uses: actions/setup-python@v2

      - name: Get branch name
        shell: bash
        run: |
          echo "SOURCE_BRANCH=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests pybase64

      - uses: technote-space/workflow-conclusion-action@v3
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: POST API to Convoy
        if: ${{ startsWith(env.SOURCE_BRANCH,'rel-') || env.SOURCE_BRANCH == 'main' }}
        env:
          API_URL: http://${{vars.CONVOY_API_ENDPOINT}}/devops/git-metadata/build-status
          COMMIT_HASH: "${{github.sha}}"
          REPO: "${{github.repository}}"
          BASE_BRANCH: "${{github.event.pull_request.base.ref}}"
          GITHUB_TOKEN: ${{ secrets.CIPIPELINE_GITHUB_TOKEN }}
          USER: ${{secrets.CIPIPELINE_GITHUB_USER}}
          STATUS: "${{env.WORKFLOW_CONCLUSION}}"
          SOURCE_BRANCH: "${{env.SOURCE_BRANCH}}"
        run: |
          python - <<EOF
          import requests
          import json
          import os
          import time
          import base64

          API_URL = os.environ.get('API_URL')
          REPO = os.environ.get('REPO')
          COMMIT_HASH = os.environ.get('COMMIT_HASH')
          BASE_BRANCH = os.environ.get('BASE_BRANCH')
          STATUS = (os.environ.get('STATUS')).upper()
          CONVOY_AUTH_TOKEN = os.environ.get('USER')+':'+ os.environ.get('GITHUB_TOKEN')
          CONVOY_AUTH_TOKEN = base64.b64encode(CONVOY_AUTH_TOKEN.encode('utf-8')).decode('utf-8')

          if not(bool(BASE_BRANCH)):
            BASE_BRANCH = os.environ.get('SOURCE_BRANCH')
          
          OWNER = REPO.split("/")
          REPO = OWNER[1]
          
          if STATUS == 'SUCCESS':
            STATUS = 'SUCCESSFUL'
          if STATUS == 'FAILURE':
            STATUS = 'FAILED'

          payload = {
            "repoName": REPO,
            "commitHash": COMMIT_HASH[:7],
            "baseBranch": BASE_BRANCH,
            "buildStatus": STATUS
          }

          print(payload)
          headers = {
            'Content-Type': 'application/json',
            'Authorization': f'Basic {CONVOY_AUTH_TOKEN}'
          }

          max_retries = 3
          retry_delay = 20 
      
          for _ in range(max_retries):
              response = requests.post(API_URL, json=payload, headers=headers)
              if response.status_code == 200:
                  print(response.status_code)
                  print(response.text)
                  break
              else:
                  print(response.status_code)
                  print(response.text)
                  print(f"Retrying... ({max_retries - _} attempts left)")
                  time.sleep(retry_delay)
          else:
              print("API request failed after retries.")
              exit(1)
          print("POST request Complete")
          EOF

      - name: Slack Notification
        uses: act10ns/slack@v1.5.0
        with:
            status: ${{ job.status }}
            steps: ${{ toJson(steps) }}
            channel: ${{ secrets.CONVOY_ALERTS_SLACK_CHANNEL  }}
        if: failure()
          
  send-mail:
    uses: ./.github/workflows/email_dc.yaml
    needs: build
    with:
      subject: ${{ needs.build.outputs.mail_subject_output }}
      body: ${{ needs.build.outputs.mail_body_output }} 
      to: ${{ needs.build.outputs.mail_id_output }}
    secrets: inherit
    if: ${{ failure() && contains(github.event.pull_request.head.ref, 'double_commit') }}
