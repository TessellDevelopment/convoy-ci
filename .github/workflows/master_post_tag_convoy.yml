---
name: Create Tag POST API to Convoy
on:
  workflow_call:
    inputs:
      tag:
        description: 'Tag created during create-tag'
        required: true
        type: string

  workflow_dispatch:

jobs:
  push-commit-details-to-convoy: 
    runs-on: self-hosted
    env:
      TAG: "${{inputs.tag}}"
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    steps:
      - name: Set up Python
        uses: actions/setup-python@v2

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests pyyaml pybase64

      - name: POST API to Convoy
        env:
          API_URL: http://convoy-devops.convoy:8080/devops/git-metadata/commits
          COMMIT_HASH: "${{github.sha}}"
          REPO: "${{github.event.pull_request.base.repo.name}}"
          TAG: "${{env.TAG}}"
          BASE_BRANCH: "${{github.event.pull_request.base.ref}}"
          PR_ID: "${{github.event.number}}"
          GITHUB_TOKEN: ${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}
          USER: ${{secrets.CIPIPELINE_NEXUS_USERNAME}}
        run: |
          python - <<EOF
            
          import yaml
          import requests
          import os
          import time
          import base64
          import subprocess

          def delete_keys(data, keys_to_exclude):
            for key in keys_to_exclude:
                try:
                    del data[key]
                except:
                    print(f'{key} not present in convoy.yaml')
            return data

          def get_artifact_metadata(yaml_data, type):
            artifactMetadata = {"type": type}
            
            if type == 'dockerImage':
                artifactMetadata["version"] = TAG

            elif type == 'helmChart':
                chart_path = yaml_data.get('chartPath')
                with open(chart_path, 'r') as chart_yaml_content:
                    data = yaml.safe_load(chart_yaml_content)
                artifactMetadata["version"] = data.get('version')

            elif type == 'zip':
                version = yaml_data.get('version')
                artifactMetadata["version"] = version if version else TAG
                keys_to_exclude = ['artifactType', 'version']
                artifactMetadata["convoyConfig"] = delete_keys(yaml_data, keys_to_exclude)

            elif type == 'nested':
                artifacts = []
                GITHUB_TOKEN = os.environ.get('GITHUB_TOKEN')
                headers = {'Authorization': f'Bearer {GITHUB_TOKEN}'}
                url = f'https://api.github.com/repos/TessellDevelopment/{REPO}/pulls/{PR_ID}/files'
                res = requests.get(url, headers=headers)
                files_data = res.json()
        
                modified_folders = set()
                for file_data in files_data:
                    file_path = file_data['filename']
                    folder_path = '/'.join(file_path.split('/')[:-1])  
                    modified_folders.add(folder_path)
        
                print("Modified folders:")
                for folder in modified_folders:
                    if '.github' in folder or len(folder) == 0:
                        continue
                    print(folder)  
                    path = f'./{folder}/convoy.yaml'
                    with open(path, 'r') as module_content:
                        module_data = yaml.safe_load(module_content)
                    data = {
                        "name": folder,
                        "convoyConfig": module_data
                    } 
                    artifacts.append(data) 
                artifactMetadata["artifacts"] = artifacts
            else:
                print(f"Artifact Type is {type}. Skipping this step.")
                exit(0)
            return artifactMetadata
            
          def post_request(payload):
            API_URL = os.environ.get('API_URL')
            CONVOY_AUTH_TOKEN = os.environ.get('USER')+':'+ os.environ.get('GITHUB_TOKEN')
            CONVOY_AUTH_TOKEN = base64.b64encode(CONVOY_AUTH_TOKEN.encode('utf-8')).decode('utf-8')
            headers = {
              'Authorization': f'Bearer {CONVOY_AUTH_TOKEN}',
              'Content-Type': 'application/json'
            }
            max_retries = 3
            retry_delay = 5 
        
            for _ in range(max_retries):
                response = requests.post(API_URL, json=payload, headers=headers)
                if response.status_code == 200 or response.status_code == 409:
                    print(response.status_code)
                    print(response.text)
                    break
                else:
                    print(response.status_code)
                    print(response.text)
                    print(f"Retrying... ({max_retries - _} attempts left)")
                    time.sleep(retry_delay)
            else:
                print("API request failed after retries.")
                exit(1)
            print("POST request Complete")
            return
            
          REPO = os.environ.get('REPO')
          COMMIT_HASH = os.environ.get('COMMIT_HASH')
          BASE_BRANCH = os.environ.get('BASE_BRANCH')
          PR_ID = os.environ.get('PR_ID')
          TAG = os.environ.get('TAG')
          
          COMMIT_MESSAGE = subprocess.check_output(['git','log','--format=%B','-n','1'])
          COMMIT_MESSAGE = COMMIT_MESSAGE.decode('utf-8')
          try:
            with open('convoy.yaml', 'r') as yaml_file:
                yaml_data = yaml.safe_load(yaml_file)
          except FileNotFoundError:
              print(f"YAML file not found. Skipping this step.")
              exit(0)
          type = yaml_data.get('artifactType') 
          payload = { 
            "repoName": REPO,
            "commitHash": COMMIT_HASH,
            "commitMessage": COMMIT_MESSAGE,
            "baseBranch": BASE_BRANCH,
            "tag": TAG,
            "pullRequestId": PR_ID,
          }
          payload["artifactMetadata"] = get_artifact_metadata(yaml_data,type)
          print(f"Payload: {payload}")
          post_request(payload)
          EOF

          
      # - name: Slack Notification
      #   uses: act10ns/slack@v1.5.0
      #   if: failure()
      #   with:
      #     status: ${{ job.status }}
      #     steps: ${{ toJson(steps) }}
      #     channel: ${{ secrets.CONVOY_ALERTS_SLACK_CHANNEL }}