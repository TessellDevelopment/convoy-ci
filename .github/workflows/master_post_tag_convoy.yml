---
name: Create Tag POST API to Convoy
on:
  workflow_call:
    inputs:
      tag:
        description: 'Tag created during create-tag'
        required: true
        type: string
      uses_custom_version:
        description: 'Key for using version as tag'
        required: true
        type: string

jobs:
  
  push-commit-details-to-convoy: 
    runs-on: non-build
    env:
      TAG: "${{inputs.tag}}"
      USES_CUSTOM_VERSION: "${{inputs.uses_custom_version}}"
      SLACK_WEBHOOK_URL: ${{ secrets.CONVOY_ALERTS_SLACK_URL }}
    steps:
      - uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      - name: POST API to Convoy
        env:
          API_URL: http://${{vars.CONVOY_DEV_API_ENDPOINT}}/devops/git-metadata/commits
          API_KEY: ${{secrets.CONVOY_AUTH_TOKEN}}
          COMMIT_HASH: "${{github.sha}}"
          COMMITTED_AT: "${{github.event.pull_request.merged_at}}"
          USES_CUSTOM_VERSION: "${{env.USES_CUSTOM_VERSION}}"
          REPO: "${{github.event.pull_request.base.repo.name}}"
          TAG: "${{env.TAG}}"
          BASE_BRANCH: "${{github.event.pull_request.base.ref}}"
          PR_ID: "${{github.event.number}}"
          GITHUB_TOKEN: ${{ secrets.CIPIPELINE_GITHUB_TOKEN }}
          OWNER: ${{github.repository_owner}}
          USER: ${{secrets.CIPIPELINE_GITHUB_USER}}
        run: |
          python3 - <<EOF
          
          import yaml
          import requests
          import os
          import time
          import base64
          import subprocess
          from datetime import datetime
            
          def post_request(payload):
            API_URL = os.environ.get('API_URL')
            API_KEY = os.environ.get('API_KEY')
            headers = {
              'x-api-key': API_KEY,
              'Content-Type': 'application/json'
            }
            max_retries = 3
            retry_delay = 5 

            for _ in range(max_retries):
                response = requests.post(API_URL, json=payload, headers=headers)
                if response.status_code == 200 or response.status_code == 409:
                    print(response.status_code)
                    print(response.text)
                    break
                else:
                    print(response.status_code)
                    print(response.text)
                    print(f"Retrying... ({max_retries - _} attempts left)")
                    time.sleep(retry_delay)
            else:
                print("API request failed after retries.")
                exit(1)
            print("POST request Complete")
            return
            
          REPO = os.environ.get('REPO')
          OWNER = os.environ.get('OWNER')
          GITHUB_TOKEN = os.environ.get('GITHUB_TOKEN')
          COMMIT_HASH = os.environ.get('COMMIT_HASH')
          USES_CUSTOM_VERSION = os.environ.get('USES_CUSTOM_VERSION')
          BASE_BRANCH = os.environ.get('BASE_BRANCH')
          PR_ID = os.environ.get('PR_ID')
          TAG = os.environ.get('TAG')
          COMMIT_MESSAGE = subprocess.check_output(['git','log','--pretty=format:%s','-n','1'])
          COMMIT_MESSAGE = COMMIT_MESSAGE.decode('utf-8')
          COMMITTED_AT = os.environ.get('COMMITTED_AT')
          COMMITTED_AT = datetime.strptime(COMMITTED_AT, "%Y-%m-%dT%H:%M:%SZ").strftime("%Y-%m-%d %H:%M:%S")

          try:
            with open('convoy.yaml', 'r') as yaml_file:
                yaml_data = yaml.safe_load(yaml_file)
          except FileNotFoundError:
              print(f"YAML file not found. Skipping this step.")
              exit(0)
          APP_GROUP = yaml_data.get('appGroup')
          payload = { 
            "repoName": REPO,
            "appGroup": APP_GROUP,
            "commitHash": COMMIT_HASH[:7],
            "commitMessage": COMMIT_MESSAGE,
            "committedAt": COMMITTED_AT,
            "baseBranch": BASE_BRANCH,
            "usesCustomVersion": USES_CUSTOM_VERSION == "true",
            "tag": TAG,
            "pullRequestId": PR_ID,
          }
          print(f"Payload: {payload}")
          post_request(payload)
          EOF

      - name: Slack Notification
        uses: act10ns/slack@v2.0.0
        with:
            status: ${{ job.status }}
            steps: ${{ toJson(steps) }}
            channel: ${{ secrets.CONVOY_ALERTS_SLACK_CHANNEL  }}
        if: failure()
          
