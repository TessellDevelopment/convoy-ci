# This is a basic workflow to help you get started with Actions
name: Tessell Pipelines Code Build

# Controls when the workflow will run
on:
  workflow_call:
    inputs:
      java_17:
        description: 'Making runner to run this workflow on java-17'
        required: false
        type: string
        default: 'false'
        
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: self-hosted
    outputs:
      mail_id_output: ${{ steps.mail_info.outputs.mail_id }}
      mail_subject_output: ${{ steps.mail_info.outputs.mail_subject}}
      mail_body_output: ${{ steps.mail_info.outputs.mail_body }}
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL  }}
      NEXUS_PULL_REPOS_M2: "tessell-m2-development"
      DOCKERHUB_ORG: "tesselldev"
    steps:
      - uses: actions/checkout@v3
      - name: Get branch name
        shell: bash
        run: |
          echo "SOURCE_BRANCH=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV
          echo "DOCKER_IMAGE_NAME=$(echo ${GITHUB_REPOSITORY} | cut -f2 -d'/')" >> $GITHUB_ENV

      - name: Set Pull repository
        if: ${{ startsWith(env.SOURCE_BRANCH,'rel-') || env.SOURCE_BRANCH == 'main' }}
        shell: bash
        run: |
          echo "NEXUS_PULL_REPOS_M2=tessell-m2-component" >> $GITHUB_ENV
          echo "DOCKERHUB_ORG=tessellprod" >> $GITHUB_ENV
          
      - name: Set java home for java_17
        if:  ${{ inputs.java_17 == 'true' }} 
        shell: bash
        run: |
          echo "JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64" >> $GITHUB_ENV
          echo "PATH=/usr/lib/jvm/java-17-openjdk-amd64/bin:$PATH" >> $GITHUB_ENV
          
      - name: check whether java varibale 
        if:  ${{ inputs.java_17 == 'true' }} 
        shell: bash
        run: |
          echo $JAVA_HOME
          echo $PATH
          java -version

      - name: Login to docker
        uses: docker/login-action@v2.1.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build with Gradle
        if: ${{ !startsWith(env.SOURCE_BRANCH,'rel-') && env.SOURCE_BRANCH != 'main' }}
        run: |
          ./gradlew mavenPackage docker --console plain \
            -Pnexus_username="${{ secrets.CIPIPELINE_NEXUS_USERNAME }}" \
            -Pnexus_password="${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}"
        shell: bash

      

      - name: Build and publish
        if: ${{ startsWith(env.SOURCE_BRANCH,'rel-') || env.SOURCE_BRANCH == 'main' }}
        run: |
          ./gradlew mavenPackage dockerTag --console plain \
            -Pnexus_username="${{ secrets.CIPIPELINE_NEXUS_USERNAME }}" \
            -Pnexus_password="${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}" \
            -Pnexus_pull_repo_m2="${{ env.NEXUS_PULL_REPOS_M2 }}" \
            -Pdockerhub_org="${{ env.DOCKERHUB_ORG }}"
            
        
            
      - name: Find latest tag
        uses: actions/github-script@v6.3.3
        id: latest_tag
        if: ${{ startsWith(env.SOURCE_BRANCH,'rel-') || env.SOURCE_BRANCH == 'main' }}
        with:
          github-token: ${{ secrets.PIPELINES_REPO_TOKEN  }}
          script: |
            console.log("Tags are " + "${{ env.TAGS }}")
            latest_tag = '0.0.0'
            // process multiple tags if any
            tags = "${{ env.TAGS }}".split(' ')
            if (tags.length == 1) {
              console.log("There is only one tag. Using it." + tags[0])
              latest_tag = tags[0]
            } else {
              if ("${{ env.SOURCE_BRANCH }}" == "main") {
                for (i in tags) {
                  tag = tags[i]
                  console.log("Checking tag " + tag)
                  if (latest_tag == null) {
                    latest_tag = tag
                    continue
                  }
                  latest_parts = latest_tag.split(".")
                  tag_parts = tag.split(".")
                  for (i = 0; i < tag_parts.length; i++) {
                    if (parseInt(tag_parts[i]) < parseInt(latest_parts[i])) {
                      console.log("Skipping " + tag)
                      break
                    }
                    if (parseInt(tag_parts[i]) > parseInt(latest_parts[i])) {
                      latest_tag = tag
                      console.log("Setting " + latest_tag)
                      break
                    }
                  }
                }
              } else {
                tag_base = "${{ env.SOURCE_BRANCH }}".substring(4).split(".").slice(0,2)
                latest_tag = tag_base.join(".") + ".0"
                for (i in tags) {
                  tag = tags[i]
                  console.log("branch - Checking tag " + tag)
                  tag_parts = tag.split(".")
                  if (tag_base[0] == tag_parts[0] && tag_base[1] == tag_parts[1]) {
                    latest_parts = latest_tag.split(".")
                    if (parseInt(latest_parts[2]) < parseInt(tag_parts[2])) {
                      latest_tag = tag
                    }
                  }
                }
              }
            }
            console.log("Latest tag: " + latest_tag)
            // check if we have
            if ( latest_tag == '' || latest_tag === undefined) {
              console.log("Couldn't determine the latest tag, exiting. Retry manually..")
              process.exit(1);
            }
            core.setOutput('tag_ref', latest_tag)
            
      - name: tagging docker image with scan
        run: |
          docker tag ${{ env.DOCKER_IMAGE_NAME }}:latest ${{ env.DOCKER_IMAGE_NAME }}:scan
          docker tag ${{ env.DOCKER_IMAGE_NAME }}:latest ${{ env.DOCKERHUB_ORG }}/${{ env.DOCKER_IMAGE_NAME }}:${{ steps.latest_tag.outputs.tag_ref }}


      - name: Docker image scan
        id: docker-image-scan
        uses: azure/container-scan@v0.1
        with:
           severity-threshold: CRITICAL
           image-name: ${{ env.DOCKER_IMAGE_NAME }}:scan
           username: ${{ secrets.DOCKER_USERNAME }}
           password: ${{ secrets.DOCKER_PASSWORD }}   
           
      - name: upload image scan report 
        uses: actions/upload-artifact@v3
        with:
           name: image-scan-report
           path: ${{ steps.docker-image-scan.outputs.scan-report-path }}
           
     
      - name: Sign and push docker image
        if: ${{ startsWith(env.SOURCE_BRANCH,'rel-') || env.SOURCE_BRANCH == 'main' }}
        uses: sudo-bot/action-docker-sign@latest
        with:
          image-ref: "${{ env.DOCKERHUB_ORG }}/${{ env.DOCKER_IMAGE_NAME }}:${{ steps.latest_tag.outputs.tag_ref }}"
          private-key-id: ${{ secrets.DCT_PRIVATE_KEY_ID }}
          private-key: ${{ secrets.DCT_PRIVATE_KEY }}
          private-key-passphrase: ${{ secrets.DCT_PRIVATE_KEY_PASSPHRASE }}  
          

      - name: Slack Notification
        uses: act10ns/slack@v1.5.0
        if: ${{ failure() && (startsWith(env.SOURCE_BRANCH,'rel-') || env.SOURCE_BRANCH == 'main') }}
        with:
           status: ${{ job.status }}
           steps: ${{ toJson(steps) }}
           channel: ${{ secrets.SLACK_DEVOPS_CHANNEL  }}

      - name: Get PR-Author,subject & body to send email
        if: ${{ failure() && contains(github.event.pull_request.head.ref, 'double_commit') }}
        run: |
          echo "MAILID=$(git log -1 '${{ github.event.pull_request.head.sha }}' --pretty=format:'%ae')" >> $GITHUB_ENV
          echo "BODY=JOB_STATUS : ${{ job.status }} %0A WORKFLOW : ${{ github.workflow }} %0A EVENT : ${{ github.event_name }} %0A BRANCH : ${{ env.SOURCE_BRANCH }} %0A COMMIT_ID : ${{ github.sha }} %0A REPO : ${{ github.repository }}" >> $GITHUB_ENV
 
      - name: sending output
        if: ${{ failure() && contains(github.event.pull_request.head.ref, 'double_commit') }}
        id: mail_info
        run: |
          echo "mail_id=${{ env.MAILID }}" >> $GITHUB_OUTPUT
          echo "mail_subject=***${{ job.status }}*** || ${{ github.workflow }}  ||  ${{ github.repository }} " >> $GITHUB_OUTPUT
          echo "mail_body=${{ env.BODY }}" >> $GITHUB_OUTPUT
        
  send-mail:
    uses: ./.github/workflows/email_dc.yaml
    needs: build
    with:
      subject: ${{ needs.build.outputs.mail_subject_output }}
      body: ${{ needs.build.outputs.mail_body_output }} 
      to: ${{ needs.build.outputs.mail_id_output }}
    secrets: inherit
    if: ${{ failure() && contains(github.event.pull_request.head.ref, 'double_commit') }}

            
