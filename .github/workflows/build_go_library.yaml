---
# This is a basic workflow to help you get started with Actions
name: Tessell Pipelines Code Build

# Controls when the workflow will run
on:
  workflow_call:
    inputs:
      exporter_config:
        description: 'dictonary input for oracle exporter'
        required: false
        type: string
        default: '{}'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: self-hosted
    outputs:
      mail_id_output: ${{ steps.mail_info.outputs.mail_id }}
      mail_subject_output: ${{ steps.mail_info.outputs.mail_subject}}
      mail_body_output: ${{ steps.mail_info.outputs.mail_body }}
      
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL  }}
      NEXUS_SERVER: nexus.tessell.cloud
      NEXUS_PULL_REPOS_M2: tessell-m2-development
      NEXUS_PUSH_REPOS_M2: tessell-repos-m2-development
      GOPATH: /home/github/go
      GITHUB_USER: ${{ secrets.CIPIPELINE_NEXUS_USERNAME }}
      GITHUB_TOKEN: ${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}
      OS_NAMES: "linux windows"
    steps:
      - name: Get branch name
        shell: bash
        run: |
          echo "SOURCE_BRANCH=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV
          echo "DOCKER_IMAGE_NAME=$(echo ${GITHUB_REPOSITORY} | cut -f2 -d'/')" >> $GITHUB_ENV
          
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: getting the values
        run: |
          import json
          exporter_config = json.loads('${{ inputs.exporter_config }}')
          for os_type in exporter_config:
            print("{engine}-{os_type}-{exporter_config[os_type]}".format(engine=exporter_config['engine'], os_type=os_type))
          
          
    

