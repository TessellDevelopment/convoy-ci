---
name: Tessell Pipelines Code Build Pre Merge
on:
  workflow_call:
    inputs:
      type:
        description: 'This is used to determine build type'
        required: true
        type: string

jobs:

  build-ui:
    if: ${{ inputs.type == 'ui-build' }}
    runs-on: ui-build
    env:
      CI_BRANCH: TDEVOPS-3633_convoy_ci_on_3693
      CHANNEL_ID: ${{vars.CONVOY_ALERTS_SLACK_ID}}
      CODE_COVERAGE_S3: ${{vars.CODE_COVERAGE_S3}}
      CONVOY_API_KEY: ${{secrets.CONVOY_AUTH_TOKEN}}
      DEVOPS_TEAM: ${{vars.DEVOPS_TEAM_SLACK_ID}}
      DOCKERHUB_ORG: ${{vars.DOCKERHUB_ORG}}
      GITHUB_TOKEN: ${{ secrets.CIPIPELINE_GITHUB_TOKEN }}
      GITHUB_USER: ${{ secrets.CIPIPELINE_GITHUB_USER }}
      IMAGE_SCAN_API_URL: http://${{vars.CONVOY_API_ENDPOINT}}/devops/code/vulnerabilities/validate
      NEXUS_PASSWORD: ${{secrets.CIPIPELINE_NEXUS_PASSWORD}}
      NEXUS_PROTOCOL: ${{vars.NEXUS_PROTOCOL_PUBLIC}}
      NEXUS_PULL_REPOS_M2: tessell-m2-development
      NEXUS_PULL_REPOS_PY: tessell-py-development
      NEXUS_PUSH_REPOS_M2: ${{ vars.NEXUS_PUSH_REPOS_M2 }}
      NEXUS_PUSH_REPOS_PY: ${{ vars.NEXUS_PUSH_REPOS_PY }}
      NEXUS_PUSH_REPOS_NPM: ${{vars.NEXUS_PUSH_REPOS_NPM}}
      NEXUS_REPO_NPM: tessell-repos-npm-development
      NEXUS_SERVER_ENDPOINT: ${{vars.NEXUS_SERVER_ENDPOINT_PUBLIC}}
      NEXUS_USERNAME: ${{secrets.CIPIPELINE_NEXUS_USERNAME}}
      REPO: "${{github.repository}}"
      SLACK_TOKEN: ${{secrets.SLACK_TOKEN}}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      TESSELL_UI_ENV_SECRET: "${{secrets.TESSELL_UI_ENV_SECRET}}"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      - name: Setup CI Scripts
        run: |
          cd ~/convoy-ci
          git checkout main
          git pull
          git checkout ${{env.CI_BRANCH}}
          git pull
          cd ~-
          cp -r ~/convoy-ci/.github/ci-scripts ./ci-scripts

      - name: Build
        shell: bash
        run: |
          build() {
            type="$1"
            check=$(grep "$type" convoy.yaml)
            if [[ -z "$check" ]]; then
              return
            fi
            version=$(yq '.version' convoy.yaml)
            yq e ".generates.$type[] | [.name, .buildFunction, .extension, .dockerFile] | @csv" convoy.yaml | sed 's/,/ /g' > artifacts.txt
            lineNumber=1
            while :; do
              echo ------------------------------
              artifactData=$(sed "$lineNumber!d" artifacts.txt)
              if [[ -z "$artifactData" ]]; then
                break
              fi
              read -r name buildFunction ext file <<< "$artifactData"
              echo "Name: $name"
              echo "buildFunction: $buildFunction"
              echo "Ext: $ext"
              echo "Version: $version"
              echo "dockerFile: $file"
              $buildFunction $name $ext $version $file 
              echo "$type $name done"
              echo ------------------------------
              lineNumber=$((lineNumber+1))
            done
            rm artifacts.txt
          }
          set +e
          source ./ci-scripts/bash/functions-for-build
          build "artifacts"
          build "dockerImages"
          build "helmCharts"
          parseCoverageReport
  
  build-ubuntu-latest:
    if: ${{ inputs.type == 'ubuntu-latest' }}
    runs-on: ubuntu-latest
    env:
      CI_BRANCH: TDEVOPS-3633_convoy_ci_on_3693
      CHANNEL_ID: ${{vars.CONVOY_ALERTS_SLACK_ID}}
      CODE_COVERAGE_S3: ${{vars.CODE_COVERAGE_S3}}
      CONVOY_API_KEY: ${{secrets.CONVOY_AUTH_TOKEN}}
      DEVOPS_TEAM: ${{vars.DEVOPS_TEAM_SLACK_ID}}
      DOCKERHUB_ORG: ${{vars.DOCKERHUB_ORG}}
      GITHUB_TOKEN: ${{ secrets.CIPIPELINE_GITHUB_TOKEN }}
      GITHUB_USER: ${{ secrets.CIPIPELINE_GITHUB_USER }}
      IMAGE_SCAN_API_URL: http://${{vars.CONVOY_PUBLIC_API_ENDPOINT}}/devops/code/vulnerabilities/validate
      NEXUS_PASSWORD: ${{secrets.CIPIPELINE_NEXUS_PASSWORD}}
      NEXUS_PROTOCOL: ${{vars.NEXUS_PROTOCOL_PUBLIC}}
      NEXUS_PULL_REPOS_M2: tessell-m2-development
      NEXUS_PULL_REPOS_PY: tessell-py-development
      NEXUS_PUSH_REPOS_M2: ${{ vars.NEXUS_PUSH_REPOS_M2 }}
      NEXUS_PUSH_REPOS_PY: ${{ vars.NEXUS_PUSH_REPOS_PY }}
      NEXUS_PUSH_REPOS_NPM: ${{vars.NEXUS_PUSH_REPOS_NPM}}
      NEXUS_REPO_NPM: tessell-repos-npm-development
      NEXUS_SERVER_ENDPOINT: ${{vars.NEXUS_SERVER_ENDPOINT_PUBLIC}}
      NEXUS_USERNAME: ${{secrets.CIPIPELINE_NEXUS_USERNAME}}
      REPO: "${{github.repository}}"
      SLACK_TOKEN: ${{secrets.SLACK_TOKEN}}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5.0.0
        with:
          python-version: 3.9

      - name: Setup Go
        uses: actions/setup-go@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v4.0.0
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3.0.0

      - name: Login to docker
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Setup CI Scripts
        run: |
          git clone https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com/TessellDevelopment/convoy-ci.git
          cd convoy-ci
          git checkout ${{env.CI_BRANCH}}
          git pull
          cd ..
          cp -r ./convoy-ci/.github/ci-scripts ./ci-scripts

      - name: Create pip conf
        run: |
          createPipConf() {
            echo "[global]" > pip.conf
            echo "index =  ${{env.NEXUS_PROTOCOL}}://${{ secrets.CIPIPELINE_NEXUS_USERNAME }}:${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}@${{ env.NEXUS_SERVER_ENDPOINT }}/repository/${{ env.NEXUS_PULL_REPOS_PY }}/simple" >> pip.conf
            echo "index-url = ${{env.NEXUS_PROTOCOL}}://${{ secrets.CIPIPELINE_NEXUS_USERNAME }}:${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}@${{ env.NEXUS_SERVER_ENDPOINT }}/repository/${{ env.NEXUS_PULL_REPOS_PY }}/simple" >> pip.conf
            echo "extra-index-url = https://pypi.org/simple" >> pip.conf
            sudo cp pip.conf /etc/pip.conf
            cat /etc/pip.conf
          }
          createPipConf
        shell: bash

      - name: Install dependencies
        run: |
          source ./ci-scripts/bash/functions-for-build
          installPythonDependencies

      - name: Setup Trivy and Dockle
        run: |
          setupTrivyDockle() {
            wget https://github.com/aquasecurity/trivy/releases/download/v0.48.3/trivy_0.48.3_Linux-64bit.deb
            sudo dpkg -i trivy_0.48.3_Linux-64bit.deb
            curl -L -o dockle.deb https://github.com/goodwithtech/dockle/releases/download/v0.4.14/dockle_0.4.14_Linux-64bit.deb
            sudo dpkg -i dockle.deb && rm dockle.deb
            python -m pip install slack-sdk==3.26.2 --trusted-host ${{env.NEXUS_SERVER_ENDPOINT}};
          }
          setupTrivyDockle

      - name: Build
        shell: bash
        run: |
          elasticConf() {
            git config --global url."https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com".insteadOf "https://github.com"
            installGoDependencies
            git clone https://github.com/magefile/mage
            cd mage
            go run bootstrap.go
            cd ..
          }
          elasticBuild() {
            set -e
            IMAGE="$1"
            requiredInputs="1"
            validateInputs "$requiredInputs" "$@" 
            elasticConf
            echo "----------------------------------------------"
            echo "----------- Building Service -----------------"
            export GOPATH=/home/runner/go/bin
            export PATH=/go/bin:/usr/local/go/bin:/opt/maven/bin:/usr/lib/jvm/java-17-openjdk-amd64/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/home/runner/go/bin
            cd filebeat
            mage package
            cp ./build/golang-crossbuild/filebeat-linux-amd64 ./filebeat
            echo "----------------------------------------------"
            echo "------------ Building Image ------------------"
            docker build -t $IMAGE .
            cd ..
            elasticTarBuild
            set +e
          }
          elasticTarBuild() {
            echo "----------------------------------------------"
            echo "---------- Creating Tar Files -----------------"
            PACKAGES_DIR=./filebeat/build/distributions/
            mkdir -p $PACKAGES_DIR
            cp ./filebeat/tessell-filebeat-linux.yml $PACKAGES_DIR/filebeat.yml
            cp ./filebeat/build/golang-crossbuild/filebeat-linux-amd64 $PACKAGES_DIR/filebeat
            cp ./filebeat/filebeat.service $PACKAGES_DIR/filebeat.service
            pushd $PACKAGES_DIR
            tar -zcvf filebeat-linux.tar.gz filebeat.yml filebeat filebeat.service
            popd
            cp ./filebeat/tessell-filebeat-windows.yml $PACKAGES_DIR/filebeat.yml
            cp ./filebeat/build/golang-crossbuild/filebeat-windows-amd64.exe $PACKAGES_DIR/filebeat.exe 
            pushd $PACKAGES_DIR
            tar -zcvf filebeat-windows.tar.gz filebeat.yml filebeat.exe
            popd
          }
          gradlewPythonwheel() {
            ./gradlew pythonWheel docker --console plain \
              -Pnexus_username="${{ secrets.CIPIPELINE_NEXUS_USERNAME }}" \
              -Pnexus_password="${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}"
          }
          infraProvisionBuild() {
            set -e
            lintCheck
            IMAGE="$1"
            requiredInputs="1"
            validateInputs "$requiredInputs" "$@" 
            mkdir -p build/tools
            wget https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/6.0.0/openapi-generator-cli-6.0.0.jar -O build/tools/openapi-generator-cli-6.0.0.jar
            gradlewPythonwheel
            imageScan $IMAGE
            set +e
          }
          lintCheck() {
            flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
            flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          }
          pythonDockerBuild() {
            set -e
            IMAGE="$1"
            rm pip.conf
            lintCheck
            gradlewPythonwheel
            imageScan $IMAGE
            set +e
          }
          build() {
            type="$1"
            check=$(grep "$type" convoy.yaml)
            if [[ -z "$check" ]]; then
              return
            fi
            version=$(yq '.version' convoy.yaml)
            yq e ".generates.$type[] | [.name, .buildFunction, .extension, .dockerFile, .filePath, .baseImage] | @csv" convoy.yaml | sed 's/,/ /g' > artifacts.txt
            lineNumber=1
            while :; do
              echo ------------------------------
              artifactData=$(sed "$lineNumber!d" artifacts.txt)
              if [[ -z "$artifactData" ]]; then
                break
              fi
              read -r name buildFunction ext file filePath baseImage <<< "$artifactData"
              echo "Name: $name"
              echo "buildFunction: $buildFunction"
              echo "Ext: $ext"
              echo "Version: $version"
              echo "dockerFile: $file"
              echo "filePath: $filePath"
              echo "baseImage: $baseImage"
              $buildFunction "$name" "$ext" "$version" "$file" "$filePath" "$baseImage"
              echo "$type $name done"
              echo ------------------------------
              lineNumber=$((lineNumber+1))
            done
            rm artifacts.txt
          }
          set +e
          source ./ci-scripts/bash/functions-for-build
          build "artifacts"
          build "dockerImages"
          build "helmCharts"
          parseCoverageReport

  build-amd:
    if: ${{ inputs.type == 'amd' }}
    runs-on: self-hosted
    env:
      ARTIFACTS_UPLOAD_ACCESS_KEY: ${{ secrets.ARTIFACTS_UPLOAD_ACCESS_KEY }}
      ARTIFACTS_UPLOAD_SECRET_KEY: ${{ secrets.ARTIFACTS_UPLOAD_SECRET_KEY }}
      AWS_ACCOUNT_TESSELL_COMMON_INFRA: ${{vars.AWS_ACCOUNT_TESSELL_COMMON_INFRA}}
      BRANCH_NAME: ${{ github.event.pull_request.head.ref }}
      CHANNEL_ID: ${{vars.CONVOY_ALERTS_SLACK_ID}}
      CI_BRANCH: TDEVOPS-3633_convoy_ci_on_3693
      CI_PHASE: preMerge
      CODE_COVERAGE_S3: ${{vars.CODE_COVERAGE_S3}}
      COMMIT_STATUS_API_URL: http://${{vars.CONVOY_API_ENDPOINT}}/devops/git-metadata
      CONVOY_API_KEY: ${{secrets.CONVOY_AUTH_TOKEN}}
      DEVOPS_TEAM: ${{vars.DEVOPS_TEAM_SLACK_ID}}
      DEVQA_INFRA_ACCESS_KEY: ${{ secrets.DEVQA_INFRA_ACCESS_KEY }}
      DEVQA_INFRA_SECRET_KEY: ${{ secrets.DEVQA_INFRA_SECRET_KEY }}
      DOCKERHUB_ORG: ${{vars.DOCKERHUB_ORG}}
      GIT_BASE_REF: ${{ github.base_ref }}
      GITHUB_TOKEN: ${{ secrets.CIPIPELINE_GITHUB_TOKEN }}
      GITHUB_USER: ${{ secrets.CIPIPELINE_GITHUB_USER }}
      GITHUB_BASE_REF: ${{ github.base_ref }}
      GH_API_URL: ${{vars.GH_API_URL}}
      GOPATH: /home/github/go
      IMAGE_SCAN_API_URL: http://${{vars.CONVOY_API_ENDPOINT}}/devops/code/vulnerabilities/validate
      NAMESPACE: "convoy"
      NEXUS_PASSWORD: ${{secrets.CIPIPELINE_NEXUS_PASSWORD}}
      NEXUS_PROTOCOL: ${{vars.NEXUS_PROTOCOL_LOCAL}}
      NEXUS_PULL_REPOS_M2: tessell-m2-development
      NEXUS_PULL_REPOS_PY: tessell-py-development
      NEXUS_PUSH_REPOS_M2: ${{ vars.NEXUS_PUSH_REPOS_M2 }}
      NEXUS_PUSH_REPOS_PY: ${{ vars.NEXUS_PUSH_REPOS_PY }}
      NEXUS_PUSH_REPOS_NPM: ${{vars.NEXUS_PUSH_REPOS_NPM}}
      NEXUS_REPO_NPM: tessell-repos-npm-development
      NEXUS_SERVER_ENDPOINT: ${{vars.NEXUS_SERVER_ENDPOINT_LOCAL}}
      NEXUS_USERNAME: ${{secrets.CIPIPELINE_NEXUS_USERNAME}}
      PACKER_AWS_ACCESS_KEY_ID: ${{ secrets.PACKER_AWS_ACCESS_KEY_ID }}
      PACKER_AWS_SECRET_ACCESS_KEY: ${{ secrets.PACKER_AWS_SECRET_ACCESS_KEY }}
      PACKER_AZURE_CLIENT_ID: ${{ secrets.PACKER_AZURE_CLIENT_ID }}
      PACKER_AZURE_CLIENT_SECRET: ${{ secrets.PACKER_AZURE_CLIENT_SECRET }}
      PACKER_AZURE_TENANT_ID: ${{ secrets.PACKER_AZURE_TENANT_ID }}
      PACKER_AZURE_SUBSCRIPTION_ID: ${{ secrets.PACKER_AZURE_SUBSCRIPTION_ID }}
      PR_NUMBER: ${{ github.event.pull_request.number }}
      REPO: "${{github.repository}}"
      REPOSITORY: "${{github.repository}}"
      SLACK_TOKEN: ${{secrets.SLACK_TOKEN}}
      SOURCE_BRANCH: ${{ github.head_ref }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      TS_API_KEY: ${{ secrets.TS_API_KEY }}
      TS_TAILNET: ${{ secrets.TS_TAILNET }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      - name: Setup CI Scripts
        run: |
          cd ~/convoy-ci
          git checkout main
          git pull
          git checkout ${{env.CI_BRANCH}}
          git pull
          cd ~-
          cp -r ~/convoy-ci/.github/ci-scripts ./ci-scripts

      # - name: Check specific file changes
      #   id: changed-files
      #   uses: tj-actions/changed-files@v42.0.2
      #   with:
      #     files: |
      #       Chart.yaml
      #       services/**
      #       scripts/Dockerfile
      #       scripts/initializeAutomation.sh

      - name: Check All file changes
        id: changed-files-all
        uses: step-security/changed-files@v45.0.1

      - name: Login to docker
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build
        shell: bash
        run: |
          agentBuild() {
            set -e
            installGoDependencies
            ARTIFACT="$1"
            requiredInputs="1"
            validateInputs "$requiredInputs" "$@" 
            OS=$(echo "$ARTIFACT" | awk -F'[-]' '{print $4}')
            SERVICE=$(echo "$ARTIFACT" | awk -F'[-]' '{print $2}')
            echo $OS
            echo $SERVICE
            echo "Building Service"
            make os=$OS nexus_protocol=${{env.NEXUS_PROTOCOL}} nexus_server_endpoint=${{env.NEXUS_SERVER_ENDPOINT}} $SERVICE
            set +e
          }
          cloneHelmTemplate() {
            GITHUB_WORKSPACE=$(pwd)
            CHART_GITHUB_LOCATION=$GITHUB_WORKSPACE
            TEMPLATE_REPO_GITHUB_LOCATION=$GITHUB_WORKSPACE/../convoy-helm-template
            echo "$CHART_GITHUB_LOCATION"
            echo "$TEMPLATE_REPO_GITHUB_LOCATION"
            echo "TEMPLATE_REPO_GITHUB_LOCATION=$TEMPLATE_REPO_GITHUB_LOCATION"
            echo "Cloning convoy-helm-template"
            rm -rf $TEMPLATE_REPO_GITHUB_LOCATION
            template_version=$(yq --exit-status '.convoy-helm-template' Chart.yaml)
            if [ $? -eq 0 ]; then
                echo "convoy-helm-template version: $template_version"
            else
                echo "convoy-helm-template version not found.Exiting."
                exit 1
            fi
            git clone --branch $template_version https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com/${{github.repository_owner}}/convoy-helm-template.git $TEMPLATE_REPO_GITHUB_LOCATION
            echo "Copying the service values file"
            cp -r $CHART_GITHUB_LOCATION/services/* $TEMPLATE_REPO_GITHUB_LOCATION/helm-chart/values/apps/
            cp -r $CHART_GITHUB_LOCATION/Chart.yaml $TEMPLATE_REPO_GITHUB_LOCATION/helm-chart/Chart.yaml
            set -e
            cd $TEMPLATE_REPO_GITHUB_LOCATION/scripts
            ls -lrta ../helm-chart/values/apps/
          }
          configureJava() {
            echo "JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64" >> $GITHUB_ENV
            echo "PATH=/usr/lib/jvm/java-17-openjdk-amd64/bin:$PATH" >> $GITHUB_ENV
          }
          dbPluginBuild() {
            set -e
            ARTIFACT="$1"
            requiredInputs="1"
            validateInputs "$requiredInputs" "$@" 
            installPythonDependencies $ARTIFACT
            lintCheck
            gradlewPackagePlugin
            set +e
          }
          functionBuild() {
            set -e
            ARTIFACT="$1"
            requiredInputs="1"
            validateInputs "$requiredInputs" "$@" 
            changed_dir=false
            if [ ! -f "Makefile" ]; then
              cd tessell; 
              changed_dir=true;
            fi
            OS=$(echo "$ARTIFACT" | awk -F'[-]' '{print $4}')
            CLOUD=$(echo "$ARTIFACT" | awk -F'[-]' '{print $5}')
            echo $OS
            echo $CLOUD
            make OS=$OS CLOUD=$CLOUD nexus_protocol=${{env.NEXUS_PROTOCOL}} nexus_server_endpoint=${{env.NEXUS_SERVER_ENDPOINT}} package
            if $changed_dir; then
              cd ..;
            fi
            set +e
          }
          gradlewMaven() {
            set -e
            ./gradlew mavenPackage --refresh-dependencies --console plain \
              -Pnexus_push_username="${{ secrets.CIPIPELINE_NEXUS_USERNAME }}" \
              -Pnexus_push_password="${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}" \
              -Pnexus_username="${{ secrets.CIPIPELINE_NEXUS_USERNAME }}" \
              -Pnexus_password="${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}"
            set +e
          }
          gradlewMavenDocker() {
            ./gradlew mavenPackage docker --console plain \
              -Pnexus_username="${{ secrets.CIPIPELINE_NEXUS_USERNAME }}" \
              -Pnexus_password="${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}" \
              -Pnexus_pull_repo_m2="${{ env.NEXUS_PULL_REPOS_M2 }}" \
              -Pdockerhub_org="${{ env.DOCKERHUB_ORG }}"
          }
          gradlewPackagePlugin() {
            ./gradlew packagePlugin --console plain -Pversion=0.0.0 \
              -Pnexus_push_username="${{ secrets.CIPIPELINE_NEXUS_USERNAME }}" \
              -Pnexus_push_password="${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}" \
              -Pnexus_username="${{ secrets.CIPIPELINE_NEXUS_USERNAME }}" \
              -Pnexus_password="${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}"
          }
          gradlewPythonwheel() {
            set -e
            ./gradlew pythonWheel --console plain \
              -Pnexus_username="${{ secrets.CIPIPELINE_NEXUS_USERNAME }}" \
              -Pnexus_password="${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}"
            set +e
          }
          gradlewDocker() {
            set -e
            ./gradlew pythonWheel docker --console plain \
              -Pnexus_username="${{ secrets.CIPIPELINE_NEXUS_USERNAME }}" \
              -Pnexus_password="${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}"
            set +e
          }
          lintCheck() {
            flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
            flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          }
          pythonDockerBuild() {
            set -e
            IMAGE="$1"
            lintCheck
            gradlewDocker
            imageScan $IMAGE
            set +e
          }
          helmChartBuild() {
            set -e
            CHART_NAME="$1"
            requiredInputs="1"
            validateInputs "$requiredInputs" "$@" 
            cd scripts
            ./package-and-push --no-push -n $CHART_NAME -v 0.0.0
            cd ..
            set +e
          }
          helmTemplateBuild() {
            # if [[ ${{steps.changed-files.outputs.any_modified}} == 'true' ]]; then
            set -e
            CHART_NAME="$1"
            requiredInputs="1"
            validateInputs "$requiredInputs" "$@" 
            cloneHelmTemplate
            echo "Running package and push"
            ./package-and-push --no-push -n $CHART_NAME -v 0.0.0
            cd $GITHUB_WORKSPACE
            set +e
            # fi
          }
          javaApiClientBuild() {
            set -e
            mvn package -Drevision=0.0.0 -Dnexus-url=${NEXUS_PROTOCOL}://${NEXUS_SERVER_ENDPOINT}/repository/${NEXUS_PUSH_REPOS_M2}
            set +e
          }
          javaDockerBuild() {
            set -e
            IMAGE="$1"
            requiredInputs="1"
            validateInputs "$requiredInputs" "$@" 
            configureJava
            gradlewMavenDocker
            imageScan $IMAGE
            set +e
          }
          javaLibraryBuild() {
            set -e
            configureJava
            gradlewMaven
            set +e
          }
          lintCheck() {
            flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
            flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          }
          makeBuild() {
            set -e
            installGoDependencies
            make service
            ARTIFACT="$1"
            requiredInputs="1"
            validateInputs "$requiredInputs" "$@" 
            OS=$(echo "$ARTIFACT" | awk -F'[-]' '{print $3}')
            make os=$OS pushprox-client
            make clean
            ls -lrta client-package
            set +e
          }
          makeImage() {
            set -e
            IMAGE="$1"
            requiredInputs="1"
            validateInputs "$requiredInputs" "$@" 
            make image
            imageScan $IMAGE
            set +e
          }
          modifiedDir() {
            directories=$(echo ${{steps.changed-files-all.outputs.all_changed_and_modified_files}} | tr ' ' '\n' | awk -F'/' '{print $1}' | sort -u)
            directories=$(echo $directories | tr '\n' ' ')
            echo "$directories"
          }
          mvnwBuild() {
            set -e
            ./mvnw install -Dnative -DskipTests -Dquarkus.native.remote-container-build=true
            set +e
          }
          opaBuild() {
            set -e
            ARTIFACT="$1"
            EXTENSION="$2"
            requiredInputs="1 2"
            file_name="${ARTIFACT}.${EXTENSION}"
            setupOpa
            mkdir -p bundles
            if [[ $ARTIFACT == *"wasm"* ]]; then
              ~/opa build -t wasm policies --output bundles/${file_name}
            else
              ~/opa build policies --output bundles/${file_name}
            fi
            set +e
          }
          opsImageBuild() {
            set -e
            ./mvnw install -Dnative -DskipTests -Dquarkus.native.remote-container-build=true
            dockerBuild "$@"
            set +e
          }
          pythonApiClientBuild() {
            set -e
            bash setup --version 0.0.0
            set +e
          }
          pythonApiTemplatesBuild() {
            set -e
            ARTIFACT="$1"
            EXTENSION="$2"
            VERSION="$3"
            requiredInputs="1 2 3"
            validateInputs "$requiredInputs" "$@" 
            ARTIFACT_FILE="${ARTIFACT}.${EXTENSION}"
            zipDirectory "openapi-templates" "${ARTIFACT_FILE}"
            set +e
          }
          pythonLibraryBuild() {
            set -e
            ARTIFACT="$1"
            requiredInputs="1"
            validateInputs "$requiredInputs" "$@" 
            installPythonDependencies $ARTIFACT
            lintCheck
            gradlewPythonwheel
            set +e
          }
          qaBuild(){
            set -e
            requiredInputs="1 3"
            validateInputs "$requiredInputs" "$@" 
            setupQAEnv
            export GITHUB_TOKEN="${{ secrets.CIPIPELINE_GITHUB_TOKEN }}"
            cp configs/qabusiness.json config.json
            source qavenv/bin/activate
            make clients -B
            source qavenv/bin/activate
            python3 ./main.py ./testcases -s -v --dry-run --run-long-tests --business-edition
            deactivate
            # if [[ ${{steps.changed-files.outputs.any_modified}} == 'true' ]]; then
            cd scripts
            dockerBuild "$@"
            cd ..
            # fi
            set +e
          }
          setupOpa() {
            curl -L -o ~/opa https://openpolicyagent.org/downloads/v0.61.0/opa_linux_amd64_static
            chmod 755 ~/opa
            curl -L -o ~/opa_darwin_amd64 https://openpolicyagent.org/downloads/v0.61.0/opa_darwin_amd64
            curl -L -o ~/opa_darwin_amd64.sha256 https://openpolicyagent.org/downloads/v0.61.0/opa_darwin_amd64.sha256
            ~/opa version
          }
          terraformBuild() {
            set -e
            modifiedDir
            BASE_DIR=$PWD
            BUILD_DIR=$BASE_DIR/build
            mkdir -p $BUILD_DIR
            DIRECTORIES=$(modifiedDir)
            EXCLUDE_DIR=("build",".github",".gitignore","convoy.yaml","README.md","ci-scripts")
            for DIR in $DIRECTORIES
            do
              if [[ " ${EXCLUDE_DIR[*]} " != *"$DIR"* ]]; then 
                echo "building  ${DIR}"
                ARTIFACT_FILE=$BUILD_DIR/${DIR}.zip
                cd $BASE_DIR/$DIR
                VERSION=$(yq .version convoy.yaml)
                download_binary_from_source
                terraform_build $PWD $ARTIFACT_FILE
              fi
            done
            ls -lrta $BUILD_DIR
            set +e
          }
          build() {
            type="$1"
            check=$(grep "$type" convoy.yaml)
            if [[ -z "$check" ]]; then
              return
            fi
            git config --global url."https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com".insteadOf "https://github.com"
            version=$(yq '.version // ""' convoy.yaml)
            language=$(yq '.language // ""' convoy.yaml)
            if [[ "$language" == "terraform" ]]; then
              terraformBuild
              return
            fi
            yq e ".generates.$type[] | [.name, .buildFunction, .buildTool, .extension, .dockerFile] | @csv" convoy.yaml | sed 's/null//g' > artifacts.txt
            lineNumber=1
            while :; do
              echo ------------------------------
              artifactData=$(sed "${lineNumber}!d" artifacts.txt)
              if [[ -z "${artifactData}" ]]; then
                break
              fi

              set -x
              java_version=$(yq '.javaVersion // ""' convoy.yaml)
              if [[ -n ${java_version:-} ]]; then
                if [[ -d /usr/lib/jvm/java-${java_version}-openjdk-amd64 ]]; then
                  export JAVA_HOME=/usr/lib/jvm/java-${java_version}-openjdk-amd64
                  export PATH="/usr/lib/jvm/java-${java_version}-openjdk-amd64/bin:${PATH}"
                else
                  echo "Java Version ${java_version}, as required in convoy.yaml, is not installed"
                  exit 1
                fi
              fi

              IFS=',' read -r name buildFunction buildTool ext file <<< "${artifactData}"
              export ARTIFACT_NAME=${name} ARTIFACT_EXTENSION=${ext} ARTIFACT_VERSION=${version} DOCKERFILE_PATH=${file}
              echo "Name: ${name}"
              echo "buildFunction: ${buildFunction}"
              echo "buildTool: ${buildTool}"
              echo "Ext: ${ext}"
              echo "Version: ${version}"
              echo "dockerFile: ${file}"

              if [[ -n ${buildFunction:-} ]]; then
                ${buildFunction} ${name} ${ext} ${version} ${file}
              elif [[ -n ${buildTool:-} ]]; then
                set -e
                $(yq .pre-merge.${buildTool} ./ci-scripts/bash/build-tool-cmd-map.yaml)
                set +e
              fi
              set +x

              echo "$type $name done"
              echo ------------------------------
              lineNumber=$((lineNumber+1))
            done
            rm artifacts.txt
          }
          set +e
          source ./ci-scripts/bash/functions-for-build
          [[ -n ${LATEST_TAG:-} ]] || export LATEST_TAG=0.0.0
          configureGoVersionIfRequired

          set -e; bash -c "$(yq '.ci.${CI_PHASE}.cmd // :' convoy.yaml)"; set +e

          build "artifacts"
          build "dockerImages"
          build "helmCharts"
          build "terraform"
          build "softwareImages"
          parseCoverageReport

      - name: Cleanup
        if: always()
        run: |
          set +e
          sudo rm -rf target
          docker container prune --force
          docker volume prune --force

  build-arm:
    if: ${{ inputs.type == 'arm' }}
    runs-on: ARM64
    env:
      CI_BRANCH: TDEVOPS-3633_convoy_ci_on_3693
      CHANNEL_ID: ${{vars.CONVOY_ALERTS_SLACK_ID}}
      CODE_COVERAGE_S3: ${{vars.CODE_COVERAGE_S3}}
      CONVOY_API_KEY: ${{secrets.CONVOY_AUTH_TOKEN}}
      DEVOPS_TEAM: ${{vars.DEVOPS_TEAM_SLACK_ID}}
      DOCKERHUB_ORG: ${{vars.DOCKERHUB_ORG}}
      GITHUB_TOKEN: ${{ secrets.CIPIPELINE_GITHUB_TOKEN }}
      GITHUB_USER: ${{ secrets.CIPIPELINE_GITHUB_USER }}
      IMAGE_SCAN_API_URL: http://${{vars.CONVOY_API_ENDPOINT}}/devops/code/vulnerabilities/validate
      NEXUS_PASSWORD: ${{secrets.CIPIPELINE_NEXUS_PASSWORD}}
      NEXUS_PROTOCOL: ${{vars.NEXUS_PROTOCOL_LOCAL}}
      NEXUS_PULL_REPOS_M2: tessell-m2-development
      NEXUS_PULL_REPOS_PY: tessell-py-development
      NEXUS_PUSH_REPOS_M2: ${{ vars.NEXUS_PUSH_REPOS_M2 }}
      NEXUS_PUSH_REPOS_PY: ${{ vars.NEXUS_PUSH_REPOS_PY }}
      NEXUS_PUSH_REPOS_NPM: ${{vars.NEXUS_PUSH_REPOS_NPM}}
      NEXUS_REPO_NPM: tessell-repos-npm-development
      NEXUS_SERVER_ENDPOINT: ${{vars.NEXUS_SERVER_ENDPOINT_LOCAL}}
      NEXUS_USERNAME: ${{secrets.CIPIPELINE_NEXUS_USERNAME}}
      REPO: "${{github.repository}}"
      SLACK_TOKEN: ${{secrets.SLACK_TOKEN}}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      - name: Setup CI Scripts
        run: |
          cd ~/convoy-ci
          git checkout main
          git pull
          git checkout ${{env.CI_BRANCH}}
          git pull
          cd ~-
          cp -r ~/convoy-ci/.github/ci-scripts ./ci-scripts

      - name: Build
        shell: bash
        run: |
          dockerMultiBuild() {
            docker buildx rm multi-platform-builder
            docker buildx create --use --platform=linux/arm64,linux/amd64 --name multi-platform-builder
            set -e
            IMAGE="$1"
            FILE="$4"
            requiredInputs="1 4"
            validateInputs "$requiredInputs" "$@" 
            docker buildx build -f $FILE --no-cache -t $IMAGE --platform=linux/amd64,linux/arm64 .
            set +e
          }
          dockerMilvusBuild() {
            docker buildx rm multi-platform-builder
            docker buildx create --use --platform=linux/arm64,linux/amd64 --name multi-platform-builder
            set -e
            IMAGE="$1"
            requiredInputs="1"
            validateInputs "$requiredInputs" "$@" 
            AGENT_VERSION=$(yq '.tessellAgentVersion' convoy.yaml)
            TASKHANDLER_VERSION=$(yq '.taskHandlerVersion' convoy.yaml)
            docker buildx build --no-cache -t $IMAGE \
                                --platform linux/amd64 \
                                --build-arg HANDLER_TAG=$TASKHANDLER_VERSION \
                                --build-arg AGENT_TAG=$AGENT_VERSION \
                                --build-arg NEXUS_USERNAME=${{ secrets.CIPIPELINE_NEXUS_USERNAME }} \
                                --build-arg NEXUS_PASSWORD=${{ secrets.CIPIPELINE_NEXUS_PASSWORD }} \
                                --build-arg GITHUB_USER=${{ secrets.CIPIPELINE_GITHUB_USER }} \
                                --build-arg GITHUB_TOKEN=${{ secrets.CIPIPELINE_GITHUB_TOKEN }} \
                                --build-arg NEXUS_PROTOCOL=${NEXUS_PROTOCOL} \
                                --build-arg NEXUS_SERVER_ENDPOINT=${NEXUS_SERVER_ENDPOINT} .
            set +e
          }
          build() {
            type="$1"
            check=$(grep "$type" convoy.yaml)
            if [[ -z "$check" ]]; then
              return
            fi
            version=$(yq '.version' convoy.yaml)
            yq e ".generates.$type[] | [.name, .buildFunction, .extension, .dockerFile] | @csv" convoy.yaml | sed 's/,/ /g' > artifacts.txt
            lineNumber=1
            while :; do
              echo ------------------------------
              artifactData=$(sed "$lineNumber!d" artifacts.txt)
              if [[ -z "$artifactData" ]]; then
                break
              fi
              read -r name buildFunction ext file <<< "$artifactData"
              echo "Name: $name"
              echo "buildFunction: $buildFunction"
              echo "Ext: $ext"
              echo "Version: $version"
              echo "dockerFile: $file"
              $buildFunction $name $ext $version $file 
              echo "$type $name done"
              echo ------------------------------
              lineNumber=$((lineNumber+1))
            done
            rm artifacts.txt
          }
          set +e
          source ./ci-scripts/bash/functions-for-build
          build "artifacts"
          build "dockerImages"
          build "helmCharts"
          parseCoverageReport

      - name: Cleanup
        if: always()
        run: |
          set +e
          sudo rm -rf target
          docker container prune --force
          docker volume prune --force
