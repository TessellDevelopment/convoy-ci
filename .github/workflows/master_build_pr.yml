---
name: Tessell Pipelines Code Build Pre Merge
on:
  workflow_call:
    inputs:
      type:
        description: 'This is used to determine build type'
        required: true
        type: string

jobs:

  build-amd:
    if: ${{ inputs.type != 'arm' }}
    runs-on: self-hosted
    env:
      NEXUS_REPO_NPM: tessell-repos-npm-development
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Changed files
        id: changed-files
        uses: tj-actions/changed-files@v39
        with:
          files: |
            Chart.yaml
            services/**
            scripts/Dockerfile
            scripts/initializeAutomation.sh

      - name: Build
        shell: bash
        run: |
          agentBuild() {
            set -e
            go install golang.org/x/tools/cmd/goimports@latest
            ARTIFACT="$1"
            OS=$(echo "$ARTIFACT" | awk -F'[-]' '{print $2}')
            SERVICE=$(echo "$ARTIFACT" | awk -F'[-]' '{print $4}')
            make os=$OS $SERVICE
            make clean
            set +e
          }
          createPipConf(){
            set -e
            echo "[global]" > pip.conf
            echo "index =  https://${{ secrets.CIPIPELINE_NEXUS_USERNAME }}:${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}@${{ env.NEXUS_SERVER }}/repository/${{ env.NEXUS_PULL_REPOS_PY }}/simple" >> pip.conf
            echo "index-url = https://${{ secrets.CIPIPELINE_NEXUS_USERNAME }}:${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}@${{ env.NEXUS_SERVER }}/repository/${{ env.NEXUS_PULL_REPOS_PY }}/simple" >> pip.conf
            echo "extra-index-url = https://pypi.org/simple" >> pip.conf
            sudo cp pip.conf /etc/pip.conf
            set +e
          }
          dbPluginBuild() {
            set -e
            ARTIFACT="$1"
            createPipConf
            if [ -f ./$ARTIFACT/requirements.txt ]; then python3 -m pip install -r ./$ARTIFACT/requirements.txt --dry-run; fi
            lintCheck
            gradlewPythonwheel
          }
          dockerBuild() {
            set -e
            IMAGE_NAME="$1"
            FILE="$4"
            if [[ "$FILE" == "null" || -z "$FILE" ]]; then
              FILE="./Dockerfile"
            fi
            echo "$FILE"
            echo "Starting Docker"
            docker build -f $FILE -t $IMAGE_NAME .
            set +e
          }
          dockerBuildOps() {
            set -e
            mvnwBuild
            dockerBuild "$1" "$2" "$3" "$4"
            set +e
          }
          functionBuild() {
            set -e
            ARTIFACT="$1"
            OS=$(echo "$ARTIFACT" | awk -F'[-]' '{print $3}')
            CLOUD=$(echo "$ARTIFACT" | awk -F'[-]' '{print $4}')
            make OS=$OS CLOUD=$CLOUD package
            set +e
          }
          gradlewMaven() {
            set -e
            echo ./gradlew mavenPackage --refresh-dependencies --console plain \
              -Pnexus_push_username="${{ secrets.CIPIPELINE_NEXUS_USERNAME }}" \
              -Pnexus_push_password="${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}" \
              -Pnexus_username="${{ secrets.CIPIPELINE_NEXUS_USERNAME }}" \
              -Pnexus_password="${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}"
            set +e
          }
          gradlewPythonwheel() {
            set -e
            ./gradlew pythonWheel --console plain \
              -Pnexus_username="${{ secrets.CIPIPELINE_NEXUS_USERNAME }}" \
              -Pnexus_password="${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}"
            set +e
          }
          gradlewUI() {
            set +e
            rm ~/.npmrc
            rm ~/.yarnrc
            TOKEN=$(echo -n '${{secrets.CIPIPELINE_NEXUS_USERNAME}}:${{secrets.CIPIPELINE_NEXUS_PASSWORD}}' | base64 -w 0)
            echo '"@tessell:registry" "https://${{ vars.NEXUS_SERVER_ENDPOINT }}/repository/${{ vars.NEXUS_PUSH_REPOS_NPM }}/"' >> .yarnrc
            echo "always-auth=true" >> .npmrc
            echo "_auth=$TOKEN" >> .npmrc
            cat .npmrc
            cat .yarnrc
            set -e
            ./gradlew zipUiBuild --console plain --stacktrace \
              -Pnexus_username="${{ secrets.CIPIPELINE_NEXUS_USERNAME }}" \
              -Pnexus_password="${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}"
            set +e
          }
          helm-chart() {
            set -e
            CHART_NAME="$1"
            cd scripts
            ./package-and-push --no-push -n $CHART_NAME
            set +e
          }
          helm-template() {
            if [[ ${{steps.outputs.changed-files.any_modified}} == 'true' ]]; then
              GITHUB_WORKSPACE=$(pwd)
              CHART_GITHUB_LOCATION=$GITHUB_WORKSPACE
              TEMPLATE_REPO_GITHUB_LOCATION=$GITHUB_WORKSPACE/../convoy-helm-template
              echo "$CHART_GITHUB_LOCATION"
              echo "$TEMPLATE_REPO_GITHUB_LOCATION"
              echo "Cloning convoy-helm-template"
              rm -rf $TEMPLATE_REPO_GITHUB_LOCATION
              git clone https://github.com/TessellDevelopment/convoy-helm-template.git $TEMPLATE_REPO_GITHUB_LOCATION
              echo "Copying the service values file"
              cp -r $CHART_GITHUB_LOCATION/services/* $TEMPLATE_REPO_GITHUB_LOCATION/helm-chart/values/apps/
              cp -r $CHART_GITHUB_LOCATION/Chart.yaml $TEMPLATE_REPO_GITHUB_LOCATION/helm-chart/Chart.yaml
              set -e
              CHART_NAME=$(grep 'name' convoy.yaml | awk '{print $2}')
              cd $TEMPLATE_REPO_GITHUB_LOCATION/scripts
              ls -lrta ../helm-chart/values/apps/
              echo "Running package and push"
              ./package-and-push --no-push -n $CHART_NAME
              set +e
            fi
          }
          lintCheck() {
            flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
            flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          }
          makeBuild() {
            set -e
            make service
            set +e
          }
          makeImage() {
            set -e
            make image
            set +e
          }
          mvnwBuild() {
            set -e
            ./mvnw install -Dnative -DskipTests -Dquarkus.native.remote-container-build=true
            set +e
          }
          npmBuild() {
            set -e
            npm install
            npm run build
            set +e 
            rm ~/.npmrc
            TOKEN=$(echo -n '${{secrets.CIPIPELINE_NEXUS_USERNAME}}:${{secrets.CIPIPELINE_NEXUS_PASSWORD}}' | base64 -w 0)
            echo "//${{ vars.NEXUS_SERVER_ENDPOINT }}/repository/:_auth = $TOKEN" >> ~/.npmrc
            echo "//${{ vars.NEXUS_SERVER_ENDPOINT }}/repository/:always-auth = true" >> ~/.npmrc 
            echo "@tessell:registry=https://${{ vars.NEXUS_SERVER_ENDPOINT }}/repository/${{ env.NEXUS_REPO_NPM }}" >> ~/.npmrc
            cat ~/.npmrc
            set -e
            version=$(cat convoy.yaml | yq -r '.version')
            yq ".version = \"$version\"" package.json > tmp_package.json
            mv tmp_package.json package.json
            npm publish   
            set +e
          }
          qaBuild(){
            set -e
            createPipConf
            setupQAEnv
            export PYTHONPATH=lib
            export GITHUB_USER="${{ secrets.CIPIPELINE_NEXUS_USERNAME }}"
            export GITHUB_TOKEN="${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}"
            cp configs/qarel.json config.json
            source qavenv/bin/activate
            make clients -B
            source qavenv/bin/activate
            python3 ./main.py ./testcases -s -v --dry-run --run-long-tests --business-edition
            if [[ ${{steps.outputs.changed-files.any_modified}} == 'true' ]]; then
              IMAGE_NAME="$1"
              dockerBuild $IMAGE_NAME
            fi
            set +e
          }
          setupQAEnv() {
            INSTALL_DIR=/usr/local/bin
            sudo mkdir -p $INSTALL_DIR/openapitools
            curl https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/bin/utils/openapi-generator-cli.sh > openapi-generator-cli
            sudo cp openapi-generator-cli $INSTALL_DIR/openapitools/openapi-generator-cli
            sudo chmod 755 $INSTALL_DIR/openapitools/openapi-generator-cli
            sudo ln -f -s $INSTALL_DIR/openapitools/openapi-generator-cli $INSTALL_DIR/openapi-generator
            wget https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/6.0.0/openapi-generator-cli-6.0.0.jar -O openapi-generator-cli.jar
            sudo mv openapi-generator-cli.jar /usr/local/bin/openapi-generator-cli-6.0.0.jar
            python3 -m pip install --user virtualenv
            python3 -m pip install yq wheel
            python3 -m venv qavenv
            source qavenv/bin/activate
            python3 -m pip install -r scripts/requirements.txt
            sudo python3 -m pip list | grep harness
            python3 -m pip list | grep harness              
          }
          tsmZipBuild() {
            set -e
            ARTIFACT="$1"
            mkdir -p build; cd tsmv101; terraform_build $PWD ../build/$ARTIFACT.zip; cd ../build; ls -l;
            unzip -l $ARTIFACT.zip
            cd ..
            set +e
          }
          build() {
            type="$1"
            check=$(grep "$type" convoy.yaml)
            if [[ -z "$check" ]]; then
              return
            fi
            git config --global url."https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com".insteadOf "https://github.com"
            version=$(yq '.version' convoy.yaml)
            while IFS=$'\t' read -r name buildFunction ext file _; do
              echo "Name: $name"
              echo "buildFunction: $buildFunction"
              echo "Ext: $ext"
              echo "Version: $version"
              echo "dockerFile: $file"
              $buildFunction "$name" "$ext" "$version" "$file"
            done < <(yq e ".generates.$type[] | [.name, .buildFunction, .extension, .dockerFile] | @tsv" convoy.yaml)
          }
          set +e
          build "artifacts"
          build "dockerImages"
          build "helmCharts"

      - name: Remove target
        if: always()
        run: |
          set +e
          sudo rm -rf target
          docker container prune --force
          docker volume prune --force

  build-arm:
    if: ${{ inputs.type == 'arm' }}
    runs-on: ARM64
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Build
        shell: bash
        run: |
          mvnwBuild() {
            set -e
            sudo ./mvnw install -Dnative -DskipTests -Dquarkus.native.container-build=true
            set +e
          }
          jarBuild() {
            set -e
            sudo ./mvnw package -Dnative -DskipTests -Dquarkus.native.container-build=true
            set +e
          }
          dockerBuildOps() {
            set -e
            IMAGE_NAME="$1"
            FILE="$4"
            if [[ "$FILE" == "null" || -z "$FILE" ]]; then
              FILE="./Dockerfile"
            fi
            echo "$FILE"
            mvnwBuild
            set -e
            sudo docker build -f $FILE -t $IMAGE_NAME .
            set +e
          }
          build() {
            type="$1"
            check=$(grep "$type" convoy.yaml)
            if [[ -z "$check" ]]; then
              return
            fi
            version=$(yq '.version' convoy.yaml)
            while IFS=$'\t' read -r name buildFunction ext file _; do
              echo "Name: $name"
              echo "buildFunction: $buildFunction"
              echo "Ext: $ext"
              echo "Version: $version"
              echo "dockerFile: $file"
              $buildFunction "$name" "$ext" "$version" "$file"
            done < <(/usr/local/bin/yq e ".generates.$type[] | [.name, .buildFunction, .extension, .dockerFile] | @tsv" convoy.yaml)
          }
          set +e
          build "artifacts"
          build "dockerImages"

      - name: Remove target
        if: always()
        run: |
          set +e
          sudo rm -rf target
          sudo docker container prune --force
          sudo docker volume prune --force
          