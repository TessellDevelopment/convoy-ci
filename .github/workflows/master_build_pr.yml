---
name: Tessell Pipelines Code Build Pre Merge
on:
  workflow_call:
    inputs:
      type:
        description: 'This is used to determine build type'
        required: true
        type: string

jobs:

  build-ui:
    if: ${{ inputs.type == 'ui-build' }}
    runs-on: ui-build
    env:
      NEXUS_REPO_NPM: tessell-repos-npm-development
      NEXUS_PULL_REPOS_M2: tessell-m2-development
      GITHUB_USER: ${{ secrets.CIPIPELINE_GITHUB_USER }}
      GITHUB_TOKEN: ${{ secrets.CIPIPELINE_GITHUB_TOKEN }}
      NEXUS_PROTOCOL: ${{vars.NEXUS_PROTOCOL_PUBLIC}}
      NEXUS_USERNAME: ${{secrets.CIPIPELINE_NEXUS_USERNAME}}
      NEXUS_PASSWORD: ${{secrets.CIPIPELINE_NEXUS_PASSWORD}}
      NEXUS_SERVER_ENDPOINT: ${{vars.NEXUS_SERVER_ENDPOINT_PUBLIC}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      - name: Build
        shell: bash
        run: |
          configureNpmrc(){
            set +e 
            REPO="$1"
            rm ~/.npmrc
            TOKEN=$(echo -n '${{env.NEXUS_USERNAME}}:${{env.NEXUS_PASSWORD}}' | base64 -w 0)
            echo "//${{ env.NEXUS_SERVER_ENDPOINT }}/repository/:_auth = $TOKEN" >> ~/.npmrc
            echo "//${{ env.NEXUS_SERVER_ENDPOINT }}/repository/:always-auth = true" >> ~/.npmrc 
            echo "@tessell:registry=${{env.NEXUS_PROTOCOL}}://${{ env.NEXUS_SERVER_ENDPOINT }}/repository/$REPO" >> ~/.npmrc
            cat ~/.npmrc
          }
          gradlewUIBuild() {
            rm ~/.npmrc
            rm ~/.yarnrc
            TOKEN=$(echo -n '${{env.NEXUS_USERNAME}}:${{env.NEXUS_PASSWORD}}' | base64 -w 0)
            echo '"@tessell:registry" "${{env.NEXUS_PROTOCOL}}://${{ env.NEXUS_SERVER_ENDPOINT }}/repository/${{ vars.NEXUS_PUSH_REPOS_NPM }}/"' >> .yarnrc
            echo "always-auth=true" >> .npmrc
            echo "_auth=$TOKEN" >> .npmrc
            cat .npmrc
            cat .yarnrc
            set -e
            ENV_JSON='${{secrets.TESSELL_UI_ENV_SECRET}}'
            echo "$ENV_JSON" | jq -r 'to_entries | .[] | "\(.key)=\"\(.value)\"" ' | sed '1s/^/\n/' >> .env
            cat .env
            ./gradlew zipUiBuild --console plain --stacktrace \
              -Pnexus_username="${{ secrets.CIPIPELINE_NEXUS_USERNAME }}" \
              -Pnexus_password="${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}"
            set +e
          }
          npmBuild() {
            set -e
            npm install
            npm run build
            configureNpmrc "${{env.NEXUS_REPO_NPM}}"
            set -e
            version="$3"
            yq ".version = \"$version\"" package.json > tmp_package.json
            mv tmp_package.json package.json
            npm publish   
            set +e
          }
          build() {
            type="$1"
            check=$(grep "$type" convoy.yaml)
            if [[ -z "$check" ]]; then
              return
            fi
            version=$(yq '.version' convoy.yaml)
            yq e ".generates.$type[] | [.name, .buildFunction, .extension, .dockerFile] | @csv" convoy.yaml | sed 's/,/ /g' > artifacts.txt
            lineNumber=1
            while :; do
              echo ------------------------------
              artifactData=$(sed "$lineNumber!d" artifacts.txt)
              if [[ -z "$artifactData" ]]; then
                break
              fi
              read -r name buildFunction ext file <<< "$artifactData"
              echo "Name: $name"
              echo "buildFunction: $buildFunction"
              echo "Ext: $ext"
              echo "Version: $version"
              echo "dockerFile: $file"
              $buildFunction $name $ext $version $file 
              echo "$type $name done"
              echo ------------------------------
              lineNumber=$((lineNumber+1))
            done
            rm artifacts.txt
          }
          set +e
          build "artifacts"
          build "dockerImages"
          build "helmCharts"
  
  build-ubuntu-latest:
    if: ${{ inputs.type == 'ubuntu-latest' }}
    runs-on: ubuntu-latest
    env:
      GOPATH: /home/runner/go
      GITHUB_USER: ${{ secrets.CIPIPELINE_GITHUB_USER }}
      GITHUB_TOKEN: ${{ secrets.CIPIPELINE_GITHUB_TOKEN }}
      NEXUS_PROTOCOL: ${{vars.NEXUS_PROTOCOL_PUBLIC}}
      NEXUS_PULL_REPOS_PY: tessell-py-development
      NEXUS_PULL_REPOS_M2: tessell-m2-development
      NEXUS_USERNAME: ${{secrets.CIPIPELINE_NEXUS_USERNAME}}
      NEXUS_PASSWORD: ${{secrets.CIPIPELINE_NEXUS_PASSWORD}}
      NEXUS_SERVER_ENDPOINT: ${{vars.NEXUS_SERVER_ENDPOINT_PUBLIC}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5.0.0
        with:
          python-version: 3.9

      - name: Setup Go
        uses: actions/setup-go@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v4.0.0
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3.0.0

      - name: Login to docker
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Create pip conf
        run: |
          createPipConf() {
            echo "[global]" > pip.conf
            echo "index =  ${{env.NEXUS_PROTOCOL}}://${{ secrets.CIPIPELINE_NEXUS_USERNAME }}:${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}@${{ env.NEXUS_SERVER_ENDPOINT }}/repository/${{ env.NEXUS_PULL_REPOS_PY }}/simple" >> pip.conf
            echo "index-url = ${{env.NEXUS_PROTOCOL}}://${{ secrets.CIPIPELINE_NEXUS_USERNAME }}:${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}@${{ env.NEXUS_SERVER_ENDPOINT }}/repository/${{ env.NEXUS_PULL_REPOS_PY }}/simple" >> pip.conf
            echo "extra-index-url = https://pypi.org/simple" >> pip.conf
            sudo cp pip.conf /etc/pip.conf
          }
          createPipConf
        shell: bash

      - name: Install dependencies
        run: |
          installPythonDependencies() {
            DIR=$1
            if [[ -z "${DIR}" ]]; then
              DIR='.'
            fi
            python3 -m pip install --upgrade pip
            python3 -m pip install flake8 pytest twine wheel
            if [ -f "${DIR}/requirements.txt" ]; then
              python3 -m pip install -r "${DIR}/requirements.txt" --trusted-host ${{env.NEXUS_SERVER_ENDPOINT}};
            fi
          }
          installPythonDependencies

      - name: Setup Trivy and Dockle
        run: |
          setupTrivyDockle() {
            wget https://github.com/aquasecurity/trivy/releases/download/v0.48.3/trivy_0.48.3_Linux-64bit.deb
            dpkg -i trivy_0.48.3_Linux-64bit.deb
            curl -L -o dockle.deb https://github.com/goodwithtech/dockle/releases/download/v0.4.14/dockle_0.4.14_Linux-64bit.deb
            dpkg -i dockle.deb && rm dockle.deb
          }
          
      - name: Build
        shell: bash
        run: |
          elasticBuild() {
            set -e
            IMAGE="$1"
            git config --global url."https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com".insteadOf "https://github.com"
            go version
            go install golang.org/x/tools/cmd/goimports@latest
            which go
            git clone https://github.com/magefile/mage
            cd mage
            go run bootstrap.go
            cd ..
            echo "----------------------------------------------"
            echo "----------- Building Service -----------------"
            export GOPATH=/home/runner/go/bin
            export PATH=/go/bin:/usr/local/go/bin:/opt/maven/bin:/usr/lib/jvm/java-16-openjdk-amd64/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/home/runner/go/bin
            cd filebeat
            mage package
            cp ./build/golang-crossbuild/filebeat-linux-amd64 ./filebeat
            echo "----------------------------------------------"
            echo "------------ Building Image ------------------"
            docker build -t $IMAGE .
            cd ..
            echo "----------------------------------------------"
            echo "---------- Creating Tar Files -----------------"
            PACKAGES_DIR=./filebeat/build/distributions/
            mkdir -p $PACKAGES_DIR
            cp ./filebeat/tessell-filebeat-linux.yml $PACKAGES_DIR/filebeat.yml
            cp ./filebeat/build/golang-crossbuild/filebeat-linux-amd64 $PACKAGES_DIR/filebeat
            cp ./filebeat/filebeat.service $PACKAGES_DIR/filebeat.service
            pushd $PACKAGES_DIR
            tar -zcvf filebeat-linux.tar.gz filebeat.yml filebeat filebeat.service
            popd
            cp ./filebeat/tessell-filebeat-windows.yml $PACKAGES_DIR/filebeat.yml
            cp ./filebeat/build/golang-crossbuild/filebeat-windows-amd64.exe $PACKAGES_DIR/filebeat.exe 
            pushd $PACKAGES_DIR
            tar -zcvf filebeat-windows.tar.gz filebeat.yml filebeat.exe
            popd
            set +e
          }
          gradlewPythonwheel() {
            ./gradlew pythonWheel docker --console plain \
              -Pnexus_username="${{ secrets.CIPIPELINE_NEXUS_USERNAME }}" \
              -Pnexus_password="${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}"
          }
          imageScan(){
            set -e
            export IMAGE_NAME="$1"
            trivy image -f json -o trivy_image_scan_result.json  --severity HIGH,CRITICAL --scanners vuln $IMAGE_NAME:latest
            dockle -f json -o dockle_image_scan_result.json $IMAGE_NAME:latest
            python3 - <<EOF
          import requests
          import json
          import os
          from slack_sdk import WebClient
          from slack_sdk.errors import SlackApiError
          IMAGE_SCAN_API_URL = os.environ.get('IMAGE_SCAN_API_URL')
          CONVOY_API_KEY = os.environ.get('CONVOY_API_KEY')
          REPO = os.environ.get('REPO')
          IMAGE_NAME = os.environ.get('IMAGE_NAME')

          def post_to_slack(message):
            usergroup_id=os.environ.get('DEVOPS_TEAM')
            mention = f"<!subteam^{usergroup_id}>"
            full_message=f"{mention}\n vulnerability validation failed in \`{REPO}\` for \`{IMAGE_NAME}\`, please check \n\`\`\`{message}\`\`\`"
            client = WebClient(token=os.environ.get('SLACK_TOKEN'))
            try:
              response = client.chat_postMessage(channel=os.environ.get('CHANNEL_ID'), text=full_message)
              return response["ok"]
            except SlackApiError as e:
              print(f"Error posting to Slack: {e.response['error']}")
              return False

          with open('trivy_image_scan_result.json') as json_file:
            trivy_json = json.load(json_file)
          with open('dockle_image_scan_result.json') as json_file:
            dockle_json = json.load(json_file)
          payload = {
            "repository": REPO,
            "CVE":trivy_json,
            "DOCKER_BEST_PRACTICE":dockle_json,
          }

          headers = {
            'Content-Type': 'application/json',
            'x-api-key': CONVOY_API_KEY
          }
          
          try:
            response = requests.post(IMAGE_SCAN_API_URL, json=payload, headers=headers)
            if response.status_code == 200:
              print(response.status_code)
              print(response.text)
            elif response.status_code == 409:
              print(json.dumps(response.json(), indent=2))
              print("Get approval for these vulnerabilities or fix them")
              exit(1)
            else:
              print(response.status_code)
              print(response.text)
              post_to_slack(response.text)
              exit(1)
          except Exception as e:
            print(e)
            post_to_slack(e)
            exit(1)
          EOF
            set +e
          }
          infraProvisionBuild() {
            set -e
            lintCheck
            IMAGE_NAME="$1"
            mkdir -p build/tools
            wget https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/6.0.0/openapi-generator-cli-6.0.0.jar -O build/tools/openapi-generator-cli-6.0.0.jar
            gradlewPythonwheel
            imageScan $IMAGE_NAME
            set +e
          }
          lintCheck() {
            flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
            flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          }
          pythonDockerBuild() {
            set -e
            IMAGE_NAME="$1"
            rm pip.conf
            lintCheck
            gradlewPythonwheel
            imageScan $IMAGE_NAME
            set +e
          }
          build() {
            type="$1"
            check=$(grep "$type" convoy.yaml)
            if [[ -z "$check" ]]; then
              return
            fi
            version=$(yq '.version' convoy.yaml)
            yq e ".generates.$type[] | [.name, .buildFunction, .extension, .dockerFile, .filePath, .baseImage] | @csv" convoy.yaml | sed 's/,/ /g' > artifacts.txt
            lineNumber=1
            while :; do
              echo ------------------------------
              artifactData=$(sed "$lineNumber!d" artifacts.txt)
              if [[ -z "$artifactData" ]]; then
                break
              fi
              read -r name buildFunction ext file filePath baseImage <<< "$artifactData"
              echo "Name: $name"
              echo "buildFunction: $buildFunction"
              echo "Ext: $ext"
              echo "Version: $version"
              echo "dockerFile: $file"
              echo "filePath: $filePath"
              echo "baseImage: $baseImage"
              $buildFunction "$name" "$ext" "$version" "$file" "$filePath" "$baseImage"
              echo "$type $name done"
              echo ------------------------------
              lineNumber=$((lineNumber+1))
            done
            rm artifacts.txt
          }
          set +e
          build "artifacts"
          build "dockerImages"
          build "helmCharts"

  build-amd-go-20:
    if: ${{ inputs.type == 'amd-go-20' }}
    runs-on: amd-go-20
    env:
      GITHUB_USER: ${{ secrets.CIPIPELINE_GITHUB_USER }}
      GITHUB_TOKEN: ${{ secrets.CIPIPELINE_GITHUB_TOKEN }}
      NEXUS_PROTOCOL: ${{vars.NEXUS_PROTOCOL_PUBLIC}}
      NEXUS_USERNAME: ${{secrets.CIPIPELINE_NEXUS_USERNAME}}
      NEXUS_PASSWORD: ${{secrets.CIPIPELINE_NEXUS_PASSWORD}}
      NEXUS_SERVER_ENDPOINT: ${{vars.NEXUS_SERVER_ENDPOINT_PUBLIC}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      - name: Check go Config
        run: |
          go version
          echo $GOPATH
          echo $GOROOT
          echo $PATH
          go env
          
      - name: Build
        shell: bash
        run: |
          goLibraryBuild() {
            set -e
            ARTIFACT="$1"
            NAME=$(echo "$ARTIFACT" | awk -F '-linux' '{print $1}')
            if [ "$NAME" == "$ARTIFACT" ]; then
                NAME=$(echo "$ARTIFACT" | awk -F '-windows' '{print $1}')
                OS="windows"
            else
                OS="linux"
            fi
            ENGINE=$(echo "$ARTIFACT" | awk -F "$NAME-$OS" '{gsub(/^-|-linux|-windows$/, "", $2); print $2}')
            echo "Name: $NAME, OS: $OS, Engine: $ENGINE"
            if [[ "$ENGINE" == "null" || -z "$ENGINE" ]]; then
              make service os=$OS
            else
              make service os=$OS engine=$ENGINE
            fi
            set +e
          }
          build() {
            type="$1"
            check=$(grep "$type" convoy.yaml)
            if [[ -z "$check" ]]; then
              return
            fi
            version=$(yq '.version' convoy.yaml)
            export PATH=${PATH}:$GOPATH/bin
            echo $PATH
            git config --global url."https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com".insteadOf "https://github.com"
            yq e ".generates.$type[] | [.name, .buildFunction, .extension, .dockerFile] | @csv" convoy.yaml | sed 's/,/ /g' > artifacts.txt
            lineNumber=1
            while :; do
              echo ------------------------------
              artifactData=$(sed "$lineNumber!d" artifacts.txt)
              if [[ -z "$artifactData" ]]; then
                break
              fi
              read -r name buildFunction ext file <<< "$artifactData"
              echo "Name: $name"
              echo "buildFunction: $buildFunction"
              echo "Ext: $ext"
              echo "Version: $version"
              echo "dockerFile: $file"
              $buildFunction $name $ext $version $file
              echo "Artifact $name done"
              echo ------------------------------
              lineNumber=$((lineNumber+1))
            done
            rm artifacts.txt
          }
          set +e
          build "artifacts"
          build "dockerImages"
          build "helmCharts"

  build-amd:
    if: ${{ inputs.type == 'amd' }}
    runs-on: self-hosted
    env:
      GOPATH: /home/github/go
      NEXUS_PULL_REPOS_M2: tessell-m2-development
      GITHUB_USER: ${{ secrets.CIPIPELINE_GITHUB_USER }}
      GITHUB_TOKEN: ${{ secrets.CIPIPELINE_GITHUB_TOKEN }}
      NEXUS_PROTOCOL: ${{vars.NEXUS_PROTOCOL_LOCAL}}
      NEXUS_USERNAME: ${{secrets.CIPIPELINE_NEXUS_USERNAME}}
      NEXUS_PASSWORD: ${{secrets.CIPIPELINE_NEXUS_PASSWORD}}
      NEXUS_SERVER_ENDPOINT: ${{vars.NEXUS_SERVER_ENDPOINT_LOCAL}}
      CHANNEL_ID: ${{vars.CONVOY_ALERTS_SLACK_ID}}
      CONVOY_API_KEY: ${{secrets.CONVOY_AUTH_TOKEN}}
      DEVOPS_TEAM: ${{vars.DEVOPS_TEAM_SLACK_ID}}
      IMAGE_SCAN_API_URL: http://${{vars.CONVOY_API_ENDPOINT}}/devops/code-scan/vulnerabilities/validate
      REPO: "${{github.repository}}"
      SLACK_TOKEN: ${{secrets.SLACK_TOKEN}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      - name: Check specific file changes
        id: changed-files
        uses: tj-actions/changed-files@v42.0.2
        with:
          files: |
            Chart.yaml
            services/**
            scripts/Dockerfile
            scripts/initializeAutomation.sh

      - name: Check All file changes
        id: changed-files-all
        uses: tj-actions/changed-files@v42.0.2

      - name: Login to docker
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build
        shell: bash
        run: |  
          cloneHelmTemplate() {
            GITHUB_WORKSPACE=$(pwd)
            CHART_GITHUB_LOCATION=$GITHUB_WORKSPACE
            TEMPLATE_REPO_GITHUB_LOCATION=$GITHUB_WORKSPACE/../convoy-helm-template
            echo "$CHART_GITHUB_LOCATION"
            echo "$TEMPLATE_REPO_GITHUB_LOCATION"
            echo "TEMPLATE_REPO_GITHUB_LOCATION=$TEMPLATE_REPO_GITHUB_LOCATION"
            echo "Cloning convoy-helm-template"
            rm -rf $TEMPLATE_REPO_GITHUB_LOCATION
            template_version=$(yq --exit-status '.convoy-helm-template' Chart.yaml)
            if [ $? -eq 0 ]; then
                echo "convoy-helm-template version: $template_version"
            else
                echo "convoy-helm-template version not found.Exiting."
                exit 1
            fi
            git clone --branch $template_version https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com/${{github.repository_owner}}/convoy-helm-template.git $TEMPLATE_REPO_GITHUB_LOCATION
            echo "Copying the service values file"
            cp -r $CHART_GITHUB_LOCATION/services/* $TEMPLATE_REPO_GITHUB_LOCATION/helm-chart/values/apps/
            cp -r $CHART_GITHUB_LOCATION/Chart.yaml $TEMPLATE_REPO_GITHUB_LOCATION/helm-chart/Chart.yaml
            set -e
            cd $TEMPLATE_REPO_GITHUB_LOCATION/scripts
            ls -lrta ../helm-chart/values/apps/
          }
          configureJava() {
            echo "JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64" >> $GITHUB_ENV
            echo "PATH=/usr/lib/jvm/java-17-openjdk-amd64/bin:$PATH" >> $GITHUB_ENV
          }
          createPipConf(){
            set -e
            echo "[global]" > pip.conf
            echo "index =  ${{env.NEXUS_PROTOCOL}}://${{ secrets.CIPIPELINE_NEXUS_USERNAME }}:${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}@${{ env.NEXUS_SERVER_ENDPOINT }}/repository/${{ env.NEXUS_PULL_REPOS_PY }}/simple" >> pip.conf
            echo "index-url = ${{env.NEXUS_PROTOCOL}}://${{ secrets.CIPIPELINE_NEXUS_USERNAME }}:${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}@${{ env.NEXUS_SERVER_ENDPOINT }}/repository/${{ env.NEXUS_PULL_REPOS_PY }}/simple" >> pip.conf
            echo "extra-index-url = https://pypi.org/simple" >> pip.conf
            sudo cp pip.conf /etc/pip.conf
          }
          installPythonDependencies() {
            DIR=$1
            if [[ -z "${DIR}" ]]; then
              DIR='.'
            fi
            python3 -m pip install --upgrade pip
            python3 -m pip install flake8 pytest twine wheel
            if [ -f "${DIR}/requirements.txt" ]; then
              python3 -m pip install -r "${DIR}/requirements.txt" --trusted-host ${{env.NEXUS_SERVER_ENDPOINT}};
            fi
          }
          dbPluginBuild() {
            set -e
            ARTIFACT="$1"
            createPipConf
            installPythonDependencies $ARTIFACT
            lintCheck
            gradlewPythonwheel
            set +e
          }
          dockerBuild() {
            set -e
            IMAGE="$1"
            FILE="$4"
            if [[ "$FILE" == "null" || -z "$FILE" ]]; then
              FILE="./Dockerfile"
            fi
            echo "$FILE"
            echo "Starting Docker"
            docker build -f $FILE -t $IMAGE .
            imageScan $IMAGE
            set +e
          }
          functionBuild() {
            set -e
            ARTIFACT="$1"
            cd tessell;
            OS=$(echo "$ARTIFACT" | awk -F'[-]' '{print $4}')
            CLOUD=$(echo "$ARTIFACT" | awk -F'[-]' '{print $5}')
            echo $OS
            echo $CLOUD
            make OS=$OS CLOUD=$CLOUD nexus_protocol=${{env.NEXUS_PROTOCOL}} nexus_server_endpoint=${{env.NEXUS_SERVER_ENDPOINT}} package
            cd ..
            set +e
          }
          gradlewMaven() {
            set -e
            ./gradlew mavenPackage --refresh-dependencies --console plain \
              -Pnexus_push_username="${{ secrets.CIPIPELINE_NEXUS_USERNAME }}" \
              -Pnexus_push_password="${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}" \
              -Pnexus_username="${{ secrets.CIPIPELINE_NEXUS_USERNAME }}" \
              -Pnexus_password="${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}"
            set +e
          }
          gradlewPythonwheel() {
            set -e
            ./gradlew pythonWheel --console plain \
              -Pnexus_username="${{ secrets.CIPIPELINE_NEXUS_USERNAME }}" \
              -Pnexus_password="${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}"
            set +e
          }
          helmChartBuild() {
            set -e
            CHART_NAME="$1"
            cd scripts
            ./package-and-push --no-push -n $CHART_NAME
            cd ..
            set +e
          }
          helmTemplateBuild() {
            if [[ ${{steps.changed-files.outputs.any_modified}} == 'true' ]]; then
              CHART_NAME="$1"
              cloneHelmTemplate
              echo "Running package and push"
              ./package-and-push --no-push -n $CHART_NAME
              cd $GITHUB_WORKSPACE
              set +e
            fi
          }
          imageScan(){
            set -e
            export IMAGE_NAME="$1"
            trivy image -f json -o trivy_image_scan_result.json  --severity HIGH,CRITICAL --scanners vuln $IMAGE_NAME:latest
            dockle -f json -o dockle_image_scan_result.json $IMAGE_NAME:latest
            python3 - <<EOF
          import requests
          import json
          import os
          from slack_sdk import WebClient
          from slack_sdk.errors import SlackApiError
          IMAGE_SCAN_API_URL = os.environ.get('IMAGE_SCAN_API_URL')
          CONVOY_API_KEY = os.environ.get('CONVOY_API_KEY')
          REPO = os.environ.get('REPO')
          IMAGE_NAME = os.environ.get('IMAGE_NAME')

          def post_to_slack(message):
            usergroup_id=os.environ.get('DEVOPS_TEAM')
            mention = f"<!subteam^{usergroup_id}>"
            full_message=f"{mention}\n vulnerability validation failed in \`{REPO}\` for \`{IMAGE_NAME}\`, please check \n\`\`\`{message}\`\`\`"
            client = WebClient(token=os.environ.get('SLACK_TOKEN'))
            try:
              response = client.chat_postMessage(channel=os.environ.get('CHANNEL_ID'), text=full_message)
              return response["ok"]
            except SlackApiError as e:
              print(f"Error posting to Slack: {e.response['error']}")
              return False

          with open('trivy_image_scan_result.json') as json_file:
            trivy_json = json.load(json_file)
          with open('dockle_image_scan_result.json') as json_file:
            dockle_json = json.load(json_file)
          payload = {
            "repository": REPO,
            "CVE":trivy_json,
            "DOCKER_BEST_PRACTICE":dockle_json,
          }

          headers = {
            'Content-Type': 'application/json',
            'x-api-key': CONVOY_API_KEY
          }
          
          try:
            response = requests.post(IMAGE_SCAN_API_URL, json=payload, headers=headers)
            if response.status_code == 200:
              print(response.status_code)
              print(response.text)
            elif response.status_code == 409:
              print(json.dumps(response.json(), indent=2))
              print("Get approval for these vulnerabilities or fix them")
              exit(1)
            else:
              print(response.status_code)
              print(response.text)
              post_to_slack(response.text)
              exit(1)
          except Exception as e:
            print(e)
            post_to_slack(e)
            exit(1)
          EOF
            set +e
          }
          javaDockerBuild() {
            set -e
            IMAGE_NAME="$1"
            configureJava
            IMAGE_NAME="$1"
            gradlewMavenDocker
            imageScan $IMAGE_NAME
            set +e
          }
          javaLibraryBuild() {
            set -e
            configureJava
            gradlewMaven
            set +e
          }
          lintCheck() {
            flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
            flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          }
          makeBuild() {
            set -e
            make service
            set +e
          }
          makeImage() {
            set -e
            make image
            set +e
          }
          modifiedDir() {
            directories=$(echo ${{steps.changed-files-all.outputs.all_changed_and_modified_files}} | tr ' ' '\n' | awk -F'/' '{print $1}' | sort -u)
            directories=$(echo $directories | tr '\n' ' ')
            echo "$directories"
          }
          mvnwBuild() {
            set -e
            ./mvnw install -Dnative -DskipTests -Dquarkus.native.remote-container-build=true
            set +e
          }
          opaBuild() {
            set -e
            setupOpa
            ~/opa build policies --output bundles/opa-policies.tar.gz
            set +e
          }
          opsImageBuild() {
            set -e
            ./mvnw install -Dnative -DskipTests -Dquarkus.native.remote-container-build=true
            dockerBuild "$@"
            set +e
          }
          pythonLibraryBuild() {
            set -e
            ARTIFACT="$1"
            createPipConf
            installPythonDependencies $ARTIFACT
            lintCheck
            gradlewPythonwheel
            set +e
          }
          setupOpa() {
            curl -L -o ~/opa https://openpolicyagent.org/downloads/v0.61.0/opa_linux_amd64_static
            chmod 755 ~/opa
            curl -L -o ~/opa_darwin_amd64 https://openpolicyagent.org/downloads/v0.61.0/opa_darwin_amd64
            curl -L -o ~/opa_darwin_amd64.sha256 https://openpolicyagent.org/downloads/v0.61.0/opa_darwin_amd64.sha256
            ~/opa version
          }
          terraformBuild(){
            set -e
            modifiedDir
            BASE_DIR=$PWD
            BUILD_DIR=$BASE_DIR/build
            mkdir -p $BUILD_DIR
            DIRECTORIES=$(modifiedDir)
            EXCLUDE_DIR=("build",".github",".gitignore","convoy.yaml","README.md")
            for DIR in $DIRECTORIES
            do
              if [[ " ${EXCLUDE_DIR[*]} " != *"$DIR"* ]]; then 
                echo "building  ${DIR}"
                ARTIFACT_FILE=$BUILD_DIR/${DIR}.zip
                cd $BASE_DIR/$DIR
                VERSION=$(yq .version convoy.yaml)
                echo terraform_build $BASE_DIR/$DIR $ARTIFACT_FILE
                terraform_build $PWD $ARTIFACT_FILE
              fi
            done
            ls -lrta $BUILD_DIR
            set +e
          }
          tsmZipBuild() {
            set -e
            ARTIFACT="$1"
            mkdir -p build; cd tsmv101; terraform_build $PWD ../build/$ARTIFACT.zip; cd ../build; ls -l;
            unzip -l $ARTIFACT.zip
            cd ..
            set +e
          }
          build() {
            type="$1"
            check=$(grep "$type" convoy.yaml)
            if [[ -z "$check" ]]; then
              return
            fi
            mkdir -p $HOME/.m2
            cp .github/scripts/settings.xml $HOME/.m2/settings.xml
            cat $HOME/.m2/settings.xml
            git config --global url."https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com".insteadOf "https://github.com"
            version=$(yq '.version' convoy.yaml)
            language=$(yq '.language' convoy.yaml)
            if [[ "$language" == "terraform" ]]; then
              terraformBuild
              return
            fi
            yq e ".generates.$type[] | [.name, .buildFunction, .extension, .dockerFile] | @csv" convoy.yaml | sed 's/,/ /g' > artifacts.txt
            lineNumber=1
            while :; do
              echo ------------------------------
              artifactData=$(sed "$lineNumber!d" artifacts.txt)
              if [[ -z "$artifactData" ]]; then
                break
              fi
              read -r name buildFunction ext file <<< "$artifactData"
              echo "Name: $name"
              echo "buildFunction: $buildFunction"
              echo "Ext: $ext"
              echo "Version: $version"
              echo "dockerFile: $file"
              $buildFunction $name $ext $version $file 
              echo "$type $name done"
              echo ------------------------------
              lineNumber=$((lineNumber+1))
            done
            rm artifacts.txt
          }
          set +e
          build "artifacts"
          build "dockerImages"
          build "helmCharts"
          build "terraform"

      - name: Cleanup
        if: always()
        run: |
          set +e
          sudo rm -rf target
          docker container prune --force
          docker volume prune --force

  build-arm:
    if: ${{ inputs.type == 'arm' }}
    runs-on: ARM64
    env:
      GITHUB_USER: ${{ secrets.CIPIPELINE_GITHUB_USER }}
      GITHUB_TOKEN: ${{ secrets.CIPIPELINE_GITHUB_TOKEN }}
      NEXUS_PROTOCOL: ${{vars.NEXUS_PROTOCOL_LOCAL}}
      NEXUS_USERNAME: ${{secrets.CIPIPELINE_NEXUS_USERNAME}}
      NEXUS_PASSWORD: ${{secrets.CIPIPELINE_NEXUS_PASSWORD}}
      NEXUS_SERVER_ENDPOINT: ${{vars.NEXUS_SERVER_ENDPOINT_LOCAL}}
      CHANNEL_ID: ${{vars.CONVOY_ALERTS_SLACK_ID}}
      CONVOY_API_KEY: ${{secrets.CONVOY_AUTH_TOKEN}}
      DEVOPS_TEAM: ${{vars.DEVOPS_TEAM_SLACK_ID}}
      IMAGE_SCAN_API_URL: http://${{vars.CONVOY_API_ENDPOINT}}/devops/code-scan/vulnerabilities/validate
      REPO: "${{github.repository}}"
      SLACK_TOKEN: ${{secrets.SLACK_TOKEN}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      - name: Build
        shell: bash
        run: |
          dockerBuild() {
            set -e
            IMAGE="$1"
            FILE="$4"
            if [[ "$FILE" == "null" || -z "$FILE" ]]; then
              FILE="./Dockerfile"
            fi
            echo "$FILE"
            docker build -f $FILE -t $IMAGE .
            imageScan "$IMAGE"
            set +e
          }
          imageScan() {
            set -e
            export IMAGE_NAME="$1"
            trivy image -f json -o trivy_image_scan_result.json  --severity HIGH,CRITICAL --scanners vuln $IMAGE_NAME:latest
            dockle -f json -o dockle_image_scan_result.json $IMAGE_NAME:latest
            python3 - <<EOF
          import requests
          import json
          import os
          from slack_sdk import WebClient
          from slack_sdk.errors import SlackApiError
          IMAGE_SCAN_API_URL = os.environ.get('IMAGE_SCAN_API_URL')
          CONVOY_API_KEY = os.environ.get('CONVOY_API_KEY')
          REPO = os.environ.get('REPO')
          IMAGE_NAME = os.environ.get('IMAGE_NAME')

          def post_to_slack(message):
            usergroup_id=os.environ.get('DEVOPS_TEAM')
            mention = f"<!subteam^{usergroup_id}>"
            full_message=f"{mention}\n vulnerability validation failed in \`{REPO}\` for \`{IMAGE_NAME}\`, please check \n\`\`\`{message}\`\`\`"
            client = WebClient(token=os.environ.get('SLACK_TOKEN'))
            try:
              response = client.chat_postMessage(channel=os.environ.get('CHANNEL_ID'), text=full_message)
              return response["ok"]
            except SlackApiError as e:
              print(f"Error posting to Slack: {e.response['error']}")
              return False

          with open('trivy_image_scan_result.json') as json_file:
            trivy_json = json.load(json_file)
          with open('dockle_image_scan_result.json') as json_file:
            dockle_json = json.load(json_file)
          payload = {
            "repository": REPO,
            "CVE":trivy_json,
            "DOCKER_BEST_PRACTICE":dockle_json,
          }

          headers = {
            'Content-Type': 'application/json',
            'x-api-key': CONVOY_API_KEY
          }
          
          try:
            response = requests.post(IMAGE_SCAN_API_URL, json=payload, headers=headers)
            if response.status_code == 200:
              print(response.status_code)
              print(response.text)
            elif response.status_code == 409:
              print(json.dumps(response.json(), indent=2))
              print("Get approval for these vulnerabilities or fix them")
              exit(1)
            else:
              print(response.status_code)
              print(response.text)
              post_to_slack(response.text)
              exit(1)
          except Exception as e:
            print(e)
            post_to_slack(e)
            exit(1)
          EOF
            set +e
          }
          jarBuild() {
            set -e
            VERSION="$3"
            ./mvnw package -Dversion=$VERSION
            set +e
          }
          mvnwBuild() {
            set -e
            ./mvnw install -Dnative -DskipTests -Dquarkus.native.remote-container-build=true
            set +e
          }
          opsImageBuild() {
            set -e
            mvnwBuild
            dockerBuild "$@"
            set +e
          }
          build() {
            type="$1"
            check=$(grep "$type" convoy.yaml)
            if [[ -z "$check" ]]; then
              return
            fi
            version=$(yq '.version' convoy.yaml)
            yq e ".generates.$type[] | [.name, .buildFunction, .extension, .dockerFile] | @csv" convoy.yaml | sed 's/,/ /g' > artifacts.txt
            lineNumber=1
            while :; do
              echo ------------------------------
              artifactData=$(sed "$lineNumber!d" artifacts.txt)
              if [[ -z "$artifactData" ]]; then
                break
              fi
              read -r name buildFunction ext file <<< "$artifactData"
              echo "Name: $name"
              echo "buildFunction: $buildFunction"
              echo "Ext: $ext"
              echo "Version: $version"
              echo "dockerFile: $file"
              $buildFunction $name $ext $version $file 
              echo "$type $name done"
              echo ------------------------------
              lineNumber=$((lineNumber+1))
            done
            rm artifacts.txt
          }
          set +e
          build "artifacts"
          build "dockerImages"
          build "helmCharts"

      - name: Cleanup
        if: always()
        run: |
          set +e
          sudo rm -rf target
          docker container prune --force
          docker volume prune --force
