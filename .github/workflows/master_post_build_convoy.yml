---
name: Build Status POST API to Convoy
on:
  workflow_call:
    inputs:
      IS_ANY_ARTIFACT_GENERATED: 
        description: 'Flag if any artifact was pushed during build'
        required: true
        default: "true"
        type: string
      ARTIFACT_CHECKSUMS:
        description: 'Consolidated Checksum of generated artifacts'
        default: ""
        type: string
      TAG:
        description: 'Tag created during create-tag'
        required: true
        type: string
      LABEL:
        description: 'Release label for upload'
        required: true
        type: string
      GENERATED_ARTIFACTS:
        description: Stringified json containing value for field 'artifacts' in payload
        default: ""
        type: string

jobs:
  
  post-build-status-to-convoy:
    runs-on: non-build
    env: 
      SLACK_WEBHOOK_URL: ${{ secrets.CONVOY_ALERTS_SLACK_URL }}
      TAG: "${{inputs.TAG}}"
      LABEL: "${{inputs.LABEL}}"
    steps:
      - uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      - name: Get branch name
        shell: bash
        run: |
          echo "SOURCE_BRANCH=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV

      # - name: Check specific file changes
      #   if: endsWith(github.event.pull_request.base.repo.name, 'helm-svc-defns')
      #   id: helm-files
      #   uses: tj-actions/changed-files@v42.0.2
      #   with:
      #     files: |
      #       Chart.yaml
      #       services/**

      - uses: technote-space/workflow-conclusion-action@v3.0.3
        if: ${{ startsWith(env.SOURCE_BRANCH,'rel-') || env.SOURCE_BRANCH == 'main' }}
        with:
          GITHUB_TOKEN: ${{ secrets.CIPIPELINE_GITHUB_TOKEN }}

      - name: POST API to Convoy
        env:
          API_URL: http://${{vars.CONVOY_DEV_API_ENDPOINT}}/devops/git-metadata/build-status
          API_URL_REPLICATE: http://${{vars.CONVOY_DEV_API_ENDPOINT}}/devops/applications/replicate-artifacts
          API_KEY: ${{secrets.CONVOY_AUTH_TOKEN}}
          ARTIFACT_CHECKSUMS: ${{inputs.ARTIFACT_CHECKSUMS}}
          IS_ANY_ARTIFACT_GENERATED: ${{inputs.IS_ANY_ARTIFACT_GENERATED}}
          GENERATED_ARTIFACTS: ${{inputs.GENERATED_ARTIFACTS}}
          # HELM_CHART_FILES_MODIFIED: ${{steps.helm-files.outputs.any_modified}}
          COMMIT_HASH: "${{github.sha}}"
          REPO: "${{github.event.pull_request.base.repo.name}}"
          BASE_BRANCH: "${{github.event.pull_request.base.ref}}"
          GITHUB_TOKEN: ${{ secrets.CIPIPELINE_GITHUB_TOKEN }}
          OWNER: ${{github.repository_owner}}
          STATUS: "${{env.WORKFLOW_CONCLUSION}}"
          SOURCE_BRANCH: "${{env.SOURCE_BRANCH}}"
          TAG: "${{env.TAG}}"
          LABEL: "${{env.LABEL}}"
        run: |
            python3 - <<EOF
            
            import requests
            import json
            import os
            import time
            import base64
            import yaml

            def get_tf_modules_folders():
              headers = {
                'Authorization': f'Bearer {GITHUB_TOKEN}',
                'Accept': 'application/vnd.github.v3+json',
              }
              url = f'${{vars.GH_API_URL}}/repos/{OWNER}/{REPO}/contents'
              params = {'ref': BASE_BRANCH}
              response = requests.get(url, headers=headers, params=params)
              contents = response.json()
              directories = [item['name'] for item in contents if item['type'] == 'dir' and item['name'] != '.github']
              return directories


            def get_artifacts_tf():
              artifacts = []
              tf_modules_folders = get_tf_modules_folders()
              print("Terraform Folders")
              for folder in tf_modules_folders:
                if '.github' in folder or len(folder) == 0:
                  continue
                print(folder)  
                path = f'./{folder}/convoy.yaml'
                with open(path, 'r') as module_content:
                  module_data = yaml.safe_load(module_content)
                tf_module = module_data.get('generates')
                for artifact_type, artifact in tf_module.items():
                  for object in artifact:
                    element={}
                    element["type"] = artifact_type
                    element["releaseManifestKey"] = object["releaseManifestKey"] 
                    element["name"] = object["name"]
                    element["extension"] = object["extension"]
                    element["version"] = module_data.get('version')
                    version = module_data.get('version')
                    element["path"] = f"tessell-artifacts/{LABEL}/{object['name']}/{object['name']}-{version}.{object['extension']}"
                    artifacts.append(element)
              return artifacts

            def get_artifacts(generates, version):
              artifacts=[]
              for artifact_type, artifact in generates.items():
                for object in artifact:
                  if object.get("excludeFromReleaseManifest"):
                    print("Artifact excluded from Release Manifest")
                    continue
                  element={}
                  element["type"] = artifact_type
                  element["releaseManifestKey"] = object["releaseManifestKey"]
                  element["name"] = object["name"]
                  element["version"] = version
                  try:
                    element["extension"] = f".{object['extension']}" if 'extension' in object and object['extension'] else ""
                  except:
                    print("Extension Details not present")
                  if artifact_type == 'artifacts':
                    element["path"] = f"{APP_GROUP}-artifacts/{LABEL}/{object['name']}/{object['name']}-{version}{element['extension']}"
                  artifacts.append(element)
              if len(artifacts) == 0: 
                return
              return artifacts
            
            def post_request(payload):
              headers = {
                'Content-Type': 'application/json',
                'x-api-key': API_KEY
              }
              max_retries = 3
              retry_delay = 5
          
              for _ in range(max_retries):
                response = requests.post(API_URL, json=payload, headers=headers)
                if response.status_code == 200:
                  print(response.status_code)
                  print(response.text)
                  break
                else:
                  print(response.status_code)
                  print(response.text)
                  print(f"Retrying... ({max_retries - _} attempts left)")
                  time.sleep(retry_delay)
              else:
                print("API request failed after retries.")
                exit(1)
              print("POST request Complete")

            def get_software_def_url(payload, api_url):
              if STATUS == 'SUCCESSFUL':
                api_url = os.environ.get('API_URL_REPLICATE')
                payload.pop("buildStatus")              
              return payload, api_url

            API_URL = os.environ.get('API_URL')
            API_KEY = os.environ.get('API_KEY')
            ARTIFACT_CHECKSUMS = os.environ.get('ARTIFACT_CHECKSUMS')
            IS_ANY_ARTIFACT_GENERATED = os.environ.get('IS_ANY_ARTIFACT_GENERATED')
            # HELM_CHART_FILES_MODIFIED = os.environ.get('HELM_CHART_FILES_MODIFIED')
            REPO = os.environ.get('REPO')
            COMMIT_HASH = os.environ.get('COMMIT_HASH')
            BASE_BRANCH = os.environ.get('BASE_BRANCH')
            GITHUB_TOKEN = os.environ.get('GITHUB_TOKEN')
            LABEL = os.environ.get('LABEL')
            STATUS = (os.environ.get('STATUS')).upper()
            TAG = os.environ.get('TAG')
            REPO = os.environ.get('REPO')
            OWNER = os.environ.get('OWNER')
            
            if not(bool(BASE_BRANCH)):
              BASE_BRANCH = os.environ.get('SOURCE_BRANCH')
            
            if STATUS == 'SUCCESS':
              STATUS = 'SUCCESSFUL'
            if STATUS == 'FAILURE':
              STATUS = 'FAILED'
              IS_ANY_ARTIFACT_GENERATED = "false"

            # if REPO.endswith("helm-svc-defns") and HELM_CHART_FILES_MODIFIED == 'false':
            #   IS_ANY_ARTIFACT_GENERATED = "false"

            with open('convoy.yaml', 'r') as yaml_file:
              yaml_data = yaml.safe_load(yaml_file)
            APP_GROUP = yaml_data.get('appGroup')
            payload = {
              "repoName": REPO,
              "appGroup": APP_GROUP,
              "commitHash": COMMIT_HASH[:7],
              "baseBranch": BASE_BRANCH,
              "buildStatus": STATUS,
              "artifactGenerated": IS_ANY_ARTIFACT_GENERATED == "true",
            }

            if IS_ANY_ARTIFACT_GENERATED == 'true':
                if GENERATED_ARTIFACTS is not empty:
                    payload["artifacts"] = json.loads(GENERATED_ARTIFACTS)
                else:
                    generates = yaml_data.get('generates')
                    language = yaml_data.get('language')
                    if generates != None:
                      version = yaml_data.get('version')
                      if version == None:
                        version = TAG
                      payload["artifacts"] = get_artifacts(generates, version)
                      if payload["artifacts"] == None:
                        del payload["artifacts"]
                    elif language == 'terraform':
                      payload["artifacts"] = get_artifacts_tf()
                    elif generates == None:
                      print("No artifact generated in the repo.")
                    else:
                      print(f"Not able to build payload for API call. Please check convoy.yaml content")
                      exit(1)

                    if generates and "softwareImages" in generates:
                      payload, API_URL = get_software_def_url(payload, API_URL)
                  
                    if ARTIFACT_CHECKSUMS and payload.get("artifacts"):
                      checksum_map = {}
                      parts = ARTIFACT_CHECKSUMS.strip('%').split('%')
                      for part in parts:
                        if part:
                          key, value = part.split(':')
                          checksum_map[key] = value
                  
                      for artifact in payload["artifacts"]:
                        key = artifact["name"]
                        type = artifact["type"]
                        if type == "artifacts":
                          if key in checksum_map:
                            artifact["checksum"] = checksum_map[key]
                          else:
                            print(f"Checksum not found for artifact: {key}")
                            exit(1)

            print(json.dumps(payload, indent=4))
            post_request(payload)
            EOF

      - name: Slack Notification
        uses: act10ns/slack@v2.0.0
        with:
            status: ${{ job.status }}
            steps: ${{ toJson(steps) }}
            channel: ${{ secrets.CONVOY_ALERTS_SLACK_CHANNEL  }}
        if: failure()
