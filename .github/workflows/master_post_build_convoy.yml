---
name: Build Status POST API to Convoy
on:
  workflow_call:
    
jobs:
  
  post-build-status-to-convoy:
    runs-on: non-build
    env: 
      SLACK_WEBHOOK_URL: ${{ secrets.CONVOY_ALERTS_SLACK_URL }}
    steps:
      - uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      - name: Get branch name
        shell: bash
        run: |
          echo "SOURCE_BRANCH=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV

      - uses: technote-space/workflow-conclusion-action@v3.0.3
        if: ${{ startsWith(env.SOURCE_BRANCH,'rel-') || env.SOURCE_BRANCH == 'main' }}
        with:
          GITHUB_TOKEN: ${{ secrets.CIPIPELINE_GITHUB_TOKEN }}

      - name: POST API to Convoy
        env:
          API_URL: http://${{vars.CONVOY_DEV_API_ENDPOINT}}/devops/git-metadata/build-status
          API_KEY: ${{secrets.CONVOY_AUTH_TOKEN}}
          COMMIT_HASH: "${{github.sha}}"
          REPO: "${{github.repository}}"
          BASE_BRANCH: "${{github.event.pull_request.base.ref}}"
          STATUS: "${{env.WORKFLOW_CONCLUSION}}"
          SOURCE_BRANCH: "${{env.SOURCE_BRANCH}}"
        run: |
            python3 - <<EOF
            
            import requests
            import json
            import os
            import time
            import base64
            import yaml

            API_URL = os.environ.get('API_URL')
            API_KEY = os.environ.get('API_KEY')
            REPO = os.environ.get('REPO')
            COMMIT_HASH = os.environ.get('COMMIT_HASH')
            BASE_BRANCH = os.environ.get('BASE_BRANCH')
            STATUS = (os.environ.get('STATUS')).upper()
            
            if not(bool(BASE_BRANCH)):
              BASE_BRANCH = os.environ.get('SOURCE_BRANCH')
            
            OWNER = REPO.split("/")
            REPO = OWNER[1]
            
            if STATUS == 'SUCCESS':
              STATUS = 'SUCCESSFUL'
            if STATUS == 'FAILURE':
              STATUS = 'FAILED'

            with open('convoy.yaml', 'r') as yaml_file:
              yaml_data = yaml.safe_load(yaml_file)
            APP_GROUP = yaml_data.get('appGroup')
            payload = {
              "repoName": REPO,
              "appGroup": APP_GROUP,
              "commitHash": COMMIT_HASH[:7],
              "baseBranch": BASE_BRANCH,
              "buildStatus": STATUS
            }
            print(payload)
            headers = {
              'Content-Type': 'application/json',
              'x-api-key': API_KEY
            }

            max_retries = 3
            retry_delay = 20 
        
            for _ in range(max_retries):
                response = requests.post(API_URL, json=payload, headers=headers)
                if response.status_code == 200:
                    print(response.status_code)
                    print(response.text)
                    break
                else:
                    print(response.status_code)
                    print(response.text)
                    print(f"Retrying... ({max_retries - _} attempts left)")
                    time.sleep(retry_delay)
            else:
                print("API request failed after retries.")
                exit(1)
            print("POST request Complete")
            EOF

      - name: Slack Notification
        uses: act10ns/slack@v2.0.0
        with:
            status: ${{ job.status }}
            steps: ${{ toJson(steps) }}
            channel: ${{ secrets.CONVOY_ALERTS_SLACK_CHANNEL  }}
        if: failure()
          
