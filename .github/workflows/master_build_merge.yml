---
name: Tessell Pipelines Code Build Post merge
on:
  workflow_call:
    inputs:
      type:
        description: 'This is used to determine build type'
        required: true
        type: string
      tag:
        description: 'Latest tag for upload'
        required: true
        type: string
      label:
        description: 'Release label for upload'
        required: true
        type: string

jobs:

  build-ui:
    if: ${{ inputs.type == 'ui-build' }}
    runs-on: ui-build
    env:
      LATEST_TAG: ${{inputs.tag}}
      LABEL: ${{inputs.label}}
      DOCKERHUB_ORG: ${{vars.DOCKERHUB_ORG}}
      GITHUB_USER: ${{ secrets.CIPIPELINE_GITHUB_USER }}
      GITHUB_TOKEN: ${{ secrets.CIPIPELINE_GITHUB_TOKEN }}
      NEXUS_PROTOCOL: ${{vars.NEXUS_PROTOCOL_PUBLIC}}
      NEXUS_USERNAME: ${{secrets.CIPIPELINE_NEXUS_USERNAME}}
      NEXUS_PASSWORD: ${{secrets.CIPIPELINE_NEXUS_PASSWORD}}
      NEXUS_SERVER_ENDPOINT: ${{vars.NEXUS_SERVER_ENDPOINT_PUBLIC}}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      REPO: "${{github.event.pull_request.base.repo.name}}"
      NEXUS_PULL_REPOS_M2: tessell-m2-development
      NEXUS_PULL_REPOS_PY: tessell-py-development
      NEXUS_PUSH_REPOS_PY: tessell-repos-py-development
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      - name: Build
        shell: bash
        run: |
          gradlewUI() {
            set +e
            rm ~/.npmrc
            rm ~/.yarnrc
            TOKEN=$(echo -n '${{env.NEXUS_USERNAME}}:${{env.NEXUS_PASSWORD}}' | base64 -w 0)
            echo '"@tessell:registry" "${{env.NEXUS_PROTOCOL}}://${{ env.NEXUS_SERVER_ENDPOINT }}/repository/${{ vars.NEXUS_PUSH_REPOS_NPM }}/"' >> .yarnrc
            echo "always-auth=true" >> .npmrc
            echo "_auth=$TOKEN" >> .npmrc
            cat .npmrc
            cat .yarnrc
            set -e
            ENV_JSON='${{secrets.TESSELL_UI_ENV_SECRET}}'
            echo "$ENV_JSON" | jq -r 'to_entries | .[] | "\(.key)=\"\(.value)\"" ' | sed '1s/^/\n/' >> .env
            cat .env
            ./gradlew zipUiBuild  publish --console plain \
              -Pnexus_push_username="${{ secrets.CIPIPELINE_NEXUS_USERNAME }}" \
              -Pnexus_push_password="${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}" \
              -Pnexus_username="${{ secrets.CIPIPELINE_NEXUS_USERNAME }}" \
              -Pnexus_password="${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}" \
              -Pnexus_push_repo_m2="${{ vars.NEXUS_PUSH_REPOS_M2 }}" \
              -Pnexus_pull_repo_m2="${{ env.NEXUS_PULL_REPOS_M2 }}"
            set +e
          }
          npmBuild() {
            set -e
            npm install
            npm run build
            set +e 
            rm ~/.npmrc
            TOKEN=$(echo -n '${{env.NEXUS_USERNAME}}:${{env.NEXUS_PASSWORD}}' | base64 -w 0)
            echo "//${{ env.NEXUS_SERVER_ENDPOINT }}/repository/:_auth = $TOKEN" >> ~/.npmrc
            echo "//${{ env.NEXUS_SERVER_ENDPOINT }}/repository/:always-auth = true" >> ~/.npmrc 
            echo "@tessell:registry=${{env.NEXUS_PROTOCOL}}://${{ env.NEXUS_SERVER_ENDPOINT }}/repository/${{ env.NEXUS_REPO_NPM }}" >> ~/.npmrc
            cat ~/.npmrc
            set -e
            version="$3"
            yq ".version = \"$version\"" package.json > tmp_package.json
            mv tmp_package.json package.json
            npm publish   
            set +e
          }
          build() {
            type="$1"
            check=$(grep "$type" convoy.yaml)
            if [[ -z "$check" ]]; then
              return
            fi
            version=$(yq '.version' convoy.yaml)
            while IFS=$'\t' read -r name buildFunction ext file _; do
              echo "Name: $name"
              echo "buildFunction: $buildFunction"
              echo "Ext: $ext"
              echo "Version: $version"
              echo "dockerFile: $file"
              $buildFunction "$name" "$ext" "$version" "$file"
            done < <(yq e ".generates.$type[] | [.name, .buildFunction, .extension, .dockerFile] | @tsv" convoy.yaml)
          }
          set +e
          build "artifacts"
          build "dockerImages"
          build "helmCharts"
                  
      - name: Slack Notification
        uses: act10ns/slack@v2.0.0
        if: failure()
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: ${{ secrets.SLACK_DEVOPS_CHANNEL }}
    
  build-ubuntu-latest:
    if: ${{ inputs.type == 'ubuntu-latest' }}
    runs-on: ubuntu-latest
    env:
      LATEST_TAG: ${{inputs.tag}}
      LABEL: ${{inputs.label}}
      GOPATH: /home/runner/go
      DOCKERHUB_ORG: ${{vars.DOCKERHUB_ORG}}
      NEXUS_PULL_REPOS_PY: tessell-py-development
      NEXUS_PULL_REPOS_M2: tessell-m2-development
      GITHUB_USER: ${{ secrets.CIPIPELINE_GITHUB_USER }}
      GITHUB_TOKEN: ${{ secrets.CIPIPELINE_GITHUB_TOKEN }}
      NEXUS_PROTOCOL: ${{vars.NEXUS_PROTOCOL_PUBLIC}}
      NEXUS_USERNAME: ${{secrets.CIPIPELINE_NEXUS_USERNAME}}
      NEXUS_PASSWORD: ${{secrets.CIPIPELINE_NEXUS_PASSWORD}}
      NEXUS_ARTIFACT_REPO: ${{vars.NEXUS_REPO_TESSELL_ARTIFACTS}}
      NEXUS_SERVER_ENDPOINT: ${{vars.NEXUS_SERVER_ENDPOINT_PUBLIC}}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      REPO: "${{github.event.pull_request.base.repo.name}}"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5.0.0
        with:
          python-version: 3.9

      - name: Setup Go
        uses: actions/setup-go@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v4.0.0
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3.0.0

      - name: Login to docker
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Create pip conf
        run: |
          echo "[global]" > pip.conf
          echo "index =  ${{env.NEXUS_PROTOCOL}}://${{ secrets.CIPIPELINE_NEXUS_USERNAME }}:${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}@${{ env.NEXUS_SERVER_ENDPOINT }}/repository/${{ env.NEXUS_PULL_REPOS_PY }}/simple" >> pip.conf
          echo "index-url = ${{env.NEXUS_PROTOCOL}}://${{ secrets.CIPIPELINE_NEXUS_USERNAME }}:${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}@${{ env.NEXUS_SERVER_ENDPOINT }}/repository/${{ env.NEXUS_PULL_REPOS_PY }}/simple" >> pip.conf
          echo "extra-index-url = https://pypi.org/simple" >> pip.conf
          sudo cp pip.conf /etc/pip.conf
        shell: bash

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest twine wheel
          if [ -f requirements.txt ]; then
              pip install -r requirements.txt --trusted-host ${{env.NEXUS_SERVER_ENDPOINT}};
          fi
          curl -L -o install-aws.sh https://raw.githubusercontent.com/unfor19/install-aws-cli-action/master/entrypoint.sh && \
          chmod +x install-aws.sh
          sudo ./install-aws.sh "v2" "amd64"
          rm install-aws.sh

      - name: Configure AWS Credentials
        run: |
          aws configure set aws_access_key_id ${{ secrets.ARTIFACTS_DEV_ACCESS_KEY }}
          aws configure set aws_secret_access_key ${{ secrets.ARTIFACTS_DEV_SECRET_KEY }}
          aws configure set region ap-south-1
      
      - name: Build
        shell: bash
        run: |
          artifactPush() {
            set -e
            ARTIFACT="$1"
            EXT="$2"
            FILE_PATH="$5"
            pushToNexus $FILE_PATH $ARTIFACT $ARTIFACT-${LATEST_TAG}.$EXT
            aws s3 cp $FILE_PATH "s3://${{vars.ARTIFACTS_DEV_S3}}/${LABEL}/$ARTIFACT/$ARTIFACT-${LATEST_TAG}.$EXT"
            set +e
          }
          dockerPush() {
            set -e
            IMAGE="$1"
            BASE_IMAGE="$6"
            docker tag $BASE_IMAGE:latest ${DOCKERHUB_ORG}/$IMAGE:${LATEST_TAG}
            docker push ${DOCKERHUB_ORG}/$IMAGE:${LATEST_TAG}
            set +e
          }
          elasticBuild() {
            set -e
            IMAGE="$1"
            git config --global url."https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com".insteadOf "https://github.com"
            installGoDependencies
            git clone https://github.com/magefile/mage
            cd mage
            go run bootstrap.go
            cd ..
            echo "----------------------------------------------"
            echo "----------- Building Service -----------------"
            export GOPATH=/home/runner/go/bin
            export PATH=/go/bin:/usr/local/go/bin:/opt/maven/bin:/usr/lib/jvm/java-16-openjdk-amd64/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/home/runner/go/bin
            cd filebeat
            mage package
            cp ./build/golang-crossbuild/filebeat-linux-amd64 ./filebeat
            echo "----------------------------------------------"
            echo "------------ Building Image ------------------"
            docker build -t ${DOCKERHUB_ORG}/$IMAGE:${LATEST_TAG} .
            docker push ${DOCKERHUB_ORG}/$IMAGE:${LATEST_TAG}
            cd ..
            echo "----------------------------------------------"
            echo "---------- Creating Tar Files -----------------"
            PACKAGES_DIR=./filebeat/build/distributions/
            mkdir -p $PACKAGES_DIR
            cp ./filebeat/tessell-filebeat-linux.yml $PACKAGES_DIR/filebeat.yml
            cp ./filebeat/build/golang-crossbuild/filebeat-linux-amd64 $PACKAGES_DIR/filebeat
            cp ./filebeat/filebeat.service $PACKAGES_DIR/filebeat.service
            pushd $PACKAGES_DIR
            tar -zcvf filebeat-linux.tar.gz filebeat.yml filebeat filebeat.service
            popd
            cp ./filebeat/tessell-filebeat-windows.yml $PACKAGES_DIR/filebeat.yml
            cp ./filebeat/build/golang-crossbuild/filebeat-windows-amd64.exe $PACKAGES_DIR/filebeat.exe 
            pushd $PACKAGES_DIR
            tar -zcvf filebeat-windows.tar.gz filebeat.yml filebeat.exe
            popd
            mvnDeploy "filebeat-linux" "tar.gz" "./filebeat/build/distributions/filebeat-linux.tar.gz" "tessell.filebeat" "${{env.LATEST_TAG}}"
            mvnDeploy "filebeat-windows" "tar.gz" "./filebeat/build/distributions/filebeat-linux.tar.gz" "tessell.filebeat" "${{env.LATEST_TAG}}"
            set +e
          }
          gradlewDockerTag() {
            ./gradlew dockerTag --console plain \
              -Pnexus_username="${{ secrets.CIPIPELINE_NEXUS_USERNAME }}" \
              -Pnexus_password="${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}" \
              -Pdockerhub_org="${{ env.DOCKERHUB_ORG }}"
          }
          infraProvisionBuild() {
            set -e
            lintCheck
            mkdir -p build/tools
            wget https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/6.0.0/openapi-generator-cli-6.0.0.jar -O build/tools/openapi-generator-cli-6.0.0.jar
            gradlewDockerTag
            set +e
          }
          installGoDependencies() {
            go version
            go install golang.org/x/tools/cmd/goimports@latest
            which go
          }
          lintCheck() {
            flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
            flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          }
          mvnDeploy() {
            ARTIFACT_ID="$1"
            EXTENSION="$2"
            FILE="$3"
            GROUP_ID="$4"
            VERSION="$5"
            mvn deploy:deploy-file -Dnexus_url=${{env.NEXUS_PROTOCOL}}://${{env.NEXUS_SERVER_ENDPOINT}}/repository/tessell-m2-component \
                -Dnexus_username=${NEXUS_USERNAME} -Dnexus_password=${NEXUS_PASSWORD} \
                -DgroupId=$GROUP_ID -DartifactId=$ARTIFACT_ID -Dversion=$VERSION \
                -DgeneratePom=true -Dpackaging=$EXTENSION \
                -Durl=${{env.NEXUS_PROTOCOL}}://${{env.NEXUS_SERVER_ENDPOINT}}/repository/${{vars.NEXUS_PUSH_REPOS_M2}} \
                -Dfile=$FILE -DrepositoryId=nexus
          }
          pushToNexus() {
            FILE_PATH="$1"
            GROUP="$2"
            FILE_NAME="$3"
            curl -v -u ${{env.NEXUS_USERNAME}}:${{env.NEXUS_PASSWORD}} \
                  --upload-file $FILE_PATH \
                  ${{env.NEXUS_PROTOCOL}}://${{env.NEXUS_SERVER_ENDPOINT}}/repository/${{env.NEXUS_ARTIFACT_REPO}}/${{env.LABEL}}/$GROUP/$FILE_NAME
          }
          pythonDockerBuild() {
            set -e
            IMAGE="$1"
            rm pip.conf
            lintCheck
            gradlewDockerTag
            docker push ${DOCKERHUB_ORG}/$IMAGE:${LATEST_TAG}
            set +e
          }
          build() {
            type="$1"
            check=$(grep "$type" convoy.yaml)
            if [[ -z "$check" ]]; then
              return
            fi
            mkdir -p $HOME/.m2
            cp .github/scripts/settings.xml $HOME/.m2/settings.xml
            cat $HOME/.m2/settings.xml
            version=$(yq '.version' convoy.yaml)
            yq e ".generates.$type[] | [.name, .buildFunction, .extension, .dockerFile, .filePath, .baseImage] | @csv" convoy.yaml | sed 's/,/ /g' > artifacts.txt
            lineNumber=1
            while :; do
              echo ------------------------------
              artifactData=$(sed "$lineNumber!d" artifacts.txt)
              if [[ -z "$artifactData" ]]; then
                break
              fi
              read -r name buildFunction ext file <<< "$artifactData"
              echo "Name: $name"
              echo "buildFunction: $buildFunction"
              echo "Ext: $ext"
              echo "Version: $version"
              echo "dockerFile: $file"
              echo "filePath: $filePath"
              echo "baseImage: $baseImage"
              $buildFunction "$name" "$ext" "$version" "$file" "$filePath" "$baseImage"
              echo "Artifact $name done"
              echo ------------------------------
              lineNumber=$((lineNumber+1))
            done
            rm artifacts.txt
          }
          set +e
          build "artifacts"
          build "dockerImages"
          build "helmCharts"

      - name: Slack Notification
        uses: act10ns/slack@v2.0.0
        if: failure()
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: ${{ secrets.SLACK_DEVOPS_CHANNEL }}

  build-amd-go-20:
    if: ${{ inputs.type == 'amd-go-20' }}
    runs-on: amd-go-20
    env:
      LATEST_TAG: ${{inputs.tag}}
      LABEL: ${{inputs.label}}
      DOCKERHUB_ORG: ${{vars.DOCKERHUB_ORG}}
      GITHUB_USER: ${{ secrets.CIPIPELINE_GITHUB_USER }}
      GITHUB_TOKEN: ${{ secrets.CIPIPELINE_GITHUB_TOKEN }}
      NEXUS_PROTOCOL: ${{vars.NEXUS_PROTOCOL_PUBLIC}}
      NEXUS_USERNAME: ${{secrets.CIPIPELINE_NEXUS_USERNAME}}
      NEXUS_PASSWORD: ${{secrets.CIPIPELINE_NEXUS_PASSWORD}}
      NEXUS_ARTIFACT_REPO: ${{vars.NEXUS_REPO_TESSELL_ARTIFACTS}}
      NEXUS_SERVER_ENDPOINT: ${{vars.NEXUS_SERVER_ENDPOINT_PUBLIC}}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      REPO: "${{github.event.pull_request.base.repo.name}}"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      - name: Configure AWS Credentials
        run: |
          aws configure set aws_access_key_id ${{ secrets.PROD_ASSET_ACCESS_KEY }}
          aws configure set aws_secret_access_key ${{ secrets.PROD_ASSET_SECRET_KEY }}
          aws configure set region ap-south-1

      - name: Check go Config
        run: |
          go version
          echo $GOPATH
          echo $GOROOT
          echo $PATH
          go env
      
      - name: Build
        shell: bash
        run: |
          goLibraryBuild() {
            set -e
            ARTIFACT="$1"
            EXTENSION="$2"
            NAME=$(echo "$ARTIFACT" | awk -F '-linux' '{print $1}')
            if [ "$NAME" == "$ARTIFACT" ]; then
                NAME=$(echo "$ARTIFACT" | awk -F '-windows' '{print $1}')
                OS="windows"
            else
                OS="linux"
            fi
            ENGINE=$(echo "$ARTIFACT" | awk -F "$NAME-$OS" '{gsub(/^-|-linux|-windows$/, "", $2); print $2}')
            echo "Name: $NAME, OS: $OS, Engine: $ENGINE"
            if [[ "$ENGINE" == "null" || -z "$ENGINE" ]]; then
              make service os=$OS
            else
              make service os=$OS engine=$ENGINE
            fi
            mvnDeploy "$ARTIFACT" "$EXTENSION" "$ARTIFACT.$EXTENSION" "tessell.$NAME" "${LATEST_TAG}"
            aws s3 cp "$ARTIFACT.$EXTENSION" s3://tesselltools/terls/tessell/$NAME/${LATEST_TAG}/
            set +e
          }
          mvnDeploy() {
            ARTIFACT_ID="$1"
            EXTENSION="$2"
            FILE="$3"
            GROUP_ID="$4"
            VERSION="$5"
            mvn deploy:deploy-file -Dnexus_url=${{env.NEXUS_PROTOCOL}}://${{env.NEXUS_SERVER_ENDPOINT}}/repository/tessell-m2-component \
                -Dnexus_username=${NEXUS_USERNAME} -Dnexus_password=${NEXUS_PASSWORD} \
                -DgroupId=$GROUP_ID -DartifactId=$ARTIFACT_ID -Dversion=$VERSION \
                -DgeneratePom=true -Dpackaging=$EXTENSION \
                -Durl=${{env.NEXUS_PROTOCOL}}://${{env.NEXUS_SERVER_ENDPOINT}}/repository/${{vars.NEXUS_PUSH_REPOS_M2}} \
                -Dfile=$FILE -DrepositoryId=nexus
          }
          build() {
            type="$1"
            check=$(grep "$type" convoy.yaml)
            if [[ -z "$check" ]]; then
              return
            fi
            version=$(yq '.version' convoy.yaml)
            export PATH=${PATH}:$GOPATH/bin
            echo $PATH
            git config --global url."https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com".insteadOf "https://github.com"
            mkdir -p $HOME/.m2
            cp .github/scripts/settings.xml $HOME/.m2/settings.xml
            cat $HOME/.m2/settings.xml
            yq e ".generates.$type[] | [.name, .buildFunction, .extension, .dockerFile, .filePath, .baseImage] | @csv" convoy.yaml | sed 's/,/ /g' > artifacts.txt
            lineNumber=1
            while :; do
              echo ------------------------------
              artifactData=$(sed "$lineNumber!d" artifacts.txt)
              if [[ -z "$artifactData" ]]; then
                break
              fi
              read -r name buildFunction ext file <<< "$artifactData"
              echo "Name: $name"
              echo "buildFunction: $buildFunction"
              echo "Ext: $ext"
              echo "Version: $version"
              echo "dockerFile: $file"
              echo "filePath: $filePath"
              echo "baseImage: $baseImage"
              $buildFunction "$name" "$ext" "$version" "$file" "$filePath" "$baseImage"
              echo "Artifact $name done"
              echo ------------------------------
              lineNumber=$((lineNumber+1))
            done
            rm artifacts.txt
          }
          set +e
          build "artifacts"
          build "dockerImages"
          build "helmCharts"

      - name: Slack Notification
        uses: act10ns/slack@v2.0.0
        if: failure()
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: ${{ secrets.SLACK_DEVOPS_CHANNEL }}
      
  build-amd:
    if: ${{ inputs.type == 'amd' }}
    runs-on: self-hosted
    env:
      LATEST_TAG: ${{inputs.tag}}
      LABEL: ${{inputs.label}}
      DOCKERHUB_ORG: ${{vars.DOCKERHUB_ORG}}
      DOCKERHUB_ORG_DEV: "tesselldev"
      GITHUB_USER: ${{ secrets.CIPIPELINE_GITHUB_USER }}
      GITHUB_TOKEN: ${{ secrets.CIPIPELINE_GITHUB_TOKEN }}
      NEXUS_PROTOCOL: ${{vars.NEXUS_PROTOCOL_LOCAL}}
      NEXUS_USERNAME: ${{secrets.CIPIPELINE_NEXUS_USERNAME}}
      NEXUS_PASSWORD: ${{secrets.CIPIPELINE_NEXUS_PASSWORD}}
      NEXUS_ARTIFACT_REPO: ${{vars.NEXUS_REPO_TESSELL_ARTIFACTS}}
      NEXUS_SERVER_ENDPOINT: ${{vars.NEXUS_SERVER_ENDPOINT_LOCAL}}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      REPO: "${{github.event.pull_request.base.repo.name}}"
      NEXUS_PULL_REPOS_M2: tessell-m2-development
      NEXUS_PULL_REPOS_PY: tessell-py-development
      GOPATH: /home/github/go
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      - name: Check specific file changes
        id: changed-files
        uses: tj-actions/changed-files@v42.0.2
        with:
          files: |
            Chart.yaml
            services/**
            scripts/Dockerfile
            scripts/initializeAutomation.sh

      - name: Check All file changes
        id: changed-files-all
        uses: tj-actions/changed-files@v42.0.2

      - name: Login to docker
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}   

      - name: Install AWS CLI
        run: |
          curl -L -o install-aws.sh https://raw.githubusercontent.com/unfor19/install-aws-cli-action/master/entrypoint.sh && \
          chmod +x install-aws.sh
          sudo ./install-aws.sh "v2" "amd64"
          rm install-aws.sh
      
      - name: Configure AWS Credentials
        run: |
          aws configure set aws_access_key_id ${{ secrets.PROD_ASSET_ACCESS_KEY }}
          aws configure set aws_secret_access_key ${{ secrets.PROD_ASSET_SECRET_KEY }}
          aws configure set region ap-south-1

      - name: Build and Push
        shell: bash
        run: |
          agentBuild () {
            set -e
            installGoDependencies
            ARTIFACT="$1"
            OS=$(echo "$ARTIFACT" | awk -F'[-]' '{print $4}')
            SERVICE=$(echo "$ARTIFACT" | awk -F'[-]' '{print $2}')
            echo $OS
            echo $SERVICE
            echo "Building Service"
            make 
            make clean
            mvnDeploy "$ARTIFACT" "tar" "$ARTIFACT.tar" "tessell.agent" "${{env.LATEST_TAG}}"
            awsS3Push "package/$ARTIFACT.tar" "s3://tesselltools/terls/tessell/agent/${{env.LATEST_TAG}}"
            set +e
          }
          awsConfigureDevqaInfra() {
            aws configure set aws_access_key_id ${{ secrets.DEVQA_INFRA_ACCESS_KEY }}
            aws configure set aws_secret_access_key ${{ secrets.DEVQA_INFRA_SECRET_KEY }}
          }
          awsConfigureTessellArtifacts() {
            aws configure set aws_access_key_id ${{ secrets.ARTIFACTS_DEV_ACCESS_KEY }}
            aws configure set aws_secret_access_key ${{ secrets.ARTIFACTS_DEV_SECRET_KEY }}
          }
          checkFlyway() {
            if [ -d "flyway" ]; then
              echo "The 'flyway' directory exists in this repository."
              DOCKER_FLYWAY_IMAGE_NAME=$(echo ${GITHUB_REPOSITORY%-*} | cut -f2 -d'/')-flyway-migration
              docker tag ${{env.DOCKERHUB_ORG_DEV}}/$DOCKER_FLYWAY_IMAGE_NAME:latest ${{env.DOCKERHUB_ORG}}/${DOCKER_FLYWAY_IMAGE_NAME}:${LATEST_TAG}
              docker push ${{env.DOCKERHUB_ORG}}/${DOCKER_FLYWAY_IMAGE_NAME}:${LATEST_TAG}
            else
              echo "The 'flyway' directory does not exists in this repository."
            fi
          }
          configureJava() {
            echo "JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64" >> $GITHUB_ENV
            echo "PATH=/usr/lib/jvm/java-17-openjdk-amd64/bin:$PATH" >> $GITHUB_ENV
          }
          createPipConf(){
            echo "[global]" > pip.conf
            echo "index =  ${{env.NEXUS_PROTOCOL}}://${{ secrets.CIPIPELINE_NEXUS_USERNAME }}:${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}@${{ env.NEXUS_SERVER_ENDPOINT }}/repository/${{ env.NEXUS_PULL_REPOS_PY }}/simple" >> pip.conf
            echo "index-url = ${{env.NEXUS_PROTOCOL}}://${{ secrets.CIPIPELINE_NEXUS_USERNAME }}:${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}@${{ env.NEXUS_SERVER_ENDPOINT }}/repository/${{ env.NEXUS_PULL_REPOS_PY }}/simple" >> pip.conf
            echo "extra-index-url = https://pypi.org/simple" >> pip.conf
            sudo cp pip.conf /etc/pip.conf
          }
          dbPluginBuild() {
            set -e
            ARTIFACT="$1"
            EXTENSION="$2"
            createPipConf
            if [ -f ./$ARTIFACT/requirements.txt ]; then python3 -m pip install -r ./$ARTIFACT/requirements.txt --dry-run --trusted-host ${{env.NEXUS_SERVER_ENDPOINT}}; fi
            gradlewUploadPlugin
            cd $ARTIFACT/build
            PLUGIN_NAME=$(echo "$ARTIFACT" | tr '-' '_')
            mv "$PLUGIN_NAME-${LATEST_TAG}.$EXTENSION" "$ARTIFACT.$EXTENSION"
            aws s3 cp "$ARTIFACT.$EXTENSION" "s3://tesselltools/terls/tessell/plugins/${{env.LATEST_TAG}}/"
            cd ../..
          }
          dockerBuild() {
            set -e
            IMAGE="$1"
            FILE="$4"
            if [[ "$FILE" == "null" || -z "$FILE" ]]; then
              FILE="./Dockerfile"
            fi
            echo "$FILE"
            docker build -f $FILE -t ${DOCKERHUB_ORG}/$IMAGE:${LATEST_TAG} .
            docker push ${DOCKERHUB_ORG}/$IMAGE:${LATEST_TAG}
            set +e
          }
          dockerBuildOps() {
            set -e
            mvnwBuild
            dockerBuild "$1" "$2" "$3" "$4"
            set +e
          }
          elasticAgentBuild() {
            set -e
            IMAGE="$1"
            GOOS=linux GOARCH=amd64 go build .
            docker build -t ${DOCKERHUB_ORG}/$IMAGE:${LATEST_TAG} .
            docker push ${DOCKERHUB_ORG}/$IMAGE:${LATEST_TAG}
            set +e
          }
          functionBuild() {
            set -e
            ARTIFACT="$1"
            cd tessell;
            OS=$(echo "$ARTIFACT" | awk -F'[-]' '{print $4}')
            CLOUD=$(echo "$ARTIFACT" | awk -F'[-]' '{print $5}')
            echo $OS
            echo $CLOUD
            make OS=$OS CLOUD=$CLOUD nexus_protocol=${{env.NEXUS_PROTOCOL}} nexus_server_endpoint=${{env.NEXUS_SERVER_ENDPOINT}} package
            mvnDeploy "$ARTIFACT" "tar" "$ARTIFACT.tar" "tessell.functions" "${{env.LATEST_TAG}}"
            aws s3 cp "$ARTIFACT.tar" "s3://tesselltools/terls/tessell/functions/${{env.LATEST_TAG}}/"
            cd ..
            set +e
          }
          goDockerBuild() {
            set -e
            IMAGE="$1"
            installGoDependencies
            echo "Building the service"
            export PATH=${PATH}:$GOPATH/bin
            git config --global url."https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com".insteadOf "https://github.com"
            ./setup -g -i
            docker tag $IMAGE:latest ${DOCKERHUB_ORG}/$IMAGE:${LATEST_TAG}
            docker push ${DOCKERHUB_ORG}/$IMAGE:${LATEST_TAG}
            checkFlyway $IMAGE
            set +e
          }
          gradlewMaven(){
            set -e
            ./gradlew mavenDeploy --console plain --refresh-dependencies \
              -Pnexus_push_username="${{ secrets.CIPIPELINE_NEXUS_USERNAME }}" \
              -Pnexus_push_password="${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}" \
              -Pnexus_username="${{ secrets.CIPIPELINE_NEXUS_USERNAME }}" \
              -Pnexus_password="${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}" \
              -Pnexus_push_repo_m2="${{ vars.NEXUS_PUSH_REPOS_M2 }}" \
              -Pnexus_pull_repo_m2="${{ env.NEXUS_PULL_REPOS_M2 }}"
            set +e
          }
          gradlewMavenDocker() {
            ./gradlew mavenPackage dockerTag --console plain \
              -Pnexus_username="${{ secrets.CIPIPELINE_NEXUS_USERNAME }}" \
              -Pnexus_password="${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}" \
              -Pnexus_pull_repo_m2="${{ env.NEXUS_PULL_REPOS_M2 }}" \
              -Pdockerhub_org="${{ env.DOCKERHUB_ORG }}"
          }
          gradlewTwineUpload(){
            set -e
            ./gradlew twineUpload --console plain \
              -Pnexus_push_username="${{ secrets.CIPIPELINE_NEXUS_USERNAME }}" \
              -Pnexus_push_password="${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}" \
              -Pnexus_username="${{ secrets.CIPIPELINE_NEXUS_USERNAME }}" \
              -Pnexus_password="${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}" \
              -Pnexus_push_repo_py="${{ vars.NEXUS_PUSH_REPOS_PY }}" \
              -Pnexus_pull_repo_py="${{ env.NEXUS_PULL_REPOS_PY }}" 
            set +e
          }
          gradlewUploadPlugin() {
            set -e
            ./gradlew createMvnSettings uploadPlugin --console plain \
              -Pnexus_push_username="${{ secrets.CIPIPELINE_NEXUS_USERNAME }}" \
              -Pnexus_push_password="${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}" \
              -Pnexus_username="${{ secrets.CIPIPELINE_NEXUS_USERNAME }}" \
              -Pnexus_password="${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}" \
              -Pnexus_push_repo_m2="${{ vars.NEXUS_PUSH_REPOS_M2 }}" 
            set +e
          }
          helmChart() {
            set -e
            CHART_NAME="$1"
            cd scripts
            ./package-and-push --prod -n $CHART_NAME
            set +e
          }
          helmTemplate() {
            if [[ ${{steps.changed-files.outputs.any_modified}} == 'true' ]]; then
              CHART_NAME="$1"
              GITHUB_WORKSPACE=$(pwd)
              CHART_GITHUB_LOCATION=$GITHUB_WORKSPACE
              TEMPLATE_REPO_GITHUB_LOCATION=$GITHUB_WORKSPACE/../convoy-helm-template
              echo "$CHART_GITHUB_LOCATION"
              echo "$TEMPLATE_REPO_GITHUB_LOCATION"
              echo "TEMPLATE_REPO_GITHUB_LOCATION=$TEMPLATE_REPO_GITHUB_LOCATION"
              echo "Cloning convoy-helm-template"
              rm -rf $TEMPLATE_REPO_GITHUB_LOCATION
              template_version=$(yq --exit-status '.convoy-helm-template' Chart.yaml)
              if [ $? -eq 0 ]; then
                  echo "convoy-helm-template version: $template_version"
              else
                  echo "convoy-helm-template version not found.Exiting."
                  exit 1
              fi
              git clone --branch $template_version https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com/${{github.repository_owner}}/convoy-helm-template.git $TEMPLATE_REPO_GITHUB_LOCATION
              echo "Copying the service values file"
              cp -r $CHART_GITHUB_LOCATION/services/* $TEMPLATE_REPO_GITHUB_LOCATION/helm-chart/values/apps/
              cp -r $CHART_GITHUB_LOCATION/Chart.yaml $TEMPLATE_REPO_GITHUB_LOCATION/helm-chart/Chart.yaml
              set -e
              cd $TEMPLATE_REPO_GITHUB_LOCATION/scripts
              ls -lrta ../helm-chart/values/apps/
              echo "Running package and push"
              ./package-and-push --prod -n $CHART_NAME
              set +e
            fi
          }
          installGoDependencies() {
            go version
            go install golang.org/x/tools/cmd/goimports@latest
            which go
          }
          javaDockerBuild() {
            set -e
            IMAGE="$1"
            configureJava
            gradlewMavenDocker
            docker push ${DOCKERHUB_ORG}/$IMAGE:${LATEST_TAG}
            set +e
          }
          javaLibraryBuild() {
            set -e
            configureJava
            gradlewMaven
            set +e
          }
          makeBuild() {
            set -e
            installGoDependencies
            make service
            ARTIFACT="$1"
            EXTENSION="$2"
            OS=$(echo "$ARTIFACT" | awk -F'[-]' '{print $3}')
            make os=$OS pushprox-client
            make clean
            ls -lrta client-package
            mvnDeploy "$ARTIFACT" "$EXTENSION" "client-package/$ARTIFACT.$EXTENSION" "tessell.pushprox" "${{env.LATEST_TAG}}"
            aws s3 cp client-package/$ARTIFACT.$EXTENSION s3://tesselltools/terls/tessell/pushprox/$VERSION/
            set +e
          }
          makeImage() {
            set -e
            IMAGE="$1"
            make image
            docker tag $IMAGE:latest ${{env.DOCKERHUB_ORG}}/$IMAGE:${LATEST_TAG}
            docker push ${{env.DOCKERHUB_ORG}}/$IMAGE:${LATEST_TAG}
            set +e
          }
          modifiedDir() {
            directories=$(echo ${{steps.changed-files-all.outputs.all_changed_and_modified_files}} | tr ' ' '\n' | awk -F'/' '{print $1}' | sort -u)
            directories=$(echo $directories | tr '\n' ' ')
            echo "$directories"
          }
          mvnwBuild() {
            set -e
            ./mvnw install -Dnative -DskipTests -Dquarkus.native.remote-container-build=true
            set +e
          }
          mvnDeploy() {
            ARTIFACT_ID="$1"
            EXTENSION="$2"
            FILE="$3"
            GROUP_ID="$4"
            VERSION="$5"
            mvn deploy:deploy-file -Dnexus_url=${{env.NEXUS_PROTOCOL}}://${{env.NEXUS_SERVER_ENDPOINT}}/repository/tessell-m2-component \
                -Dnexus_username=${NEXUS_USERNAME} -Dnexus_password=${NEXUS_PASSWORD} \
                -DgroupId=$GROUP_ID -DartifactId=$ARTIFACT_ID -Dversion=$VERSION \
                -DgeneratePom=true -Dpackaging=$EXTENSION \
                -Durl=${{env.NEXUS_PROTOCOL}}://${{env.NEXUS_SERVER_ENDPOINT}}/repository/${{vars.NEXUS_PUSH_REPOS_M2}} \
                -Dfile=$FILE -DrepositoryId=nexus
          }
          opaBuild() {
            set -e
            ARTIFACT="$1"
            EXTENSION="2"
            setupOpa
            ~/opa build policies --output bundles/opa-policies.tar.gz
            awsConfigureTessellArtifacts
            pushToNexus "./bundles/opa-policies.tar.gz" $ARTIFACT "$ARTIFACT-${LATEST_TAG}.$EXTENSION"
            aws s3 cp "bundles/opa-policies.tar.gz" "s3://${{vars.ARTIFACTS_DEV_S3}}/${LABEL}/$ARTIFACTS/$ARTIFACT-${LATEST_TAG}.$EXTENSION"
            set +e
          }
          opsImageBuild() {
            set -e
            ./mvnw install -Dnative -DskipTests -Dquarkus.native.remote-container-build=true
            dockerBuild "$1" "$2" "$3" "$4"
            set +e
          }
          pushToNexus() {
            FILE_PATH="$1"
            GROUP="$2"
            FILE_NAME="$3"
            curl -v -u ${{env.NEXUS_USERNAME}}:${{env.NEXUS_PASSWORD}} \
                  --upload-file $FILE_PATH \
                  ${{env.NEXUS_PROTOCOL}}://${{env.NEXUS_SERVER_ENDPOINT}}/repository/${{env.NEXUS_ARTIFACT_REPO}}/${{env.LABEL}}/$GROUP/$FILE_NAME
          }
          pythonLibraryBuild() {
            set -e
            ARTIFACT="$1"
            createPipConf
            if [ -f ./$ARTIFACT/requirements.txt ]; then python3 -m pip install -r ./$ARTIFACT/requirements.txt --dry-run --trusted-host ${{env.NEXUS_SERVER_ENDPOINT}}; fi
            lintCheck
            gradlewTwineUpload
          }
          setupOpa() {
            curl -L -o ~/opa https://openpolicyagent.org/downloads/v0.61.0/opa_linux_amd64_static
            chmod 755 ~/opa
            curl -L -o ~/opa_darwin_amd64 https://openpolicyagent.org/downloads/v0.61.0/opa_darwin_amd64
            curl -L -o ~/opa_darwin_amd64.sha256 https://openpolicyagent.org/downloads/v0.61.0/opa_darwin_amd64.sha256
            ~/opa version
          }
          terraformBuild() {
            set -e
            BASE_DIR=$PWD
            BUILD_DIR=$BASE_DIR/build
            mkdir -p $BUILD_DIR
            DIRECTORIES=$(modifiedDir)
            EXCLUDE_DIR=("build",".github",".gitignore","convoy.yaml","README.md")
            for DIR in $DIRECTORIES
            do
              if [[ " ${EXCLUDE_DIR[*]} " != *"$DIR"* ]]; then 
                echo "building  ${DIR}"
                ARTIFACT_FILE=$BUILD_DIR/${DIR}.zip
                cd $BASE_DIR/$DIR
                VERSION=$(yq .version convoy.yaml)
                echo terraform_build $BASE_DIR/$DIR $ARTIFACT_FILE
                terraform_build $PWD $ARTIFACT_FILE
                mvnDeploy "$DIR" "zip" "$ARTIFACT_FILE" "tessell.terraform_modules" "$VERSION"
                awsConfigureDevqaInfra
                aws s3 cp "$ARTIFACT_FILE" "s3://tessell-terraform-modules-terls/$DIR/$VERSION/"
              fi
            done
            ls -lrta $BUILD_DIR
            set +e
          }
          tsmZipBuild() {
            set -e
            ARTIFACT="$1"
            VERSION="$3"
            mkdir -p build; cd tsmv101; terraform_build $PWD ../build/$ARTIFACT.zip; cd ../build; ls -l;
            unzip -l $ARTIFACT.zip
            cd ..
            mvnDeploy "$ARTIFACT" "zip" "build/$ARTIFACT.zip" "tessell.tsm.infra" "$VERSION"
            set +e
          }
          build() {
            type="$1"
            check=$(grep "$type" convoy.yaml)
            if [[ -z "$check" ]]; then
              return
            fi
            mkdir -p $HOME/.m2
            cp .github/scripts/settings.xml $HOME/.m2/settings.xml
            cat $HOME/.m2/settings.xml
            git config --global url."https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com".insteadOf "https://github.com"
            version=$(yq '.version' convoy.yaml)
            language=$(yq '.language' convoy.yaml)
            if [[ "$language" == "terraform" ]]; then
              terraformBuild
              return
            fi
            yq e ".generates.$type[] | [.name, .buildFunction, .extension, .dockerFile] | @csv" convoy.yaml | sed 's/,/ /g' > artifacts.txt
            lineNumber=1
            while :; do
              echo ------------------------------
              artifactData=$(sed "$lineNumber!d" artifacts.txt)
              if [[ -z "$artifactData" ]]; then
                break
              fi
              read -r name buildFunction ext file <<< "$artifactData"
              echo "Name: $name"
              echo "buildFunction: $buildFunction"
              echo "Ext: $ext"
              echo "Version: $version"
              echo "dockerFile: $file"
              $buildFunction $name $ext $version $file
              echo "Artifact $name done"
              echo ------------------------------
              lineNumber=$((lineNumber+1))
            done
            rm artifacts.txt
          }
          set +e
          build "artifacts"
          build "dockerImages"
          build "helmCharts"
          build "terraform"

      - name: Cleanup
        if: always()
        run: |
          set +e
          sudo rm -rf target
          docker container prune --force
          docker volume prune --force
                  
      - name: Slack Notification
        uses: act10ns/slack@v2.0.0
        if: failure()
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: ${{ secrets.SLACK_DEVOPS_CHANNEL }}
      
  build-arm:
    if: ${{ inputs.type == 'arm' }}
    runs-on: ARM64
    env:
      LATEST_TAG: ${{inputs.tag}}
      LABEL: ${{inputs.label}}
      DOCKERHUB_ORG: ${{vars.DOCKERHUB_ORG}}
      NEXUS_PROTOCOL: ${{vars.NEXUS_PROTOCOL_LOCAL}}
      NEXUS_SERVER_ENDPOINT: ${{vars.NEXUS_SERVER_ENDPOINT_LOCAL}}
      REPO: "${{github.event.pull_request.base.repo.name}}"
      GITHUB_USER: ${{ secrets.CIPIPELINE_GITHUB_USER }}
      GITHUB_TOKEN: ${{ secrets.CIPIPELINE_GITHUB_TOKEN }}
      NEXUS_USERNAME: ${{secrets.CIPIPELINE_NEXUS_USERNAME}}
      NEXUS_PASSWORD: ${{secrets.CIPIPELINE_NEXUS_PASSWORD}}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL  }}
    steps: 
      - name: Checkout code
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      - name: Login to Docker
        run : |
          docker login -u="${{ secrets.DOCKER_USERNAME }}" -p="${{ secrets.DOCKER_PASSWORD }}"

      - name: Configure AWS Credentials
        run: |
          aws configure set aws_access_key_id ${{ secrets.TESSELLOPS_ARTIFACTS_DEV_ACCESS_KEY }}
          aws configure set aws_secret_access_key ${{ secrets.TESSELLOPS_ARTIFACTS_DEV_SECRET_KEY }}
          aws configure set region ap-south-1
          
      - name: Build and Push OPS
        shell: bash
        run: |
          dockerBuild() {
            set -e
            IMAGE="$1"
            FILE="$4"
            if [[ "$FILE" == "null" || -z "$FILE" ]]; then
              FILE="./Dockerfile"
            fi
            echo "$FILE"
            docker build -f $FILE -t ${DOCKERHUB_ORG}/$IMAGE:${LATEST_TAG} .
            docker push ${DOCKERHUB_ORG}/$IMAGE:${LATEST_TAG}
            set +e
          }
          jarBuild() {
            set -e
            NAME="$1"
            EXT="$2"
            # Add Build Function
            set +e
          }
          mvnwBuild() {
            set -e
            NAME="$1"
            ./mvnw install -Dnative -DskipTests -Dquarkus.native.remote-container-build=true
            curl -v -u ${{env.NEXUS_USERNAME}}:${{env.NEXUS_PASSWORD}} \
              --upload-file ./target/function.zip \
              ${{env.NEXUS_PROTOCOL}}://${{env.NEXUS_SERVER_ENDPOINT}}/repository/${{vars.NEXUS_REPO_TESSELLOPS_ARTIFACTS}}/${LABEL}/$NAME/$NAME-${LATEST_TAG}.zip
            mv ./target/function.zip  $NAME-${LATEST_TAG}.zip
            aws s3 cp $NAME-${LATEST_TAG}.zip s3://${{vars.TESSELLOPS_ARTIFACTS_DEV_S3}}/${LABEL}/$NAME/$NAME-${LATEST_TAG}.zip   
            set +e
          }
          opsImageBuild() {
            set -e
            NAME="$1"
            ./mvnw install -Dnative -DskipTests -Dquarkus.native.remote-container-build=true
            dockerBuild "$1" "$2" "$3" "$4"
            set +e
          }
          build() {
            type="$1"
            check=$(grep "$type" convoy.yaml)
            if [[ -z "$check" ]]; then
              return
            fi
            version=$(yq '.version' convoy.yaml)
            while IFS=$'\t' read -r name buildFunction ext file _; do
              echo "Name: $name"
              echo "buildFunction: $buildFunction"
              echo "Ext: $ext"
              echo "Version: $version"
              echo "dockerFile: $file"
              $buildFunction "$name" "$ext" "$version" "$file"
            done < <(yq e ".generates.$type[] | [.name, .buildFunction, .extension, .dockerFile] | @tsv" convoy.yaml)
          }
          set +e
          build "artifacts"
          build "dockerImages"

      - name: Cleanup
        if: always()
        run: |
          set +e
          sudo rm -rf target
          docker container prune --force
          docker volume prune --force
                  
      - name: Slack Notification
        uses: act10ns/slack@v2.0.0
        if: failure()
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: ${{ secrets.SLACK_DEVOPS_CHANNEL }}