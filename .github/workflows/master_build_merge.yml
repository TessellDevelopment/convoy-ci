---
name: Tessell Pipelines Code Build Post merge
on:
  workflow_call:
    inputs:
      type:
        description: 'This is used to determine build type'
        required: true
        type: string
      tag:
        description: 'Latest tag for upload'
        required: true
        type: string
      label:
        description: 'Release label for upload'
        required: true
        type: string

jobs:

  build-amd:
    if: ${{inputs.type != 'arm' }}
    runs-on: amd64
    env:
      LATEST_TAG: ${{inputs.tag}}
      LABEL: ${{inputs.label}}
      NEXUS_SERVER: nexus.tessell.cloud
      NEXUS_ARTIFACT_REPO: tessell-artifacts
      REPO: "${{github.event.pull_request.base.repo.name}}"
      GITHUB_USER: ${{ secrets.CIPIPELINE_NEXUS_USERNAME }}
      GITHUB_TOKEN: ${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL  }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Slack Notification
        uses: act10ns/slack@v1.5.0
        if: failure()
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: ${{ secrets.SLACK_DEVOPS_CHANNEL }}

  build-arm:
    if: ${{inputs.type}} == 'arm'
    runs-on: ARM64
    env:
      LATEST_TAG: ${{inputs.tag}}
      LABEL: ${{inputs.label}}
      NEXUS_SERVER: nexus.tessell.cloud
      NEXUS_ARTIFACT_REPO: tessell-artifacts
      DOCKERHUB_ORG: tessellprod
      IMAGE_NAME: tessellops-tsproxy
      REPO: "${{github.event.pull_request.base.repo.name}}"
      GITHUB_USER: ${{ secrets.CIPIPELINE_NEXUS_USERNAME }}
      GITHUB_TOKEN: ${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL  }}
    steps: 
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Build and Push OPS
        run: |
          mvnw() {
            NAME="$1"
            sudo ./mvnw install -Dnative -DskipTests -Dquarkus.native.container-build=true
            curl -v -u ${{secrets.CIPIPELINE_NEXUS_USERNAME}}:${{secrets.CIPIPELINE_NEXUS_PASSWORD}} \
              --upload-file ./target/function.zip \
              https://${NEXUS_SERVER}/repository/${NEXUS_ARTIFACT_REPO}/${LABEL}/$NAME/$NAME-${LATEST_TAG}.zip
          }
          docker() {
            IMAGE_NAME="$1"
            FILE="$4"
            sudo ./mvnw install -Dnative -DskipTests -Dquarkus.native.container-build=true
            docker build -f $FILE -t ${DOCKERHUB_ORG}/$IMAGE_NAME:${{github.head_ref}} .
            docker push ${DOCKERHUB_ORG}/$IMAGE_NAME:${{github.head_ref}}
          }
          build() {
            type="$1"
            check=$(grep "$type" convoy.yaml)
            if [[ -z "$check" ]]; then
              return
            fi
            while IFS=$'\t' read -r name buildFunction ext version file _; do
              echo "$name"
              echo "$buildFunction"
              echo "$ext"
              echo "$version"
              echo "$file"
              $buildFunction "$name" "$ext" "$version" "$file"
            done < <(yq e ".generates.$type[] | [.name, .buildFunction, .extension, .version, .dockerFile] | @tsv" convoy.yaml)
          }
          build "artifacts"
          build "dockerImages"

      - name: Remove target
        if: always()
        run: |
          sudo rm -rf target
                  
      - name: Slack Notification
        uses: act10ns/slack@v1.5.0
        if: failure()
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: ${{ secrets.SLACK_DEVOPS_CHANNEL }}
    