---
name: Tessell Pipelines Code Build Post merge
on:
  workflow_call:
    inputs:
      type:
        description: 'This is used to determine build type'
        required: true
        type: string
      tag:
        description: 'Latest tag for upload'
        required: true
        type: string

jobs:

  build-amd:
    if: ${{inputs.type != 'GRAALVM' }}
    runs-on: amd64
    env:
      LATEST_TAG: ${{inputs.tag}}
      NEXUS_SERVER: nexus.tessell.cloud
      NEXUS_PULL_REPOS_PY: tessell-py-development
      NEXUS_PUSH_REPOS_PY: tessell-repos-py-development
      NEXUS_PULL_REPOS_M2: tessell-m2-development
      NEXUS_PUSH_REPOS_M2: tessell-repos-m2-development
      REPO: "${{github.event.pull_request.base.repo.name}}"
      GITHUB_USER: ${{ secrets.CIPIPELINE_NEXUS_USERNAME }}
      GITHUB_TOKEN: ${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL  }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Slack Notification
        uses: act10ns/slack@v1.5.0
        if: failure()
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: ${{ secrets.SLACK_DEVOPS_CHANNEL }}

  build-arm:
    if: ${{inputs.type}} == 'GRAALVM'
    runs-on: ARM64
    env:
      LATEST_TAG: ${{inputs.tag}}
      NEXUS_SERVER: nexus.tessell.cloud
      NEXUS_PULL_REPOS_PY: tessell-py-development
      NEXUS_PUSH_REPOS_PY: tessell-repos-py-development
      NEXUS_PULL_REPOS_M2: tessell-m2-development
      NEXUS_PUSH_REPOS_M2: tessell-repos-m2-development
      REPO: "${{github.event.pull_request.base.repo.name}}"
      GITHUB_USER: ${{ secrets.CIPIPELINE_NEXUS_USERNAME }}
      GITHUB_TOKEN: ${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL  }}
    steps: 
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Build and Push OPS
        run: |
          ./mvnw install -Dnative -DskipTests -Dquarkus.native.container-build=true
          mvn deploy:deploy-file -Dnexus_url=https://${NEXUS_SERVER}/repository/tessell-m2-component \
              -Dnexus_username=${GITHUB_USER} -Dnexus_password=${GITHUB_TOKEN} \
              -DgroupId=tessellops.${REPO} -DartifactId=${REPO} -Dversion=${LATEST_TAG} \
              -DgeneratePom=true -Dpackaging=zip \
              -Durl=https://${NEXUS_SERVER}/repository/${NEXUS_PUSH_REPOS_M2} \
              -Dfile=./target/function.zip -DrepositoryId=nexus
          
          echo "${{env.LATEST_TAG}}"
          echo "Build and push successful"
          sudo rm -rf target

      - name: Remove in case of failure
        if: failure()
        run: |
          sudo rm -rf target
                  
      - name: Slack Notification
        uses: act10ns/slack@v1.5.0
        if: failure()
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: ${{ secrets.SLACK_DEVOPS_CHANNEL }}
          

          mvn deploy:deploy-file -Dnexus_url=https://nexus.tessell.cloud/repository/tessell-m2-development \
              -Dnexus_username=varenyatessell -Dnexus_password=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 \
              -DgroupId=tessellops.portal-service -DartifactId=tessellops-portal-service -Dversion=0.1.0 \
              -DgeneratePom=true -Dpackaging=zip \
              -Durl=https://nexus.tessell.cloud/repository/tessell-m2-development \
              -Dfile=./target/function.zip -DrepositoryId=nexus