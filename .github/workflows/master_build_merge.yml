---
name: Tessell Pipelines Code Build Post merge
on:
  workflow_call:
    inputs:
      type:
        description: 'This is used to determine build type'
        required: true
        type: string
      tag:
        description: 'Latest tag for upload'
        required: true
        type: string
      label:
        description: 'Release label for upload'
        required: true
        type: string

jobs:

  build-ui:
    if: ${{ inputs.type == 'ui-build' }}
    runs-on: ui-build
    env:
      CI-BRANCH: TDEVOPS-1832
      DOCKERHUB_ORG: ${{vars.DOCKERHUB_ORG}}
      GITHUB_TOKEN: ${{ secrets.CIPIPELINE_GITHUB_TOKEN }}
      GITHUB_USER: ${{ secrets.CIPIPELINE_GITHUB_USER }}
      LABEL: ${{inputs.label}}
      LATEST_TAG: ${{inputs.tag}}
      NEXUS_PASSWORD: ${{secrets.CIPIPELINE_NEXUS_PASSWORD}}
      NEXUS_PROTOCOL: ${{vars.NEXUS_PROTOCOL_PUBLIC}}
      NEXUS_PULL_REPOS_M2: tessell-m2-development
      NEXUS_PULL_REPOS_PY: tessell-py-development
      NEXUS_PUSH_REPOS_NPM: ${{vars.NEXUS_PUSH_REPOS_NPM}}
      NEXUS_PUSH_REPOS_PY: tessell-repos-py-development
      NEXUS_PUSH_REPOS_M2: ${{ vars.NEXUS_PUSH_REPOS_M2 }}
      NEXUS_SERVER_ENDPOINT: ${{vars.NEXUS_SERVER_ENDPOINT_PUBLIC}}
      NEXUS_USERNAME: ${{secrets.CIPIPELINE_NEXUS_USERNAME}}
      REPO: "${{github.event.pull_request.base.repo.name}}"
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      - name: Setup CI Scripts
        run: |
          cd ~/convoy-ci
          git checkout ${{env.CI-BRANCH}}
          git pull
          cd ~-
          cp -r ~/convoy-ci/.github/ci-scripts ./ci-scripts

      - name: Build
        shell: bash
        run: |
          bash ./ci-scripts/bash/build.sh BuildAndPush
        
      - name: Slack Notification
        uses: act10ns/slack@v2.0.0
        if: failure()
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: ${{ secrets.SLACK_DEVOPS_CHANNEL }}
    
  build-ubuntu-latest:
    if: ${{ inputs.type == 'ubuntu-latest' }}
    runs-on: ubuntu-latest
    env:
      ARTIFACTS_DEV_S3: ${{vars.ARTIFACTS_DEV_S3}}
      ARTIFACTS_DEV_ACCESS_KEY: ${{ secrets.ARTIFACTS_DEV_ACCESS_KEY }}
      ARTIFACTS_DEV_SECRET_KEY: ${{ secrets.ARTIFACTS_DEV_SECRET_KEY }}
      CI-BRANCH: TDEVOPS-1832
      DEVQA_INFRA_ACCESS_KEY: ${{ secrets.DEVQA_INFRA_ACCESS_KEY }}
      DEVQA_INFRA_SECRET_KEY: ${{ secrets.DEVQA_INFRA_SECRET_KEY }}
      DOCKERHUB_ORG: ${{vars.DOCKERHUB_ORG}}
      GITHUB_TOKEN: ${{ secrets.CIPIPELINE_GITHUB_TOKEN }}
      GITHUB_USER: ${{ secrets.CIPIPELINE_GITHUB_USER }}
      GOPATH: /home/runner/go
      LABEL: ${{inputs.label}}
      LATEST_TAG: ${{inputs.tag}}
      NEXUS_ARTIFACT_REPO: ${{vars.NEXUS_REPO_TESSELL_ARTIFACTS}}
      NEXUS_PROTOCOL: ${{vars.NEXUS_PROTOCOL_PUBLIC}}
      NEXUS_PULL_REPOS_PY: tessell-py-development
      NEXUS_PULL_REPOS_M2: tessell-m2-development
      NEXUS_PASSWORD: ${{secrets.CIPIPELINE_NEXUS_PASSWORD}}
      NEXUS_SERVER_ENDPOINT: ${{vars.NEXUS_SERVER_ENDPOINT_PUBLIC}}
      NEXUS_USERNAME: ${{secrets.CIPIPELINE_NEXUS_USERNAME}}
      PROD_ASSET_ACCESS_KEY: ${{ secrets.PROD_ASSET_ACCESS_KEY }}
      PROD_ASSET_SECRET_KEY: ${{ secrets.PROD_ASSET_SECRET_KEY }}
      REPO: "${{github.event.pull_request.base.repo.name}}"
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      - name: Setup CI Scripts
        run: |
          git clone https://${{env.GITHUB_USER}}:${{env.GITHUB_TOKEN}}@github.com/TessellDevelopment/convoy-ci.git
          cd convoy-ci
          git checkout ${{env.CI-BRANCH}}
          git pull
          cd ..
          cp -r ./convoy-ci/.github/ci-scripts ./ci-scripts

      - name: Set up Python
        uses: actions/setup-python@v5.0.0
        with:
          python-version: 3.9

      - name: Setup Go
        uses: actions/setup-go@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v4.0.0
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3.0.0

      - name: Login to docker
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Create pip conf
        run: |
          bash ./ci-scripts/bash/dependency.sh createPipConf
        shell: bash

      - name: Install dependencies
        run: |
          bash ./ci-scripts/bash/dependency.sh installPythonDependencies
          bash ./ci-scripts/bash/dependency.sh installAwsCli
      
      - name: Build
        shell: bash
        run: |
          bash ./ci-scripts/bash/build.sh BuildAndPush

      - name: Slack Notification
        uses: act10ns/slack@v2.0.0
        if: failure()
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: ${{ secrets.SLACK_DEVOPS_CHANNEL }}

  build-amd-go-20:
    if: ${{ inputs.type == 'amd-go-20' }}
    runs-on: amd-go-20
    env:
      CI-BRANCH: TDEVOPS-1832
      DOCKERHUB_ORG: ${{vars.DOCKERHUB_ORG}}
      GITHUB_USER: ${{ secrets.CIPIPELINE_GITHUB_USER }}
      GITHUB_TOKEN: ${{ secrets.CIPIPELINE_GITHUB_TOKEN }}
      LABEL: ${{inputs.label}}
      LATEST_TAG: ${{inputs.tag}}
      NEXUS_ARTIFACT_REPO: ${{vars.NEXUS_REPO_TESSELL_ARTIFACTS}}
      NEXUS_PASSWORD: ${{secrets.CIPIPELINE_NEXUS_PASSWORD}}
      NEXUS_PROTOCOL: ${{vars.NEXUS_PROTOCOL_PUBLIC}}
      NEXUS_SERVER_ENDPOINT: ${{vars.NEXUS_SERVER_ENDPOINT_PUBLIC}}
      NEXUS_USERNAME: ${{secrets.CIPIPELINE_NEXUS_USERNAME}}
      PROD_ASSET_ACCESS_KEY: ${{ secrets.PROD_ASSET_ACCESS_KEY }}
      PROD_ASSET_SECRET_KEY: ${{ secrets.PROD_ASSET_SECRET_KEY }}
      REPO: "${{github.event.pull_request.base.repo.name}}"
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      - name: Setup CI Scripts
        run: |
          cd ~/convoy-ci
          git checkout ${{env.CI-BRANCH}}
          git pull
          cd ~-
          cp -r ~/convoy-ci/.github/ci-scripts ./ci-scripts

      - name: Check go Config
        run: |
          go version
          echo $GOPATH
          echo $GOROOT
          echo $PATH
          go env
      
      - name: Build
        shell: bash
        run: |
          bash ./ci-scripts/bash/build.sh BuildAndPush

      - name: Cleanup
        if: always()
        run: |
          set +e
          sudo rm -rf target
          helm repo remove nexus-prod
          docker container prune --force
          docker volume prune --force

      - name: Slack Notification
        uses: act10ns/slack@v2.0.0
        if: failure()
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: ${{ secrets.SLACK_DEVOPS_CHANNEL }}
   
  build-amd-go-21:
    if: ${{ inputs.type == 'amd-go-21' }}
    runs-on: amd-go-21
    env:
      CI-BRANCH: TDEVOPS-1832
      DOCKERHUB_ORG: ${{vars.DOCKERHUB_ORG}}
      GITHUB_TOKEN: ${{ secrets.CIPIPELINE_GITHUB_TOKEN }}
      GITHUB_USER: ${{ secrets.CIPIPELINE_GITHUB_USER }}
      LABEL: ${{inputs.label}}
      LATEST_TAG: ${{inputs.tag}}
      NEXUS_ARTIFACT_REPO: ${{vars.NEXUS_REPO_TESSELL_ARTIFACTS}}
      NEXUS_PASSWORD: ${{secrets.CIPIPELINE_NEXUS_PASSWORD}}
      NEXUS_PROTOCOL: ${{vars.NEXUS_PROTOCOL_PUBLIC}}
      NEXUS_PULL_REPOS_PY: tessell-py-component
      NEXUS_SERVER_ENDPOINT: ${{vars.NEXUS_SERVER_ENDPOINT_PUBLIC}}
      NEXUS_USERNAME: ${{secrets.CIPIPELINE_NEXUS_USERNAME}}
      PROD_ASSET_ACCESS_KEY: ${{ secrets.PROD_ASSET_ACCESS_KEY }}
      PROD_ASSET_SECRET_KEY: ${{ secrets.PROD_ASSET_SECRET_KEY }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      REPO: "${{github.event.pull_request.base.repo.name}}"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      - name: Setup CI Scripts
        run: |
          cd ~/convoy-ci
          git checkout ${{env.CI-BRANCH}}
          git pull
          cd ~-
          cp -r ~/convoy-ci/.github/ci-scripts ./ci-scripts

      - name: Check go Config
        run: |
          go version
          echo $GOPATH
          echo $GOROOT
          echo $PATH
          go env
          
      - name: Build
        shell: bash
        run: |
          bash ./ci-scripts/bash/build.sh BuildAndPush

      - name: Cleanup
        if: always()
        run: |
          set +e
          sudo rm -rf target
          helm repo remove nexus-prod
          docker container prune --force
          docker volume prune --force

      - name: Slack Notification
        uses: act10ns/slack@v2.0.0
        if: failure()
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: ${{ secrets.SLACK_DEVOPS_CHANNEL }}

  build-amd:
    if: ${{ inputs.type == 'amd' }}
    runs-on: self-hosted
    env:
      ARTIFACTS_DEV_ACCESS_KEY: ${{ secrets.ARTIFACTS_DEV_ACCESS_KEY }}
      ARTIFACTS_DEV_SECRET_KEY: ${{ secrets.ARTIFACTS_DEV_SECRET_KEY }}
      CI-BRANCH: TDEVOPS-1832
      DOCKERHUB_ORG: ${{vars.DOCKERHUB_ORG}}
      GITHUB_TOKEN: ${{ secrets.CIPIPELINE_GITHUB_TOKEN }}
      GITHUB_USER: ${{ secrets.CIPIPELINE_GITHUB_USER }}
      GOPATH: /home/github/go
      LATEST_TAG: ${{inputs.tag}}
      LABEL: ${{inputs.label}}  
      NAMESPACE: "convoy"
      NEXUS_ARTIFACT_REPO: ${{vars.NEXUS_REPO_TESSELL_ARTIFACTS}}
      NEXUS_PASSWORD: ${{secrets.CIPIPELINE_NEXUS_PASSWORD}}
      NEXUS_PROTOCOL: ${{vars.NEXUS_PROTOCOL_LOCAL}}
      NEXUS_PULL_REPOS_M2: tessell-m2-development
      NEXUS_PULL_REPOS_PY: tessell-py-development
      NEXUS_PUSH_REPOS_M2: ${{ vars.NEXUS_PUSH_REPOS_M2 }}
      NEXUS_PUSH_REPOS_PY: ${{ vars.NEXUS_PUSH_REPOS_PY }}
      NEXUS_SERVER_ENDPOINT: ${{vars.NEXUS_SERVER_ENDPOINT_LOCAL}}
      NEXUS_USERNAME: ${{secrets.CIPIPELINE_NEXUS_USERNAME}}
      PROD_ASSET_ACCESS_KEY: ${{ secrets.PROD_ASSET_ACCESS_KEY }}
      PROD_ASSET_SECRET_KEY: ${{ secrets.PROD_ASSET_SECRET_KEY }}
      REPO: "${{github.event.pull_request.base.repo.name}}"
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      - name: Setup CI Scripts
        run: |
          cd ~/convoy-ci
          git checkout ${{env.CI-BRANCH}}
          git pull
          cd ~-
          cp -r ~/convoy-ci/.github/ci-scripts ./ci-scripts

      - name: Check specific file changes
        id: changed-files
        uses: tj-actions/changed-files@v42.0.2
        with:
          files: |
            Chart.yaml
            services/**
            scripts/Dockerfile
            scripts/initializeAutomation.sh

      - name: Check All file changes
        id: changed-files-all
        uses: tj-actions/changed-files@v42.0.2

      - name: Login to docker
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}   

      - name: Build and Push
        shell: bash
        env:
          CHANGED_FILES_ANY_MODIFIED: ${{steps.changed-files.outputs.any_modified}}
          CHANGED_AND_MODIFIED_FILES: ${{steps.changed-files-all.outputs.all_changed_and_modified_files}}
        run: |
          bash ./ci-scripts/bash/build.sh BuildAndPush

      - name: Cleanup
        if: always()
        run: |
          set +e
          sudo rm -rf target
          helm repo remove nexus-prod
          docker container prune --force
          docker volume prune --force
                  
      - name: Slack Notification
        uses: act10ns/slack@v2.0.0
        if: failure()
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: ${{ secrets.SLACK_DEVOPS_CHANNEL }}
      
  build-arm:
    if: ${{ inputs.type == 'arm' }}
    runs-on: ARM64
    env:
      CI-BRANCH: TDEVOPS-1832
      DEVQA_INFRA_ACCESS_KEY: ${{ secrets.DEVQA_INFRA_ACCESS_KEY }}
      DEVQA_INFRA_SECRET_KEY: ${{ secrets.DEVQA_INFRA_SECRET_KEY }}
      DOCKERHUB_ORG: ${{vars.DOCKERHUB_ORG}}
      GITHUB_USER: ${{ secrets.CIPIPELINE_GITHUB_USER }}
      GITHUB_TOKEN: ${{ secrets.CIPIPELINE_GITHUB_TOKEN }}
      LABEL: ${{inputs.label}}
      LATEST_TAG: ${{inputs.tag}}
      NEXUS_PASSWORD: ${{secrets.CIPIPELINE_NEXUS_PASSWORD}}
      NEXUS_PROTOCOL: ${{vars.NEXUS_PROTOCOL_LOCAL}}
      NEXUS_REPO_TESSELLOPS_ARTIFACTS: ${{vars.NEXUS_REPO_TESSELLOPS_ARTIFACTS}}
      NEXUS_SERVER_ENDPOINT: ${{vars.NEXUS_SERVER_ENDPOINT_LOCAL}}
      NEXUS_USERNAME: ${{secrets.CIPIPELINE_NEXUS_USERNAME}}
      REPO: "${{github.event.pull_request.base.repo.name}}"
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      TESSELL_DEV_ECR: ${{vars.TESSELL_DEV_ECR}}
      TESSELLOPS_ARTIFACTS_DEV_ACCESS_KEY: ${{ secrets.TESSELLOPS_ARTIFACTS_DEV_ACCESS_KEY }}
      TESSELLOPS_ARTIFACTS_DEV_SECRET_KEY: ${{ secrets.TESSELLOPS_ARTIFACTS_DEV_SECRET_KEY }}
      TESSELLOPS_ARTIFACTS_DEV_S3: ${{vars.TESSELLOPS_ARTIFACTS_DEV_S3}}
    steps: 
      - name: Checkout code
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      - name: Setup CI Scripts
        run: |
          cd ~/convoy-ci
          git checkout ${{env.CI-BRANCH}}
          git pull
          cd ~-
          cp -r ~/convoy-ci/.github/ci-scripts ./ci-scripts

      - name: Login to Docker
        run : |
          docker login -u="${{ secrets.DOCKER_USERNAME }}" -p="${{ secrets.DOCKER_PASSWORD }}"

      - name: Build and Push OPS
        shell: bash
        run: |
          bash ./ci-scripts/bash/build.sh BuildAndPush

      - name: Cleanup
        if: always()
        run: |
          set +e
          sudo rm -rf target
          helm repo remove nexus-prod
          docker container prune --force
          docker volume prune --force
                    
      - name: Slack Notification
        uses: act10ns/slack@v2.0.0
        if: failure()
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: ${{ secrets.SLACK_DEVOPS_CHANNEL }}
