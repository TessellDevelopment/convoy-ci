---
name: Tessell Pipelines Code Build Post merge
on:
  workflow_call:
    inputs:
      type:
        description: 'This is used to determine build type'
        required: true
        type: string
      tag:
        description: 'Latest tag for upload'
        required: true
        type: string
      label:
        description: 'Release label for upload'
        required: true
        type: string

jobs:

  build-amd:
    if: ${{ inputs.type != 'arm' }}
    runs-on: self-hosted
    env:
      LATEST_TAG: ${{inputs.tag}}
      LABEL: ${{inputs.label}}
      DOCKERHUB_ORG: ${{vars.DOCKERHUB_ORG}}
      REPO: "${{github.event.pull_request.base.repo.name}}"
      NEXUS_PULL_REPOS_M2: tessell-m2-development
      NEXUS_PULL_REPOS_PY: tessell-py-development
      NEXUS_PUSH_REPOS_PY: tessell-repos-py-development
      GITHUB_USER: ${{ secrets.CIPIPELINE_GITHUB_USER }}
      GITHUB_TOKEN: ${{ secrets.CIPIPELINE_GITHUB_TOKEN }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL  }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      - name: Changed files
        id: changed-files
        uses: tj-actions/changed-files@v39
        with:
          files: |
            Chart.yaml
            services/**
            scripts/Dockerfile
            scripts/initializeAutomation.sh

      - name: Login to docker
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}   

      - name: Install AWS CLI
        run: |
          curl -L -o install-aws.sh https://raw.githubusercontent.com/unfor19/install-aws-cli-action/master/entrypoint.sh && \
          chmod +x install-aws.sh
          sudo ./install-aws.sh "v2" "amd64"
          rm install-aws.sh
      
      - name: Configure AWS Credentials
        run: |
          aws configure set aws_access_key_id ${{ secrets.PROD_ASSET_ACCESS_KEY }}
          aws configure set aws_secret_access_key ${{ secrets.PROD_ASSET_SECRET_KEY }}
          aws configure set region ap-south-1

      - name: Build and Push
        shell: bash
        run: |
          agentBuild () {
            set -e
            go install golang.org/x/tools/cmd/goimports@latest
            ARTIFACT="$1"
            OS=$(echo "$ARTIFACT" | awk -F'[-]' '{print $2}')
            SERVICE=$(echo "$ARTIFACT" | awk -F'[-]' '{print $4}')
            make os=$OS $SERVICE
            make clean
            mvnDeploy "$ARTIFACT" "tar" "$ARTIFACT.tar" "tessell.agent" "${{env.LATEST_TAG}}"
            awsS3Push "package/$ARTIFACT.tar" "s3://tesselltools/terls/tessell/agent/${{env.LATEST_TAG}}"
            set +e
          }
          awsConfigureDevqaInfra() {
            aws configure set aws_access_key_id ${{ secrets.DEVQA_INFRA_ACCESS_KEY }}
            aws configure set aws_secret_access_key ${{ secrets.DEVQA_INFRA_SECRET_KEY }}
            aws configure set region ap-south-1
          }
          awsS3Push(){
            set -e
            SOURCE="$1"
            DESTINATION="$2"
            aws s3 cp $SOURCE $DESTINATION
            set +e
          }
          createPipConf(){
            set -e
            echo "[global]" > pip.conf
            echo "index =  https://${{ secrets.CIPIPELINE_NEXUS_USERNAME }}:${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}@${{ env.NEXUS_SERVER }}/repository/${{ env.NEXUS_PULL_REPOS_PY }}/simple" >> pip.conf
            echo "index-url = https://${{ secrets.CIPIPELINE_NEXUS_USERNAME }}:${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}@${{ env.NEXUS_SERVER }}/repository/${{ env.NEXUS_PULL_REPOS_PY }}/simple" >> pip.conf
            echo "extra-index-url = https://pypi.org/simple" >> pip.conf
            sudo cp pip.conf /etc/pip.conf
            set +e
          }
          dbPluginBuild() {
            set -e
            ARTIFACT="$1"
            EXTENSION="$2"
            createPipConf
            if [ -f ./$ARTIFACT/requirements.txt ]; then python3 -m pip install -r ./$ARTIFACT/requirements.txt --dry-run; fi
            gradlewUploadPlugin
            cd $ARTIFACT/build
            mv "$ARTIFACT-${LATEST_TAG}-$EXTENSION" "$ARTIFACT-$EXTENSION"
            awsS3Push "$ARTIFACT-$EXTENSION" "s3://tesselltools/terls/tessell/plugins/${{env.LATEST_TAG}}/"
          }
          dockerBuild() {
            set -e
            IMAGE_NAME="$1"
            FILE="$4"
            if [[ "$FILE" == "null" || -z "$FILE" ]]; then
              FILE="./Dockerfile"
            fi
            echo "$FILE"
            docker build -f $FILE -t ${DOCKERHUB_ORG}/$IMAGE_NAME:${LATEST_TAG} .
            docker push ${DOCKERHUB_ORG}/$IMAGE_NAME:${LATEST_TAG}
            set +e
          }
          dockerBuildOps() {
            set -e
            mvnwBuild
            dockerBuild "$1" "$2" "$3" "$4"
            set +e
          }
          functionBuild() {
            set -e
            ARTIFACT="$1"
            OS=$(echo "$ARTIFACT" | awk -F'[-]' '{print $3}')
            CLOUD=$(echo "$ARTIFACT" | awk -F'[-]' '{print $4}')
            make OS=$OS CLOUD=$CLOUD package
            mvnDeploy "$ARTIFACT" "tar" "./tessell/$ARTIFACT.tar" "tessell.functions" "${{env.LATEST_TAG}}"
            awsS3Push "./tessell/$ARTIFACT.tar" "s3://tesselltools/terls/tessell/functions/${{env.LATEST_TAG}}/"
            set +e
          }
          gradlewMaven(){
            set -e
            ./gradlew mavenDeploy --console plain --refresh-dependencies \
              -Pnexus_push_username="${{ secrets.CIPIPELINE_NEXUS_USERNAME }}" \
              -Pnexus_push_password="${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}" \
              -Pnexus_username="${{ secrets.CIPIPELINE_NEXUS_USERNAME }}" \
              -Pnexus_password="${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}" \
              -Pnexus_push_repo_m2="${{ vars.NEXUS_PUSH_REPOS_M2 }}" \
              -Pnexus_pull_repo_m2="${{ env.NEXUS_PULL_REPOS_M2 }}"
            set +e
          }
          gradlewTwineUpload(){
            set -e
            ./gradlew twineUpload --console plain \
              -Pnexus_push_username="${{ secrets.CIPIPELINE_NEXUS_USERNAME }}" \
              -Pnexus_push_password="${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}" \
              -Pnexus_username="${{ secrets.CIPIPELINE_NEXUS_USERNAME }}" \
              -Pnexus_password="${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}" \
              -Pnexus_push_repo_py="${{ env.NEXUS_PUSH_REPOS_PY }}" \
              -Pnexus_pull_repo_py="${{ env.NEXUS_PULL_REPOS_PY }}" 
            set +e
          }
          gradlewUploadPlugin() {
            set -e
            ./gradlew createMvnSettings uploadPlugin --console plain \
              -Pnexus_push_username="${{ secrets.CIPIPELINE_NEXUS_USERNAME }}" \
              -Pnexus_push_password="${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}" \
              -Pnexus_username="${{ secrets.CIPIPELINE_NEXUS_USERNAME }}" \
              -Pnexus_password="${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}" \
              -Pnexus_push_repo_m2="${{ vars.NEXUS_PUSH_REPOS_M2 }}" 
            set +e
          }
          gradlewUI() {
            set +e
            rm ~/.npmrc
            rm ~/.yarnrc
            TOKEN=$(echo -n '${{secrets.CIPIPELINE_NEXUS_USERNAME}}:${{secrets.CIPIPELINE_NEXUS_PASSWORD}}' | base64 -w 0)
            echo '"@tessell:registry" "https://${{ vars.NEXUS_SERVER_ENDPOINT }}/repository/${{ vars.NEXUS_PUSH_REPOS_NPM }}/"' >> .yarnrc
            echo "always-auth=true" >> .npmrc
            echo "_auth=$TOKEN" >> .npmrc
            cat .npmrc
            cat .yarnrc
            set -e
            ./gradlew zipUiBuild  publish --console plain \
              -Pnexus_push_username="${{ secrets.CIPIPELINE_NEXUS_USERNAME }}" \
              -Pnexus_push_password="${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}" \
              -Pnexus_username="${{ secrets.CIPIPELINE_NEXUS_USERNAME }}" \
              -Pnexus_password="${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}" \
              -Pnexus_push_repo_m2="${{ vars.NEXUS_PUSH_REPOS_M2 }}" \
              -Pnexus_pull_repo_m2="${{ env.NEXUS_PULL_REPOS_M2 }}"
            set +e
          }
          helm-chart() {
            set -e
            CHART_NAME="$1"
            cd scripts
            ./package-and-push --prod -n $CHART_NAME
            set +e
          }
          helm-template() {
            if [[ ${{steps.changed-files.outputs.any_modified}} == 'true' ]]; then
              GITHUB_WORKSPACE=$(pwd)
              CHART_GITHUB_LOCATION=$GITHUB_WORKSPACE
              TEMPLATE_REPO_GITHUB_LOCATION=$GITHUB_WORKSPACE/../convoy-helm-template
              echo "$CHART_GITHUB_LOCATION"
              echo "$TEMPLATE_REPO_GITHUB_LOCATION"
              echo "Cloning convoy-helm-template"
              rm -rf $TEMPLATE_REPO_GITHUB_LOCATION
              git clone https://github.com/TessellDevelopment/convoy-helm-template.git $TEMPLATE_REPO_GITHUB_LOCATION
              echo "Copying the service values file"
              cp -r $CHART_GITHUB_LOCATION/services/* $TEMPLATE_REPO_GITHUB_LOCATION/helm-chart/values/apps/
              cp -r $CHART_GITHUB_LOCATION/Chart.yaml $TEMPLATE_REPO_GITHUB_LOCATION/helm-chart/Chart.yaml
              set -e
              CHART_NAME=$(grep 'name' convoy.yaml | awk '{print $2}')
              cd $TEMPLATE_REPO_GITHUB_LOCATION/scripts
              ls -lrta ../helm-chart/values/apps/
              echo "Running package and push"
              ./package-and-push --prod -n $CHART_NAME
              set +e
            fi
          }
          modifiedDir() {
            head_commit="${{github.sha}}"
            base_commit="${{github.sha}}"
            if [ "${{github.event.before}}" != '0000000000000000000000000000000000000000' ]; then
              base_commit="${{github.event.before}}"
            fi
            if [ "${{github.event.name}}" == 'pull_request' ]; then
              echo "Using the base branch's commit for comparing."
              base_commit="${{github.event.pull_request.base.sha}}"
            fi
            echo "base_commit $base_commit"
            echo "head_commit $head_commit"
            response=$(curl -s -H "Authorization: Bearer ${{secrets.CIPIPELINE_NEXUS_PASSWORD}}" \
              "https://api.github.com/repos/${{github.repository_owner}}/${{github.repository}}/compare?head=$head_commit&base=$base_commit")

            excluded_directories=('.github' '.gitignore' 'convoy.yaml' 'README.md')
            modified_directories=()

            for file in $(echo "$response" | jq -r '.files[].filename'); do
              file_directory=$(dirname "$file")
              file_status=$(echo "$response" | jq -r --arg file "$file" '.files[] | select(.filename == $file) | .status')
              
              if [ "$file_status" != "removed" ] && [[ ! " $excluded_directories[@] " =~ " $file_directory " ]]; then
                modified_directories+=("$file_directory")
              fi
            done

            unique_directories=($(echo "$modified_directories[@]" | tr ' ' '\n' | sort -u | tr '\n' ' '))
            output_string=$(IFS=" "; echo "$unique_directories[*]")
            echo "modifiedDirectories: $output_string"
            echo "modifiedDirectories=$output_string" >> $GITHUB_ENV
          }
          mvnwBuild() {
            set -e
            ./mvnw install -Dnative -DskipTests -Dquarkus.native.remote-container-build=true
            set +e
          }
          mvnDeploy() {
            set -e
            ARTIFACT_ID="$1"
            EXTENSION="$2"
            FILE="$3"
            GROUP_ID="$4"
            VERSION="$5"
            mvn deploy:deploy-file -Dnexus_url=https://${{vars.NEXUS_SERVER_ENDPOINT}}/repository/tessell-m2-component \
                -Dnexus_username=${GITHUB_USER} -Dnexus_password=${GITHUB_TOKEN} \
                -DgroupId=$GROUP_ID -DartifactId=$ARTIFACT_ID -Dversion=$VERSION \
                -DgeneratePom=true -Dpackaging=$EXTENSION \
                -Durl=https://${{vars.NEXUS_SERVER_ENDPOINT}}/repository/${{vars.NEXUS_PUSH_REPOS_M2}} \
                -Dfile=$FILE -DrepositoryId=nexus
            set +e
          }
          npmBuild() {
            set -e
            npm install
            npm run build
            set +e 
            rm ~/.npmrc
            TOKEN=$(echo -n '${{secrets.CIPIPELINE_NEXUS_USERNAME}}:${{secrets.CIPIPELINE_NEXUS_PASSWORD}}' | base64 -w 0)
            echo "//${{ vars.NEXUS_SERVER_ENDPOINT }}/repository/:_auth = $TOKEN" >> ~/.npmrc
            echo "//${{ vars.NEXUS_SERVER_ENDPOINT }}/repository/:always-auth = true" >> ~/.npmrc 
            echo "@tessell:registry=https://${{ vars.NEXUS_SERVER_ENDPOINT }}/repository/${{ vars.NEXUS_PUSH_REPOS_NPM }}" >> ~/.npmrc
            cat ~/.npmrc
            set -e
            version=$(cat convoy.yaml | yq -r '.version')
            yq ".version = \"$version\"" package.json > tmp_package.json
            mv tmp_package.json package.json
            npm publish   
            set +e
          }
          pythonLibraryBuild() {
            set -e
            ARTIFACT="$1"
            createPipConf
            if [ -f ./$ARTIFACT/requirements.txt ]; then python3 -m pip install -r ./$ARTIFACT/requirements.txt --dry-run; fi
            lintCheck
            gradlewTwineUpload
          }
          qaBuild(){
            set -e
            createPipConf
            setupQAEnv
            export PYTHONPATH=lib
            export GITHUB_USER="${{ secrets.CIPIPELINE_NEXUS_USERNAME }}"
            export GITHUB_TOKEN="${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}"
            cp configs/qarel.json config.json
            source qavenv/bin/activate
            make clients -B
            source qavenv/bin/activate
            python3 ./main.py ./testcases -s -v --dry-run --run-long-tests --business-edition
            if [[ ${{steps.changed-files.outputs.any_modified}} == 'true' ]]; then
              IMAGE_NAME="$1"
              VERSION="$3"
              docker build -t ${DOCKERHUB_ORG}/$IMAGE_NAME:$VERSION .
              docker push ${DOCKERHUB_ORG}/$IMAGE_NAME:$VERSION
            fi
            set +e
          }
          setupQAEnv() {
            INSTALL_DIR=/usr/local/bin
            sudo mkdir -p $INSTALL_DIR/openapitools
            curl https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/bin/utils/openapi-generator-cli.sh > openapi-generator-cli
            sudo cp openapi-generator-cli $INSTALL_DIR/openapitools/openapi-generator-cli
            sudo chmod 755 $INSTALL_DIR/openapitools/openapi-generator-cli
            sudo ln -f -s $INSTALL_DIR/openapitools/openapi-generator-cli $INSTALL_DIR/openapi-generator
            wget https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/6.0.0/openapi-generator-cli-6.0.0.jar -O openapi-generator-cli.jar
            sudo mv openapi-generator-cli.jar /usr/local/bin/openapi-generator-cli-6.0.0.jar
            python3 -m pip install --user virtualenv
            python3 -m pip install yq wheel
            python3 -m venv qavenv
            source qavenv/bin/activate
            python3 -m pip install -r scripts/requirements.txt
            sudo python3 -m pip list | grep harness
            python3 -m pip list | grep harness              
          }
          terraformBuild() {
            set -e
            modifiedDir
            echo "${{ env.modifiedDirectories }}"
            BASE_DIR=$PWD
            BUILD_DIR=$BASE_DIR/build
            mkdir -p $BUILD_DIR
            DIRECTORIES="${{ env.modifiedDirectories }}"
            EXCLUDE_DIR=("build")
            for DIR in $DIRECTORIES
            do
              if [[ " ${EXCLUDE_DIR[*]} " != *"$DIR"* ]]; then 
                echo "building  ${DIR}"
                ARTIFACT_FILE=$BUILD_DIR/${DIR}.zip
                cd $BASE_DIR/$DIR
                VERSION=$(yq .version convoy.yaml)
                echo terraform_build $BASE_DIR/$DIR $ARTIFACT_FILE
                terraform_build $PWD $ARTIFACT_FILE
                # mvnDeploy "$DIR" "zip" "$ARTIFACT_FILE" "tessell.terraform_modules" "$VERSION"
                # awsConfigureDevqaInfra
                # awsS3Push "$ARTIFACT_FILE" "s3://tessell-terraform-modules-terls/$DIR/$VERSION/""
              fi
            done
            ls -lrta $BUILD_DIR
            set +e
          }
          tsmZipBuild() {
            set -e
            ARTIFACT="$1"
            VERSION="$3"
            mkdir -p build; cd tsmv101; terraform_build $PWD ../build/$ARTIFACT.zip; cd ../build; ls -l;
            unzip -l $ARTIFACT.zip
            cd ..
            mvnDeploy "$ARTIFACT" "zip" "build/$ARTIFACT.zip" "tessell.tsm-infra" "$VERSION"
            set +e
          }
          build() {
            type="$1"
            check=$(grep "$type" convoy.yaml)
            if [[ -z "$check" ]]; then
              return
            fi
            mkdir -p $HOME/.m2
            cp .github/scripts/settings.xml $HOME/.m2/settings.xml
            cat $HOME/.m2/settings.xml
            git config --global url."https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com".insteadOf "https://github.com"
            version=$(yq '.version' convoy.yaml)
            language=$(yq '.language' convoy.yaml)
            if [[ "$language" == "terraform" ]]; then
              terraformBuild
              return
            fi
            while IFS=$'\t' read -r name buildFunction ext file _; do
              echo "Name: $name"
              echo "buildFunction: $buildFunction"
              echo "Ext: $ext"
              echo "Version: $version"
              echo "dockerFile: $file"
              $buildFunction "$name" "$ext" "$version" "$file"
            done < <(yq e ".generates.$type[] | [.name, .buildFunction, .extension, .dockerFile] | @tsv" convoy.yaml)
          }
          set +e
          build "artifacts"
          build "dockerImages"
          build "helmCharts"
          build "terraform"

      - name: Remove target
        if: always()
        run: |
          set +e
          sudo rm -rf target
          docker container prune --force
          docker volume prune --force

      - name: Slack Notification
        uses: act10ns/slack@v2.0.0
        if: failure()
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: ${{ secrets.SLACK_DEVOPS_CHANNEL }}

  build-arm:
    if: ${{ inputs.type == 'arm' }}
    runs-on: ARM64
    env:
      LATEST_TAG: ${{inputs.tag}}
      LABEL: ${{inputs.label}}
      DOCKERHUB_ORG: ${{vars.DOCKERHUB_ORG}}
      REPO: "${{github.event.pull_request.base.repo.name}}"
      GITHUB_USER: ${{ secrets.CIPIPELINE_NEXUS_USERNAME }}
      GITHUB_TOKEN: ${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL  }}
    steps: 
      - name: Checkout code
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      - name: Login to Docker
        run : |
          sudo docker login -u="${{ secrets.DOCKER_USERNAME }}" -p="${{ secrets.DOCKER_PASSWORD }}"

      - name: Configure AWS Credentials
        run: |
          aws configure set aws_access_key_id ${{ secrets.TESSELLOPS_ARTIFACTS_DEV_ACCESS_KEY }}
          aws configure set aws_secret_access_key ${{ secrets.TESSELLOPS_ARTIFACTS_DEV_SECRET_KEY }}
          aws configure set region ap-south-1
          
      - name: Build and Push OPS
        shell: bash
        run: |
          mvnwBuild() {
            set -e
            NAME="$1"
            sudo ./mvnw install -Dnative -DskipTests -Dquarkus.native.container-build=true
            curl -v -u ${{secrets.CIPIPELINE_NEXUS_USERNAME}}:${{secrets.CIPIPELINE_NEXUS_PASSWORD}} \
              --upload-file ./target/function.zip \
              https://${{vars.NEXUS_SERVER_ENDPOINT}}/repository/${{vars.NEXUS_REPO_TESSELLOPS_ARTIFACTS}}/${LABEL}/$NAME/$NAME-${LATEST_TAG}.zip
            sudo mv ./target/function.zip  $NAME-${LATEST_TAG}.zip
            aws s3 cp $NAME-${LATEST_TAG}.zip s3://${{vars.TESSELLOPS_ARTIFACTS_DEV_S3}}/${LABEL}/$NAME/$NAME-${LATEST_TAG}.zip   
            set +e
          }
          jarBuild() {
            set -e
            NAME="$1"
            EXT="$2"
            # Add Build Function
            set +e
          }
          dockerBuildOps() {
            set -e
            IMAGE_NAME="$1"
            FILE="$4"
            if [[ "$FILE" == "null" || -z "$FILE" ]]; then
              FILE="./Dockerfile"
            fi
            echo "$FILE"
            sudo ./mvnw install -Dnative -DskipTests -Dquarkus.native.container-build=true
            sudo docker build -f $FILE -t ${DOCKERHUB_ORG}/$IMAGE_NAME:${LATEST_TAG} .
            sudo docker push ${DOCKERHUB_ORG}/$IMAGE_NAME:${LATEST_TAG}
            set +e
          }
          build() {
            type="$1"
            check=$(grep "$type" convoy.yaml)
            if [[ -z "$check" ]]; then
              return
            fi
            version=$(yq '.version' convoy.yaml)
            while IFS=$'\t' read -r name buildFunction ext file _; do
              echo "Name: $name"
              echo "buildFunction: $buildFunction"
              echo "Ext: $ext"
              echo "Version: $version"
              echo "dockerFile: $file"
              $buildFunction "$name" "$ext" "$version" "$file"
            done < <(yq e ".generates.$type[] | [.name, .buildFunction, .extension, .dockerFile] | @tsv" convoy.yaml)
          }
          set +e
          build "artifacts"
          build "dockerImages"

      - name: Remove target
        if: always()
        run: |
          set +e
          sudo rm -rf target
          sudo docker container prune --force
          sudo docker volume prune --force
                  
      - name: Slack Notification
        uses: act10ns/slack@v2.0.0
        if: failure()
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: ${{ secrets.SLACK_DEVOPS_CHANNEL }}
    
