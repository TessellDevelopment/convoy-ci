---
name: Tessell Pipelines Code Build Post merge
on:
  workflow_call:
    inputs:
      type:
        description: 'This is used to determine build type'
        required: true
        type: string
      tag:
        description: 'Latest tag for upload'
        required: true
        type: string
      label:
        description: 'Release label for upload'
        required: true
        type: string

jobs:

  build-ui:
    if: ${{ inputs.type == 'ui-build' }}
    runs-on: ui-build
    env:
      LATEST_TAG: ${{inputs.tag}}
      LABEL: ${{inputs.label}}
      DOCKERHUB_ORG: ${{vars.DOCKERHUB_ORG}}
      GITHUB_USER: ${{ secrets.CIPIPELINE_GITHUB_USER }}
      GITHUB_TOKEN: ${{ secrets.CIPIPELINE_GITHUB_TOKEN }}
      NEXUS_PROTOCOL: ${{vars.NEXUS_PROTOCOL_PUBLIC}}
      NEXUS_USERNAME: ${{secrets.CIPIPELINE_NEXUS_USERNAME}}
      NEXUS_PASSWORD: ${{secrets.CIPIPELINE_NEXUS_PASSWORD}}
      NEXUS_SERVER_ENDPOINT: ${{vars.NEXUS_SERVER_ENDPOINT_PUBLIC}}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      REPO: "${{github.event.pull_request.base.repo.name}}"
      NEXUS_PULL_REPOS_M2: tessell-m2-development
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      - name: Build
        shell: bash
        run: |
          configureNpmrc(){
            set +e 
            REPO="$1"
            rm ~/.npmrc
            TOKEN=$(echo -n '${{env.NEXUS_USERNAME}}:${{env.NEXUS_PASSWORD}}' | base64 -w 0)
            echo "//${{ env.NEXUS_SERVER_ENDPOINT }}/repository/:_auth = $TOKEN" >> ~/.npmrc
            echo "//${{ env.NEXUS_SERVER_ENDPOINT }}/repository/:always-auth = true" >> ~/.npmrc 
            echo "@tessell:registry=${{env.NEXUS_PROTOCOL}}://${{ env.NEXUS_SERVER_ENDPOINT }}/repository/$REPO" >> ~/.npmrc
            cat ~/.npmrc
          }
          gradlewUIBuild() {
            rm ~/.npmrc
            rm ~/.yarnrc
            TOKEN=$(echo -n '${{env.NEXUS_USERNAME}}:${{env.NEXUS_PASSWORD}}' | base64 -w 0)
            echo '"@tessell:registry" "${{env.NEXUS_PROTOCOL}}://${{ env.NEXUS_SERVER_ENDPOINT }}/repository/${{ vars.NEXUS_PUSH_REPOS_NPM }}/"' >> .yarnrc
            echo "always-auth=true" >> .npmrc
            echo "_auth=$TOKEN" >> .npmrc
            cat .npmrc
            cat .yarnrc
            set -e
            ENV_JSON='${{secrets.TESSELL_UI_ENV_SECRET}}'
            echo "$ENV_JSON" | jq -r 'to_entries | .[] | "\(.key)=\"\(.value)\"" ' | sed '1s/^/\n/' >> .env
            cat .env
            ./gradlew zipUiBuild --console plain --stacktrace \
              -Pnexus_username="${{ secrets.CIPIPELINE_NEXUS_USERNAME }}" \
              -Pnexus_password="${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}"
            set +e
          }
          gradlewUIBuildAndPush() {
            gradlewUIBuild
            set -e
            ./gradlew publish --console plain \
              -Pnexus_push_username="${{ secrets.CIPIPELINE_NEXUS_USERNAME }}" \
              -Pnexus_push_password="${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}" \
              -Pnexus_username="${{ secrets.CIPIPELINE_NEXUS_USERNAME }}" \
              -Pnexus_password="${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}" \
              -Pnexus_push_repo_m2="${{ vars.NEXUS_PUSH_REPOS_M2 }}" \
              -Pnexus_pull_repo_m2="${{ env.NEXUS_PULL_REPOS_M2 }}"
            set +e
          }
          npmBuildAndPush() {
            set -e
            npm install
            npm run build
            configureNpmrc "${{vars.NEXUS_REPO_NPM}}"
            set -e
            version="$3"
            yq ".version = \"$version\"" package.json > tmp_package.json
            mv tmp_package.json package.json
            npm publish   
            set +e
          }
          build() {
            type="$1"
            check=$(grep "$type" convoy.yaml)
            if [[ -z "$check" ]]; then
              return
            fi
            version=$(yq '.version' convoy.yaml)
            yq e ".generates.$type[] | [.name, .buildFunction, .extension, .dockerFile] | @csv" convoy.yaml | sed 's/,/ /g' > artifacts.txt
            lineNumber=1
            while :; do
              echo ------------------------------
              artifactData=$(sed "$lineNumber!d" artifacts.txt)
              if [[ -z "$artifactData" ]]; then
                break
              fi
              read -r name buildFunction ext file <<< "$artifactData"
              echo "Name: $name"
              echo "buildFunction: $buildFunction"
              echo "Ext: $ext"
              echo "Version: $version"
              echo "dockerFile: $file"
              "${buildFunction}AndPush" $name $ext $version $file 
              echo "$type $name done"
              echo ------------------------------
              lineNumber=$((lineNumber+1))
            done
            rm artifacts.txt
          }
          set +e
          build "artifacts"
          build "dockerImages"
          build "helmCharts"
                  
      - name: Slack Notification
        uses: act10ns/slack@v2.0.0
        if: failure()
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: ${{ secrets.SLACK_DEVOPS_CHANNEL }}
    
  build-ubuntu-latest:
    if: ${{ inputs.type == 'ubuntu-latest' }}
    runs-on: ubuntu-latest
    env:
      LATEST_TAG: ${{inputs.tag}}
      LABEL: ${{inputs.label}}
      DOCKERHUB_ORG: ${{vars.DOCKERHUB_ORG}}
      GITHUB_USER: ${{ secrets.CIPIPELINE_GITHUB_USER }}
      GITHUB_TOKEN: ${{ secrets.CIPIPELINE_GITHUB_TOKEN }}
      NEXUS_PROTOCOL: ${{vars.NEXUS_PROTOCOL_PUBLIC}}
      NEXUS_USERNAME: ${{secrets.CIPIPELINE_NEXUS_USERNAME}}
      NEXUS_PASSWORD: ${{secrets.CIPIPELINE_NEXUS_PASSWORD}}
      NEXUS_SERVER_ENDPOINT: ${{vars.NEXUS_SERVER_ENDPOINT_PUBLIC}}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      REPO: "${{github.event.pull_request.base.repo.name}}"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      - name: Build
        shell: bash
        run: |
          build() {
            type="$1"
            check=$(grep "$type" convoy.yaml)
            if [[ -z "$check" ]]; then
              return
            fi
            version=$(yq '.version' convoy.yaml)
            yq e ".generates.$type[] | [.name, .buildFunction, .extension, .dockerFile] | @csv" convoy.yaml | sed 's/,/ /g' > artifacts.txt
            lineNumber=1
            while :; do
              echo ------------------------------
              artifactData=$(sed "$lineNumber!d" artifacts.txt)
              if [[ -z "$artifactData" ]]; then
                break
              fi
              read -r name buildFunction ext file <<< "$artifactData"
              echo "Name: $name"
              echo "buildFunction: $buildFunction"
              echo "Ext: $ext"
              echo "Version: $version"
              echo "dockerFile: $file"
              "${buildFunction}AndPush" $name $ext $version $file 
              echo "$type $name done"
              echo ------------------------------
              lineNumber=$((lineNumber+1))
            done
            rm artifacts.txt
          }
          set +e
          build "artifacts"
          build "dockerImages"
          build "helmCharts"
                  
      - name: Slack Notification
        uses: act10ns/slack@v2.0.0
        if: failure()
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: ${{ secrets.SLACK_DEVOPS_CHANNEL }}
      
  build-amd:
    if: ${{ inputs.type == 'amd' }}
    runs-on: self-hosted
    env:
      LATEST_TAG: ${{inputs.tag}}
      LABEL: ${{inputs.label}}
      DOCKERHUB_ORG: ${{vars.DOCKERHUB_ORG}}
      GITHUB_USER: ${{ secrets.CIPIPELINE_GITHUB_USER }}
      GITHUB_TOKEN: ${{ secrets.CIPIPELINE_GITHUB_TOKEN }}
      NEXUS_PROTOCOL: ${{vars.NEXUS_PROTOCOL_LOCAL}}
      NEXUS_USERNAME: ${{secrets.CIPIPELINE_NEXUS_USERNAME}}
      NEXUS_PASSWORD: ${{secrets.CIPIPELINE_NEXUS_PASSWORD}}
      NEXUS_SERVER_ENDPOINT: ${{vars.NEXUS_SERVER_ENDPOINT_LOCAL}}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      REPO: "${{github.event.pull_request.base.repo.name}}"
      NEXUS_PULL_REPOS_M2: tessell-m2-development
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      - name: Changed files
        id: changed-files
        uses: tj-actions/changed-files@v39
        with:
          files: |
            Chart.yaml
            services/**

      - name: Login to docker
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}   

      - name: Build and Push
        shell: bash
        run: |
          cloneHelmTemplate() {
            GITHUB_WORKSPACE=$(pwd)
            CHART_GITHUB_LOCATION=$GITHUB_WORKSPACE
            TEMPLATE_REPO_GITHUB_LOCATION=$GITHUB_WORKSPACE/../convoy-helm-template
            echo "$CHART_GITHUB_LOCATION"
            echo "$TEMPLATE_REPO_GITHUB_LOCATION"
            echo "TEMPLATE_REPO_GITHUB_LOCATION=$TEMPLATE_REPO_GITHUB_LOCATION"
            echo "Cloning convoy-helm-template"
            rm -rf $TEMPLATE_REPO_GITHUB_LOCATION
            template_version=$(yq --exit-status '.convoy-helm-template' Chart.yaml)
            if [ $? -eq 0 ]; then
                echo "convoy-helm-template version: $template_version"
            else
                echo "convoy-helm-template version not found.Exiting."
                exit 1
            fi
            git clone --branch $template_version https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com/${{github.repository_owner}}/convoy-helm-template.git $TEMPLATE_REPO_GITHUB_LOCATION
            echo "Copying the service values file"
            cp -r $CHART_GITHUB_LOCATION/services/* $TEMPLATE_REPO_GITHUB_LOCATION/helm-chart/values/apps/
            cp -r $CHART_GITHUB_LOCATION/Chart.yaml $TEMPLATE_REPO_GITHUB_LOCATION/helm-chart/Chart.yaml
            set -e
            cd $TEMPLATE_REPO_GITHUB_LOCATION/scripts
            ls -lrta ../helm-chart/values/apps/
          }
          dockerBuild() {
            set -e
            IMAGE_NAME="$1"
            FILE="$4"
            if [[ "$FILE" == "null" || -z "$FILE" ]]; then
              FILE="./Dockerfile"
            fi
            echo "$FILE"
            docker build -f $FILE -t $IMAGE_NAME .
            set +e
          }
          dockerBuildAndPush() {
            set -e
            IMAGE_NAME="$1"
            dockerBuild "$@"
            docker tag $IMAGE_NAME ${DOCKERHUB_ORG}/$IMAGE_NAME:${LATEST_TAG}
            docker push ${DOCKERHUB_ORG}/$IMAGE_NAME:${LATEST_TAG}
            set +e
          }
          helmChartBuildAndPush() {
            set -e
            CHART_NAME="$1"
            cd scripts
            ./package-and-push --prod -n $CHART_NAME
            cd ..
            set +e
          }
          helmTemplateBuildAndPush() {
            if [[ ${{steps.changed-files.outputs.any_modified}} == 'true' ]]; then
              CHART_NAME="$1"
              cloneHelmTemplate
              echo "Running package and push"
              ./package-and-push --prod -n $CHART_NAME
              cd $GITHUB_WORKSPACE
              set +e
            fi
          }
          opsImageBuildAndPush() {
            set -e
            ./mvnw install -Dnative -DskipTests -Dquarkus.native.remote-container-build=true
            dockerBuild "$@"
            set +e
          }
          build() {
            type="$1"
            check=$(grep "$type" convoy.yaml)
            if [[ -z "$check" ]]; then
              return
            fi
            version=$(yq '.version' convoy.yaml)
            yq e ".generates.$type[] | [.name, .buildFunction, .extension, .dockerFile] | @csv" convoy.yaml | sed 's/,/ /g' > artifacts.txt
            lineNumber=1
            while :; do
              echo ------------------------------
              artifactData=$(sed "$lineNumber!d" artifacts.txt)
              if [[ -z "$artifactData" ]]; then
                break
              fi
              read -r name buildFunction ext file <<< "$artifactData"
              echo "Name: $name"
              echo "buildFunction: $buildFunction"
              echo "Ext: $ext"
              echo "Version: $version"
              echo "dockerFile: $file"
              "${buildFunction}AndPush" $name $ext $version $file 
              echo "$type $name done"
              echo ------------------------------
              lineNumber=$((lineNumber+1))
            done
            rm artifacts.txt
          }
          set +e
          build "artifacts"
          build "dockerImages"
          build "helmCharts"

      - name: Cleanup
        if: always()
        run: |
          set +e
          sudo rm -rf target
          docker container prune --force
          docker volume prune --force
                  
      - name: Slack Notification
        uses: act10ns/slack@v2.0.0
        if: failure()
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: ${{ secrets.SLACK_DEVOPS_CHANNEL }}
      
  build-arm:
    if: ${{ inputs.type == 'arm' }}
    runs-on: ARM64
    env:
      LATEST_TAG: ${{inputs.tag}}
      LABEL: ${{inputs.label}}
      DOCKERHUB_ORG: ${{vars.DOCKERHUB_ORG}}
      NEXUS_PROTOCOL: ${{vars.NEXUS_PROTOCOL_LOCAL}}
      NEXUS_SERVER_ENDPOINT: ${{vars.NEXUS_SERVER_ENDPOINT_LOCAL}}
      REPO: "${{github.event.pull_request.base.repo.name}}"
      GITHUB_USER: ${{ secrets.CIPIPELINE_GITHUB_USER }}
      GITHUB_TOKEN: ${{ secrets.CIPIPELINE_GITHUB_TOKEN }}
      NEXUS_USERNAME: ${{secrets.CIPIPELINE_NEXUS_USERNAME}}
      NEXUS_PASSWORD: ${{secrets.CIPIPELINE_NEXUS_PASSWORD}}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL  }}
    steps: 
      - name: Checkout code
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      - name: Login to Docker
        run : |
          docker login -u="${{ secrets.DOCKER_USERNAME }}" -p="${{ secrets.DOCKER_PASSWORD }}"

      - name: Build and Push OPS
        shell: bash
        run: |
          awsConfigureTessellopsArtifacts() {
            aws configure set aws_access_key_id ${{ secrets.TESSELLOPS_ARTIFACTS_DEV_ACCESS_KEY }}
            aws configure set aws_secret_access_key ${{ secrets.TESSELLOPS_ARTIFACTS_DEV_SECRET_KEY }}
            aws configure set region ap-south-1
          }
          dockerBuildAndPush() {
            set -e
            IMAGE_NAME="$1"
            FILE="$4"
            if [[ "$FILE" == "null" || -z "$FILE" ]]; then
              FILE="./Dockerfile"
            fi
            echo "$FILE"
            docker build -f $FILE -t ${DOCKERHUB_ORG}/$IMAGE_NAME:${LATEST_TAG} .
            docker push ${DOCKERHUB_ORG}/$IMAGE_NAME:${LATEST_TAG}
            set +e
          }
          jarBuildAndPush() {
            set -e
            NAME="$1"
            EXT="$2"
            VERSION="$3"
            awsConfigureTessellopsArtifacts
            ./mvnw package -Dversion=$VERSION
            curl -v -u ${{env.NEXUS_USERNAME}}:${{env.NEXUS_PASSWORD}} \
              --upload-file ./target/$NAME-$VERSION.$EXT \
              ${{env.NEXUS_PROTOCOL}}://${{env.NEXUS_SERVER_ENDPOINT}}/repository/${{vars.NEXUS_REPO_TESSELLOPS_ARTIFACTS}}/${LABEL}/$NAME/$NAME-$VERSION.$EXT
            aws s3 cp ./target/$NAME-$VERSION.$EXT s3://${{vars.TESSELLOPS_ARTIFACTS_DEV_S3}}/${LABEL}/$NAME/$NAME-$VERSION.$EXT 
            set +e
          }
          mvnwBuildAndPush() {
            set -e
            NAME="$1"
            awsConfigureTessellopsArtifacts
            ./mvnw install -Dnative -DskipTests -Dquarkus.native.remote-container-build=true
            curl -v -u ${{env.NEXUS_USERNAME}}:${{env.NEXUS_PASSWORD}} \
              --upload-file ./target/function.zip \
              ${{env.NEXUS_PROTOCOL}}://${{env.NEXUS_SERVER_ENDPOINT}}/repository/${{vars.NEXUS_REPO_TESSELLOPS_ARTIFACTS}}/${LABEL}/$NAME/$NAME-${LATEST_TAG}.zip
            mv ./target/function.zip  $NAME-${LATEST_TAG}.zip
            aws s3 cp $NAME-${LATEST_TAG}.zip s3://${{vars.TESSELLOPS_ARTIFACTS_DEV_S3}}/${LABEL}/$NAME/$NAME-${LATEST_TAG}.zip   
            set +e
          }
          opsImageBuildAndPush() {
            set -e
            NAME="$1"
            ./mvnw install -Dnative -DskipTests -Dquarkus.native.remote-container-build=true
            dockerBuild "$1" "$2" "$3" "$4"
            set +e
          }
          build() {
            type="$1"
            check=$(grep "$type" convoy.yaml)
            if [[ -z "$check" ]]; then
              return
            fi
            version=$(yq '.version' convoy.yaml)
            yq e ".generates.$type[] | [.name, .buildFunction, .extension, .dockerFile] | @csv" convoy.yaml | sed 's/,/ /g' > artifacts.txt
            lineNumber=1
            while :; do
              echo ------------------------------
              artifactData=$(sed "$lineNumber!d" artifacts.txt)
              if [[ -z "$artifactData" ]]; then
                break
              fi
              read -r name buildFunction ext file <<< "$artifactData"
              echo "Name: $name"
              echo "buildFunction: $buildFunction"
              echo "Ext: $ext"
              echo "Version: $version"
              echo "dockerFile: $file"
              "${buildFunction}AndPush" $name $ext $version $file 
              echo "$type $name done"
              echo ------------------------------
              lineNumber=$((lineNumber+1))
            done
            rm artifacts.txt
          }
          set +e
          build "artifacts"
          build "dockerImages"
          build "helmCharts"

      - name: Cleanup
        if: always()
        run: |
          set +e
          sudo rm -rf target
          docker container prune --force
          docker volume prune --force
                  
      - name: Slack Notification
        uses: act10ns/slack@v2.0.0
        if: failure()
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: ${{ secrets.SLACK_DEVOPS_CHANNEL }}