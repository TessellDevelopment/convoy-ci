---
name: Check Required Approvals
on:
  workflow_call:
 
jobs:
  check-approval:
    runs-on: self-hosted
    steps:
        - name: Checkout code
          uses: actions/checkout@v2

        - name: Dump GitHub context
          env:
            GITHUB_CONTEXT: ${{ toJson(github) }}
          run: |
            echo "$GITHUB_CONTEXT"

        - name: Check commits
          id: get-pr-commits
          run: |
            PR_COMMITS=$(curl -s "https://api.github.com/repos/$REPO/pulls/${{ github.event.pull_request.number }}/commits" | jq -r '. | length')
            echo "$PR_COMMITS"
            BASE_BRANCH="${{ github.vent.pull_request.base.ref }}"
            PR_COMMITS=$(git rev-list --count $(git merge-base HEAD origin/$BASE_BRANCH)..HEAD)
            PR_COMMITS=$(($PR_COMMITS-1))
            echo "Number of commits in PR: $PR_COMMITS"
            echo "::set-output name=pr_commits::$PR_COMMITS"

        - name: Check Approval
          env:
            TOKEN: ${{ secrets.CIPIPELINE_NEXUS_PASSWORD }}
          run: |
            title="${{github.event.pull_request.head.ref}}"
            user="${{github.event.pull_request.user.login}}"
            if [[ "$title" == *"double_commit"* && "$user" == "varenyatessell" ]]; then
              PR_COMMITS=${{ steps.get-pr-commits.outputs.pr_commits }}
              if [ "$PR_COMMITS" -gt 3 ]; then                                          #Testing
                echo "One Commit present in DC."
                exit 0
              else
                echo "More than one commit present in DC, need approval."
              fi
            fi

            ORG_NAME="TessellDevelopment"
            REPO=${{github.repository}}
            PR_NUMBER="${{ github.event.pull_request.number }}"
            LABELS=$(curl -s -H "Authorization: Bearer $TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/pulls/${PR_NUMBER}" | \
              jq -r '.labels[].name' | tr '\n' ',' | sed 's/,$//')
            IFS=',' read -ra LABEL_ARRAY <<< "$LABELS"
            for LABEL in "${LABEL_ARRAY[@]}"; do
              TEAM_NAME=$LABEL
              FLAG=0
              MEMBERS=$(curl -s -H "Authorization: Bearer $TOKEN" "https://api.github.com/orgs/$ORG_NAME/teams/$TEAM_NAME/members" | jq -r '.[].login')
              REVIEWERS=$(curl -L \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer $TOKEN" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              https://api.github.com/repos/$REPO/pulls/$PR_NUMBER/reviews | jq -r '.[] | select(.state == "APPROVED") | .user.login')
              IFS=, read -r -a REVIEWER_ARRAY <<< "$(echo -e "$REVIEWERS" | tr '\n' ',')"
              IFS=, read -r -a MEMBER_ARRAY <<< "$(echo -e "$MEMBERS" | tr '\n' ',')"
              for REVIEWER in "${REVIEWER_ARRAY[@]}"; do
                for MEMBER in "${MEMBER_ARRAY[@]}"; do
                  if [ "$REVIEWER" == "$MEMBER" ]; then
                    echo "Review Approved by: $REVIEWER"
                    FLAG=1
                  fi
                done
              done
              if [ $FLAG -eq 0 ]; then
                echo "Approval not present for $TEAM_NAME team."
                exit 1
              fi
            done
