---
name: Check Required Approvals
on:
  workflow_call:
    inputs:
      required-teams:
        description: 'Teams required for approval in the PR'
        required: true
        type: string
      convoy-changes:
        description: 'Check if PR has only convoy.yaml changes'
        required: true
        type: string
 
jobs:

  check-approval:
    runs-on: non-build
    steps:

        - uses: actions/checkout@v4.1.1
          with:
            fetch-depth: 0 

        - name: Check commits
          id: get-pr-commits
          run: |
            PR_COMMITS=$(curl -L \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.CIPIPELINE_GITHUB_TOKEN }}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              ${{vars.GH_API_URL}}/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/commits| jq -r '. | length')
            echo "Number of commits in PR: $PR_COMMITS"
            echo "::set-output name=pr_commits::$PR_COMMITS"
            echo "SKIP_APPROVAL=false" >> $GITHUB_ENV

        - name: Check Approval for DC
          if: (contains(github.event.pull_request.head.ref, 'double_commit'))
          env:
            TOKEN: ${{ secrets.CIPIPELINE_GITHUB_TOKEN }}
          run: |
            REPO="${{github.repository}}"
            PR_NUMBER="${{ github.event.pull_request.number }}"
            PR_COMMITS=${{ steps.get-pr-commits.outputs.pr_commits }}
            PAGE_NUMBER=1
            if [ "$PR_COMMITS" -eq 1 ]; then
              echo "One Commit present in DC. Skipping Codeowners Approval Check"
              echo "SKIP_APPROVAL=true" >> $GITHUB_ENV
            else
              echo "More than one commit present in DC, checking convoy.yaml content."
              git checkout ${{github.event.pull_request.base.ref}}
              git checkout ${{github.event.pull_request.head.ref}}
              base_branch=$(git merge-base HEAD origin/$(git rev-parse --abbrev-ref ${{github.event.pull_request.base.ref}}))
              changed_files=$(git diff --name-only "$base_branch"...HEAD)
              if [[ "$changed_files" != "convoy.yaml" ]]; then
                  echo "Changes detected in files other than convoy.yaml. Need Approval."
              else
                diff_output=$(git diff --unified=0 "$base_branch"...HEAD -- convoy.yaml | tail -n +6)
                if echo "$diff_output" | grep -qvE '^\+version: [0-9]+\.[0-9]+\.[0-9]+$|^-version: [0-9]+\.[0-9]+\.[0-9]+$|^@@ '; then
                    echo "Changes other than version line detected in convoy.yaml. Need Approval."
                else
                  echo "Only version line is changed in convoy.yaml. Checking if approval is already present."
                  echo "SKIP_APPROVAL=true" >> $GITHUB_ENV
                  REVIEWERS=$(curl -L \
                    -H "Accept: application/vnd.github+json" \
                    -H "Authorization: Bearer $TOKEN" \
                    -H "X-GitHub-Api-Version: 2022-11-28" \
                    "${{vars.GH_API_URL}}/repos/$REPO/pulls/$PR_NUMBER/reviews?per_page=100&page=$PAGE_NUMBER" | jq -r '.[] | select(.state == "APPROVED") | .user.login')
                  if [ -z "$REVIEWERS" ]; then
                    echo "Auto approving the DC."
                    RESPONSE=$(curl -s -H "Authorization: token ${{secrets.CI_APPROVER_TOKEN}}" \
                      -X POST -d '{"event":"APPROVE"}' \
                      "${{vars.GH_API_URL}}/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/reviews")
                  fi
                fi
              fi
            fi
            
        - name: Check Approval
          if: ${{ (github.event.review.state == 'approved' || github.event.review.state == 'commented' || github.event.review.state == 'changes_requested') && env.SKIP_APPROVAL == 'false' }}
          env:
            TOKEN: ${{ secrets.CIPIPELINE_GITHUB_TOKEN }}
          run: |
            set -e
            ORG_NAME="${{github.repository_owner}}"
            REPO="${{github.repository}}"
            PR_NUMBER="${{ github.event.pull_request.number }}"
            TEAMS="${{inputs.required-teams}}"
            PAGE_NUMBER=1
            ALL_REVIEWERS=""
            while true; do
              echo $PAGE_NUMBER
              REVIEWS=$(curl -L \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer $TOKEN" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                "${{vars.GH_API_URL}}/repos/$REPO/pulls/$PR_NUMBER/reviews?per_page=100&page=$PAGE_NUMBER")
              if [ "$(echo "$REVIEWS" | jq -r '. | length')" -eq 0 ]; then
                break
              fi
              REVIEWERS=$(echo "$REVIEWS" | jq -r '.[] | select(.state == "APPROVED") | .user.login')
              if [ -n "$REVIEWERS" ]; then
                ALL_REVIEWERS+="$REVIEWERS"
              fi
              echo $ALL_REVIEWERS
              ((PAGE_NUMBER++))
            done
            IFS=, read -r -a REVIEWER_ARRAY <<< "$(echo -e "$ALL_REVIEWERS" | tr '\n' ',')"
            IFS=' ' read -ra TEAMS_ARRAY <<< "$TEAMS"
            for TEAM in "${TEAMS_ARRAY[@]}"; do
              FLAG=0
              MEMBERS=$(curl -s -H "Authorization: Bearer $TOKEN" "${{vars.GH_API_URL}}/orgs/$ORG_NAME/teams/$TEAM/members" | jq -r '.[].login')
              IFS=, read -r -a MEMBER_ARRAY <<< "$(echo -e "$MEMBERS" | tr '\n' ',')"
              for REVIEWER in "${REVIEWER_ARRAY[@]}"; do
                for MEMBER in "${MEMBER_ARRAY[@]}"; do
                  if [ "$REVIEWER" == "$MEMBER" ]; then
                    echo "Review Approved by: $REVIEWER"
                    FLAG=1
                  fi
                done
              done
              if [ $FLAG -eq 0 ]; then
                echo "Approval not present for $TEAM team."
                exit 1
              fi
            done
