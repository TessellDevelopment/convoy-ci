---
name: Check Required Approvals
on:
  workflow_call:
    inputs:
      required-teams:
        description: 'Teams required for approval in the PR'
        required: true
        type: string
 
jobs:

  check-approval:
    runs-on: non-build
    steps:

        - name: Check commits
          id: get-pr-commits
          run: |
            PR_COMMITS=$(curl -L \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.CIPIPELINE_GITHUB_TOKEN }}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "${{vars.GH_API_URL}}/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/commits?per_page=100" | jq -r '. | length')
            echo "Number of commits in PR: $PR_COMMITS"
            echo "::set-output name=pr_commits::$PR_COMMITS"

        - name: Check Approval
          env:
            TOKEN: ${{ secrets.CIPIPELINE_GITHUB_TOKEN }}
          run: |
            title="${{github.event.pull_request.head.ref}}"
            user="${{github.event.pull_request.user.login}}"
            if [[ "$title" == *"double_commit"* && "$user" == "cipipelinetessell" ]]; then
              PR_COMMITS=${{ steps.get-pr-commits.outputs.pr_commits }}
              if [ "$PR_COMMITS" -eq 1 ]; then
                echo "One Commit present in DC."
                exit 0
              else
                echo "More than one commit present in DC, need approval."
              fi
            fi
            ORG_NAME="${{github.repository_owner}}"
            REPO="${{github.repository}}"
            PR_NUMBER="${{ github.event.pull_request.number }}"
            TEAMS="${{inputs.required-teams}}"
            REVIEWERS=$(curl -L \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer $TOKEN" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "${{vars.GH_API_URL}}/repos/$REPO/pulls/$PR_NUMBER/reviews?per_page=100" | jq -r '.[] | select(.state == "APPROVED") | .user.login')
            IFS=' ' read -ra TEAMS_ARRAY <<< "$TEAMS"
            IFS=, read -r -a REVIEWER_ARRAY <<< "$(echo -e "$REVIEWERS" | tr '\n' ',')"
            for TEAM in "${TEAMS_ARRAY[@]}"; do
              FLAG=0
              MEMBERS=$(curl -s -H "Authorization: Bearer $TOKEN" "${{vars.GH_API_URL}}/orgs/$ORG_NAME/teams/$TEAM/members" | jq -r '.[].login')
              IFS=, read -r -a MEMBER_ARRAY <<< "$(echo -e "$MEMBERS" | tr '\n' ',')"
              for REVIEWER in "${REVIEWER_ARRAY[@]}"; do
                for MEMBER in "${MEMBER_ARRAY[@]}"; do
                  if [ "$REVIEWER" == "$MEMBER" ]; then
                    echo "Review Approved by: $REVIEWER"
                    FLAG=1
                  fi
                done
              done
              if [ $FLAG -eq 0 ]; then
                echo "Approval not present for $TEAM team."
                exit 1
              fi
            done
