---
name: Check Changed Files

on:
  workflow_call:
    inputs:
      changed-files:
        description: 'All the changed files in PR'
        required: true
        type: string
    outputs:
      required-teams:
        description: 'Teams required for approval'
        value: ${{ jobs.read-codeowners.outputs.required-teams }}

jobs:
  
  read-codeowners:
    runs-on: amd64
    outputs:
      required-teams: ${{steps.extract-teams.outputs.teams}}
    steps: 
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.CIPIPELINE_NEXUS_PASSWORD  }}
          fetch-depth: 0
          ref: main
          
      - name: Set up Python
        uses: actions/setup-python@v2

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
 
      - name: Extract team names from CODEOWNERS
        id: extract-teams
        env:
          changed-files: "${{ inputs.changed-files }}"
        run: |
          python - <<EOF
          import os
          import sys
          def extract_team_names(team_names):
            return [team.replace('@TessellDevelopment/', '') for team in team_names]

          team_patterns = {}
          with open('.github/CODEOWNERS', 'r') as pattern_file:
            lines = pattern_file.readlines()

          for line in lines:
            line = line.strip()
            if not line or line.startswith('#'):
                continue

            parts = line.split()
            file_pattern = parts[0]
            team_names = parts[1:]

            team_names_cleaned = extract_team_names(team_names)
            team_patterns[file_pattern] = team_names_cleaned
          
          changed_files = os.environ.get('changed-files')
          changed_files_list = changed_files.split()
          changed_teams = set()
          for file_path in changed_files_list:
            for pattern, team_name in team_patterns.items():
              if (file_path.startswith(pattern) or file_path.startswith(pattern[:-2])) and pattern != '*':
                  changed_teams.update(team_name)
                  break
            else:
                changed_teams.update(team_patterns['*'])
        
          required_teams = ""
          for team in changed_teams:
            required_teams=required_teams+team+" "
          required_teams.strip()
          print(required_teams)
          sys.stdout.write(f"::set-output name=teams::{required_teams}\n")
          EOF
