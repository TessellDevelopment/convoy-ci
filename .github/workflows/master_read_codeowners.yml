---
name: Check Changed Files

on:
  workflow_call:
    inputs:
      changed-files:
        description: 'All the changed files in PR'
        required: true
        type: string
    outputs:
      required-teams:
        description: 'Teams required for approval'
        value: ${{ jobs.read-codeowners.outputs.required-teams }}

  workflow_dispatch:

jobs:
  read-codeowners:
    runs-on: self-hosted
    outputs:
      required-teams: ${{steps.extract-teams.outputs.teams}}
    steps: 
      - name: Set up Python
        uses: actions/setup-python@v2

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
 
      - name: Extract team names from CODEOWNERS
        id: extract-teams
        env:
          changed-files: "${{ inputs.changed-files }}"
        run: |
          python - <<EOF
          import os
          import sys
          def extract_team_names(team_names):
            return [team.replace('@TessellDevelopment/', '') for team in team_names]
        
          team_patterns = {}
          with open('.github/CODEOWNERS', 'r') as pattern_file:
              lines = pattern_file.readlines()
          
          for line in lines:
              line = line.strip()
              if not line or line.startswith('#'):
                  continue
          
              parts = line.split()
              file_pattern = parts[0]
              team_names = parts[1:]
          
              team_names_cleaned = extract_team_names(team_names)
              team_patterns[file_pattern] = team_names_cleaned
          
          changed_files = os.environ.get('changed-files')
          changed_files_list = changed_files.split()
          changed_teams = set()
          for file_path in changed_files_list:
              matched = False
              for pattern, team_names in team_patterns.items():
                  if pattern == '*' or (pattern.endswith('**') and file_path.startswith(pattern[:-2])):
                      required_teams = team_names
                      changed_teams.update(required_teams)
                      matched = True
                  elif file_path.startswith(pattern):
                      required_teams = team_names
                      changed_teams.update(required_teams)
                      matched = True
              
              if not matched:
                  for teams in team_patterns.values():
                      changed_teams.update(required_teams)
          
          required_teams = ""
          for team in changed_teams:
            required_teams=required_teams+team+" "
          required_teams.strip()
          print(required_teams)
          sys.stdout.write(f"::set-output name=teams::{required_teams}\n")
          EOF
          