name: Tessell Pipelines Code Build
on:
  workflow_call:
  workflow_dispatch:

jobs:
  find-latest-tag:
    uses: TessellDevelopment/convoy-ci/.github/workflows/master_find_latest_tag.yml@main
    secrets: inherit

  build-arm-images:
    runs-on: ARM64
    needs: find-latest-tag
    env:
      TAG: ${{needs.find-latest-tag.outputs.tag}}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL  }}
      DOCKERHUB_ORG: "tesselldev"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get branch name
        shell: bash
        run: |
          echo "SOURCE_BRANCH=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV

      - name: Set Docker Repository
        if: ${{ startsWith(env.SOURCE_BRANCH,'rel-') || env.SOURCE_BRANCH == 'main' }}
        shell: bash
        run: |
          echo "DOCKERHUB_ORG=tessellprod" >> $GITHUB_ENV

      - name: Install AWS CLI
        run: |
          curl -L -o install-aws.sh https://raw.githubusercontent.com/unfor19/install-aws-cli-action/master/entrypoint.sh && \
          chmod +x install-aws.sh
          sudo ./install-aws.sh "v2" "arm64"
          rm install-aws.sh
    
      - run: aws --version
        shell: bash

      - name: Configure AWS Credentials
        run: |
          export AWS_PROFILE=tessell-devqa-infra
          sudo docker login -u AWS -p $(aws ecr get-login-password --region ap-south-1) 219776070323.dkr.ecr.ap-south-1.amazonaws.com

      - name: Login to Docker
        run : |
          sudo docker login -u="${{ secrets.DOCKER_USERNAME }}" -p="${{ secrets.DOCKER_PASSWORD }}"
      
      - name: Build image
        if: ${{ !startsWith(env.SOURCE_BRANCH,'rel-') && env.SOURCE_BRANCH != 'main' }}
        run: |
          chmod +x ./images/bookie/script.sh
          chmod +x ./images/zookeeper/generate-zookeeper-config.sh
          while IFS=$'\t' read -r image function file _; do
            if [[ "$function" == "dockerBuild" && ! -z "$file" ]]; then
              echo "Building $image Image"
              sudo docker build -f $file --no-cache -t ${{env.DOCKERHUB_ORG}}/$image .
            fi
          done < <(yq e '.generates.dockerImages[] | [.name, .buildFunction, .dockerfile] | @tsv' convoy.yaml)

      - name: Build and push to tessellProd
        if: ${{ (startsWith(env.SOURCE_BRANCH,'rel-') || env.SOURCE_BRANCH == 'main')}}
        shell: bash
        run: |
          chmod +x ./images/bookie/script.sh
          chmod +x ./images/zookeeper/generate-zookeeper-config.sh
          while IFS=$'\t' read -r image function file _; do
            if [[ "$function" == "dockerBuild" && ! -z "$file" ]]; then
              echo "Building $image Image"
              sudo docker build -f $file --no-cache -t ${{env.DOCKERHUB_ORG}}/$image:${{env.TAG}} .
              sudo docker push ${{env.DOCKERHUB_ORG}}/$image:${{env.TAG}}
              sudo docker tag ${{env.DOCKERHUB_ORG}}/$image:${{env.TAG}} ${{vars.TESSELL_DEV_ECR}}/$image:${{env.TAG}}
              sudo docker push ${{vars.TESSELL_DEV_ECR}}/$image:${{env.TAG}}
            fi
          done < <(yq e '.generates.dockerImages[] | [.name, .buildFunction, .dockerfile] | @tsv' convoy.yaml)

          while IFS=$'\t' read -r image version _; do
            echo $image
            echo $version
            sudo docker pull ${{env.DOCKERHUB_ORG}}/$image:$version
            sudo docker tag ${{env.DOCKERHUB_ORG}}/$image:$version ${{env.DOCKERHUB_ORG}}/$image:${{env.TAG}}
            sudo docker push ${{env.DOCKERHUB_ORG}}/$image:${{env.TAG}}
            sudo docker tag ${{env.DOCKERHUB_ORG}}/$image:${{env.TAG}} ${{vars.TESSELL_DEV_ECR}}/$image:${{env.TAG}}
            sudo docker push ${{vars.TESSELL_DEV_ECR}}/$image:${{env.TAG}}
          done < <(yq e '.consumes.dockerImages[] | [.name, .version] | @tsv' convoy.yaml)

      - name: Tagging docker image with scan
        if: ${{ !startsWith(env.SOURCE_BRANCH,'rel-') && env.SOURCE_BRANCH != 'main' }}
        run: |
          sudo docker tag ${{env.DOCKERHUB_ORG}}/bookie:latest ${{env.DOCKERHUB_ORG}}/bookie:scan
          sudo docker tag ${{env.DOCKERHUB_ORG}}/zookeeper:latest ${{env.DOCKERHUB_ORG}}/zookeeper:scan

      - name: Docker image scan
        if: ${{ !startsWith(env.SOURCE_BRANCH,'rel-') && env.SOURCE_BRANCH != 'main' }}
        id: docker-image-scan-bookie
        uses: azure/container-scan@v0.1
        with:
            severity-threshold: CRITICAL
            image-name: ${{env.DOCKERHUB_ORG}}/bookie:scan
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}   
            trivy-version: 0.46.1
            
      - name: Upload image scan report
        if: ${{ !startsWith(env.SOURCE_BRANCH,'rel-') && env.SOURCE_BRANCH != 'main' }}
        uses: actions/upload-artifact@v3
        with:
            name: image-scan-report
            path: ${{ steps.docker-image-scan-bookie.outputs.scan-report-path }}
  
      - name: Docker image scan
        if: ${{ !startsWith(env.SOURCE_BRANCH,'rel-') && env.SOURCE_BRANCH != 'main' }}
        id: docker-image-scan-zookeeper
        uses: azure/container-scan@v0.1
        with:
            severity-threshold: CRITICAL
            image-name: ${{env.DOCKERHUB_ORG}}/zookeeper:scan
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}   
            trivy-version: 0.46.1
            
      - name: Upload image scan report
        if: ${{ !startsWith(env.SOURCE_BRANCH,'rel-') && env.SOURCE_BRANCH != 'main' }}
        uses: actions/upload-artifact@v3
        with:
            name: image-scan-report
            path: ${{ steps.docker-image-scan-zookeeper.outputs.scan-report-path }}
  
      - name: Slack Notification
        uses: act10ns/slack@v1.5.0
        if: ${{ failure() && (startsWith(env.SOURCE_BRANCH,'rel-') || env.SOURCE_BRANCH == 'main') }}
        with:
           status: ${{ job.status }}
           steps: ${{ toJson(steps) }}
           channel: ${{ secrets.SLACK_DEVOPS_CHANNEL  }}
       
  build-plugin:
    runs-on: self-hosted
    needs: find-latest-tag
    env:
      TAG: ${{needs.find-latest-tag.outputs.tag}}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL  }}
      DOCKER_IMAGE_NAME: tessell-db-plugin-milvus
      DOCKERHUB_ORG: "tesselldev"

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get branch name
        shell: bash
        run: |
          echo "SOURCE_BRANCH=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV

      - name: Set Docker Repository
        if: ${{ startsWith(env.SOURCE_BRANCH,'rel-') || env.SOURCE_BRANCH == 'main' }}
        shell: bash
        run: |
          echo "DOCKERHUB_ORG=tessellprod" >> $GITHUB_ENV

      - name: Install AWS CLI
        run: |
          curl -L -o install-aws.sh https://raw.githubusercontent.com/unfor19/install-aws-cli-action/master/entrypoint.sh && \
          chmod +x install-aws.sh
          sudo ./install-aws.sh "v2" "amd64"
          rm install-aws.sh
    
      - run: aws --version
        shell: bash

      - name: Configure AWS Credentials
        run: |
          aws configure set aws_access_key_id ${{ secrets.DEVQA_INFRA_ACCESS_KEY }}
          aws configure set aws_secret_access_key ${{ secrets.DEVQA_INFRA_SECRET_KEY }}
          aws configure set region ap-south-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Extract version
        id: extract-version
        run: | 
          AGENT_VERSION=$(yq '.tessellAgentVersion' convoy.yaml)
          TASKHANDLER_VERSION=$(yq '.taskHandlerVersion' convoy.yaml)
          echo "AGENT_VERSION=$AGENT_VERSION" >> $GITHUB_ENV
          echo "TASKHANDLER_VERSION=$TASKHANDLER_VERSION" >> $GITHUB_ENV
      
      - name: Build image
        if: ${{ !startsWith(env.SOURCE_BRANCH,'rel-') && env.SOURCE_BRANCH != 'main' }}
        run: |
          docker build --no-cache -t ${{env.DOCKERHUB_ORG}}/${{env.DOCKER_IMAGE_NAME}} \
                      --build-arg GITHUB_USER=${{secrets.CIPIPELINE_NEXUS_USERNAME}} \
                      --build-arg GITHUB_TOKEN=${{secrets.CIPIPELINE_NEXUS_PASSWORD}} \
                      --build-arg HANDLER_TAG=${{env.TASKHANDLER_VERSION}} \
                      --build-arg AGENT_TAG=${{env.AGENT_VERSION}} .

      - name: Build and push to tessellProd
        if: ${{ (startsWith(env.SOURCE_BRANCH,'rel-') || env.SOURCE_BRANCH == 'main')}}
        shell: bash
        run: |
          docker build --no-cache -t ${{env.DOCKERHUB_ORG}}/${{env.DOCKER_IMAGE_NAME}}:${{env.TAG}} \
                        --build-arg GITHUB_USER=${{secrets.CIPIPELINE_NEXUS_USERNAME}} \
                        --build-arg GITHUB_TOKEN=${{secrets.CIPIPELINE_NEXUS_PASSWORD}} \
                        --build-arg HANDLER_TAG=${{env.TASKHANDLER_VERSION}} \
                        --build-arg AGENT_TAG=${{env.AGENT_VERSION}} .
          docker push ${{ env.DOCKERHUB_ORG }}/${{ env.DOCKER_IMAGE_NAME }}:${{env.TAG}}
          docker tag ${{env.DOCKERHUB_ORG}}/${{ env.DOCKER_IMAGE_NAME }}:${{env.TAG}} 219776070323.dkr.ecr.ap-south-1.amazonaws.com/${{ env.DOCKER_IMAGE_NAME }}:${{env.TAG}}
          docker push 219776070323.dkr.ecr.ap-south-1.amazonaws.com/${{ env.DOCKER_IMAGE_NAME }}:${{env.TAG}}

      - name: Tagging docker image with scan
        if: ${{ !startsWith(env.SOURCE_BRANCH,'rel-') && env.SOURCE_BRANCH != 'main' }}
        run: |
          docker tag ${{env.DOCKERHUB_ORG}}/${{ env.DOCKER_IMAGE_NAME }}:latest ${{env.DOCKERHUB_ORG}}/${{ env.DOCKER_IMAGE_NAME }}:scan

  
      - name: Docker image scan
        if: ${{ !startsWith(env.SOURCE_BRANCH,'rel-') && env.SOURCE_BRANCH != 'main' }}
        id: docker-image-scan
        uses: azure/container-scan@v0.1
        with:
            severity-threshold: CRITICAL
            image-name: ${{env.DOCKERHUB_ORG}}/${{ env.DOCKER_IMAGE_NAME }}:scan
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}   
            trivy-version: 0.46.1
            
      - name: Upload image scan report
        if: ${{ !startsWith(env.SOURCE_BRANCH,'rel-') && env.SOURCE_BRANCH != 'main' }}
        uses: actions/upload-artifact@v3
        with:
            name: image-scan-report
            path: ${{ steps.docker-image-scan.outputs.scan-report-path }}
  
      - name: Slack Notification
        uses: act10ns/slack@v1.5.0
        if: ${{ failure() && (startsWith(env.SOURCE_BRANCH,'rel-') || env.SOURCE_BRANCH == 'main') }}
        with:
           status: ${{ job.status }}
           steps: ${{ toJson(steps) }}
           channel: ${{ secrets.SLACK_DEVOPS_CHANNEL  }}
    
  post-build-status-to-convoy:
    needs: [build-arm-images, build-plugin]
    if: always()  
    uses: TessellDevelopment/convoy-ci/.github/workflows/master_post_build_convoy.yml@main
    secrets: inherit

  send-mail:
    needs: [build-arm-images, build-plugin]
    if: failure() && (contains(github.event.pull_request.head.ref, 'double_commit'))
    uses: TessellDevelopment/convoy-ci/.github/workflows/master_send_email.yml@main 
    secrets: inherit
