#!/bin/bash

source ./ci-scripts/bash/functions-for-build-camel-case

aws_configure_devqa_infra() {
  aws configure set aws_access_key_id ${DEVQA_INFRA_ACCESS_KEY}
  aws configure set aws_secret_access_key ${DEVQA_INFRA_SECRET_KEY}
  aws configure set region ap-south-1
}

aws_configure_tessell_tools() {
  aws configure set aws_access_key_id ${PROD_ASSET_ACCESS_KEY }
  aws configure set aws_secret_access_key ${PROD_ASSET_SECRET_KEY }
  aws configure set region ap-south-1
}

create_tf_backend() {
  S3_BUCKET="$1"
  KEY="$2"
  AWS_ACCESS_KEY_ID="$3"
  AWS_SECRET_ACCESS_KEY="$4"
  AWS_REGION="ap-south-1"
  cat <<EOL > "backend.tf"
  terraform {
    backend "s3" {
      bucket               = "${S3_BUCKET}"
      key                  = "${KEY}"
      region               = "${AWS_REGION}"
      access_key           = "${AWS_ACCESS_KEY_ID}"
      secret_key           = "${AWS_SECRET_ACCESS_KEY}"
      encrypt              = true
    }
  }
EOL
}

build_convoy_tessell_client() {
  install_go_dependencies
  ./setup --client --version 0.0.0
}

build_convoy_tessell_client_and_push() {
  required_inputs="1"
  validate_inputs "$required_inputs" "$@"
  install_go_dependencies
  ./setup --client --version ${LATEST_TAG} --upload-to-nexus --prod
}

build_convoy_tessell_image() {
  required_inputs="1"
  validate_inputs "$required_inputs" "$@"
  install_go_dependencies
  python3 -m pip install build
  bash ./setup -i
}

build_convoy_tessell_image_and_push() {
  required_inputs="1"
  validate_inputs "$required_inputs" "$@"
  IMAGE="${1}"
  build_convoy_tessell_image  "$@"
  docker_tag_and_push  "${IMAGE}" "${LATEST_TAG}"
}

docker_build() {
  set -e
  IMAGE="${1}"
  FILE="${4}"
  if [[ "${FILE}" == "null" || -z "${FILE}" ]]; then
    FILE="./Dockerfile"
  fi
  required_inputs="1"
  validate_inputs "${required_inputs}" "$@" 
  docker build -f ${FILE} -t ${IMAGE} \
              --build-arg GITHUB_USER=${GITHUB_USER} \
              --build-arg GITHUB_TOKEN=${GITHUB_TOKEN} \
              --build-arg NEXUS_PROTOCOL=${NEXUS_PROTOCOL} \
              --build-arg NEXUS_SERVER_ENDPOINT=${NEXUS_SERVER_ENDPOINT} \
              --build-arg NEXUS_USERNAME=${NEXUS_USERNAME} \
              --build-arg NEXUS_PASSWORD=${NEXUS_PASSWORD} .
  set +e
}

docker_build_and_push() {
  set -e
  IMAGE="${1}"
  VERSION="${3}"
  TAG=${LATEST_TAG}
  if [[ "${VERSION}" != "null" ]]; then
    TAG=${VERSION}
  fi
  docker_build "$@"
  docker_tag_and_push "${IMAGE}" "${TAG}"
  set +e
}

docker_tag_and_push() {
  IMAGE="${1}"
  TAG="${2}"
  docker tag ${IMAGE}:latest ${DOCKERHUB_ORG}/${IMAGE}:${TAG}
  docker push ${DOCKERHUB_ORG}/${IMAGE}:${TAG}
}

frp_build() {
  set -e
  ./setup -b
  set +e
}

frp_build_and_push() {
  frp_build
  set -e
  EXTENSION="${2}"
  aws_configure_tessell_tools
  os_type=("linux" "windows")
  for OS in "${os_type[@]}"; do
    echo "frpc-{$OS}"
    mvn_deploy "tessell-frpc-${OS}" "${EXTENSION}" "./tessell-frpc-${OS}.${EXTENSION}" "tessell.frp" "${LATEST_TAG}"
    aws s3 cp "tessell-frpc-${OS}.${EXTENSION}" s3://tesselltools/terls/tessell/frp/${LATEST_TAG}/
    aws s3 cp "tessell-frpc-${OS}.${EXTENSION}" s3://tesselltools/${LABEL}/tessell-frpc-${OS}/tessell-frpc-${OS}-${LATEST_TAG}.${EXTENSION}
    push_to_nexus "tessell-frpc-${OS}.${EXTENSION}" "${NEXUS_ARTIFACT_REPO}/${LABEL}/$ARTIFACT/$ARTIFACT-${LATEST_TAG}.${EXTENSION}"
    for env in "${environments[@]}"
    do
      push_to_minio "tessell-frpc-${OS}.${EXTENSION}" "minio-ci/tessell-artifacts-$env/${LABEL}/tessell-frpc-${OS}/tessell-frpc-${OS}-${LATEST_TAG}.${EXTENSION}"
    done
    generate_checksum "tessell-frpc-${OS}.${EXTENSION}"
  done
  set +e
}

generate_checksum() {
  ARTIFACT=${1}
  BUILD_FILE=${2}
  if [[ -z "${BUILD_FILE}" ]]; then
    echo "Build File name same as Artifact name"
    BUILD_FILE=${ARTIFACT}
  fi
  file_path=$(find . -type f -name "${BUILD_FILE}" 2>/dev/null | head -n 1)
  if [[ -z "${file_path}" ]]; then
    echo "File not found!"
    return 1
  fi
  checksum=$(md5sum "${file_path}" | awk '{ print $1 }')   
  ARTIFACT="${ARTIFACT%%.*}"         
  ARTIFACT_CHECKSUMS+="${ARTIFACT}:${checksum}%"            
}

gradlew_docker_tag() {
  ./gradlew dockerTag --console plain \
    -Pnexus_username="${NEXUS_USERNAME}" \
    -Pnexus_password="${NEXUS_PASSWORD}" \
    -Pdockerhub_org="${DOCKERHUB_ORG}"
}

install_go_dependencies() {
  go version
  go install golang.org/x/tools/cmd/goimports@latest
  which go
}

python_docker_build_and_push() {
  set -e
  IMAGE="$1"
  required_inputs="1"
  validate_inputs "$required_inputs" "$@"
  gradlew_docker_tag
  docker push ${DOCKERHUB_ORG}/$IMAGE:${LATEST_TAG}
  set +e
}

mvn_deploy() {
  ARTIFACT_ID="${1}"
  EXTENSION="${2}"
  FILE="${3}"
  GROUP_ID="${4}"
  VERSION="${5}"
  required_inputs="1 2 3 4 5"
  validate_inputs "${required_inputs}" "$@" 
  mvn deploy:deploy-file -Dnexus_url=${NEXUS_PROTOCOL}://${NEXUS_SERVER_ENDPOINT}/repository/tessell-m2-component \
      -Dnexus_username=${NEXUS_USERNAME} -Dnexus_password=${NEXUS_PASSWORD} \
      -DgroupId=${GROUP_ID} -DartifactId=${ARTIFACT_ID} -Dversion=${VERSION} \
      -DgeneratePom=true -Dpackaging=${EXTENSION} \
      -Durl=${NEXUS_PROTOCOL}://${NEXUS_SERVER_ENDPOINT}/repository/${NEXUS_PUSH_REPOS_M2} \
      -Dfile=${FILE} -DrepositoryId=nexus
}

push_to_minio() {
  SOURCE="${1}"
  DESTINATION="${2}"
  MAX_RETRIES=5
  RETRY_DELAY=3
  local attempt=0
  while [ ${attempt} -lt ${MAX_RETRIES} ]; do
    mc cp "${SOURCE}" "${DESTINATION}"
    if [ $? -eq 0 ]; then
      echo "Artifact successfully pushed to minio ${DESTINATION}."
      return
    else
      attempt=$((attempt + 1))
      echo "Pushing artifact to minio failed. Attempt ${attempt} of ${MAX_RETRIES}. Retrying in ${RETRY_DELAY} seconds."
      sleep ${RETRY_DELAY}
    fi
  done
  echo "Pushing artifact to minio failed after ${MAX_RETRIES} attempts."
  return 1
}

push_to_nexus() {
  FILE_PATH="${1}"
  URL_PATH="${2}"
  required_inputs="1 2"
  validate_inputs "$required_inputs" "$@" 
  RESPONSE=$(curl -v -u ${NEXUS_USERNAME}:${NEXUS_PASSWORD} \
      --upload-file ${FILE_PATH}  -w "%{http_code}" \
      ${NEXUS_PROTOCOL}://${NEXUS_SERVER_ENDPOINT}/repository/${URL_PATH})
  echo ${REPONSE}
  HTTP_CODE=$(echo "${RESPONSE}" | tail -n1) 
  echo ${HTTP_CODE}
  HTTP_CODE=$((HTTP_CODE))
  if [ "${HTTP_CODE}" -ne 201 ]; then
    echo "Error: Unexpected HTTP response code ${HTTP_CODE}"
    exit 1
  fi
}

qa_build_and_push(){
  set -e
  required_inputs="1 3"
  validate_inputs "${required_inputs}" "$@" 
  setup_qa_env
  export GITHUB_TOKEN="${GITHUB_TOKEN}"
  cp configs/qabusiness.json config.json
  source qavenv/bin/activate
  make clients -B
  source qavenv/bin/activate
  python3 ./main.py ./testcases -s -v --dry-run --run-long-tests --business-edition
  deactivate
  if [[ ${CHANGED_FILES_ANY_MODIFIED} == 'true' ]]; then
    cd scripts
    docker_build_and_push $@
    cd ..
  fi
  set +e
}

setup_qa_env() {
  INSTALL_DIR=/usr/local/bin
  sudo mkdir -p ${INSTALL_DIR}/openapitools
  curl https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/bin/utils/openapi-generator-cli.sh > openapi-generator-cli
  sudo cp openapi-generator-cli ${INSTALL_DIR}/openapitools/openapi-generator-cli
  sudo chmod 755 ${INSTALL_DIR}/openapitools/openapi-generator-cli
  sudo ln -f -s ${INSTALL_DIR}/openapitools/openapi-generator-cli ${INSTALL_DIR}/openapi-generator
  wget https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/6.0.0/openapi-generator-cli-6.0.0.jar -O openapi-generator-cli.jar
  python3 -m pip cache purge
  sudo mv openapi-generator-cli.jar /usr/local/bin/openapi-generator-cli-6.0.0.jar
  python3 -m pip install --user virtualenv --trusted-host ${NEXUS_SERVER_ENDPOINT}
  python3 -m pip install yq wheel --trusted-host ${NEXUS_SERVER_ENDPOINT}
  python3 -m venv qavenv
  source qavenv/bin/activate
  python3 -m pip install wheel --trusted-host ${NEXUS_SERVER_ENDPOINT}
  python3 -m pip install -r scripts/requirements.txt --trusted-host ${NEXUS_SERVER_ENDPOINT} --extra-index-url=${NEXUS_PROTOCOL}://${NEXUS_USERNAME}:${NEXUS_PASSWORD}@${NEXUS_SERVER_ENDPOINT}/repository/${NEXUS_PULL_REPOS_PY}/simple
  python3 -m pip list | grep harness
  deactivate
}

terraform_apply() {
  set -e
  mkdir -p build
  cd terraform
  create_tf_backend "tf-state-convoy-dev-deployment" "tf-state-convoy-dev-deployment/terraform.tfstate-md5" "${COMMON_INFRA_ACCESS_KEY}" "${COMMON_INFRA_SECRET_KEY}"
  terraform init
  terraform plan
  cd ..
  set +e
}

terraformApplyAndPush() {
  set -e
  terraform_apply
  cd terraform
  terraform apply -auto-approve
  cd ..
  set +e
}

tsm_zip_build() {
  set -e
  ARTIFACT="${1}"
  required_inputs="1"
  validate_inputs "$required_inputs" "$@" 
  mkdir -p build; cd tsmv101; terraform_build $PWD ../build/${ARTIFACT}.zip; cd ../build; ls -l;
  unzip -l ${ARTIFACT}.zip
  cd ..
  set +e
}

tsm_zip_build_and_push() {
  tsm_zip_build "$@"
  set -e
  ARTIFACT="${1}"
  EXTENSION="${2}"
  VERSION="${3}"
  required_inputs="1 2 3"
  validate_inputs "${required_inputs}" "$@" 
  mvn_deploy "${ARTIFACT}" "${EXTENSION}" "build/${ARTIFACT}.${EXTENSION}" "tessell.tsm.infra" "${VERSION}"
  set +e
}

vss_tar_build() {
  set -e
  ARTIFACT="${1}"
  EXTENSION="${2}"
  CLOUD=$(echo "${ARTIFACT}" | awk -F'[-]' '{print $3}')
  DIR="build_${CLOUD}"
  mkdir ${DIR}
  cp -r  ../tessell-vss/tessell-vss-requestor/TessellVssRequestor.exe ../tessell-vss/tessell-vss-provider/${CLOUD}/install-provider ${DIR}
  cd ${DIR}
  tar -cf ../${ARTIFACT}.${EXTENSION} .
  cd ..
  ls
  set +e
}

vss_tar_build_and_push() {
  vss_tar_build "$@"
  set -e
  ARTIFACT="${1}"
  EXTENSION="${2}"
  mvn_deploy "${ARTIFACT}" "${EXTENSION}" "./${ARTIFACT}.${EXTENSION}" "tessell.vss" "${LATEST_TAG}"
  set +e
}

validate_inputs() {
  local required=($1)
  shift
  for index in "${required[@]}"; do
    if [ -z "${!index}" ]; then
      echo "Error: Required Argument at index ${index} is null or empty."
      exit 1
    fi
  done
}

zip_directory() {
  DIR="$1"
  ARTIFACT_FILE="$2"
  zip -r ${ARTIFACT_FILE} ${DIR}
}
